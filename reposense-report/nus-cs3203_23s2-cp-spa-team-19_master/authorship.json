[{"path":".gitattributes","fileType":"gitattributes","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"# Auto detect text files and perform LF normalization"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"* text\u003dauto"}],"authorContributionMap":{"github-classroom[bot]":2}},{"path":".github/workflows/cmake-mac.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"name: CI for CMake Project - macOS"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"on:"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"  push:"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"    branches:"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"      - master"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"  pull_request:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"    branches:"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"      - master"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"  schedule:"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    - cron: \"0 23 * * *\""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"env:"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    BUILD_TYPE: Release"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"jobs:"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"  build:"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    runs-on: macos-latest"},{"lineNumber":19,"author":{"gitId":"Virushade"},"content":"    timeout-minutes: 10"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    strategy:"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"      fail-fast: true"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    steps:"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"      - uses: actions/checkout@v2"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"      - name: Create Build Environment"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"        run: cmake -E make_directory ${{runner.workspace}}/build"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"      - name: Configure CMake"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"        shell: bash"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"        working-directory: ${{runner.workspace}}/build"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"        run: cmake $GITHUB_WORKSPACE/Team19/Code19/ -DCMAKE_BUILD_TYPE\u003d$BUILD_TYPE"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"      - name: Build Project"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"        working-directory: ${{runner.workspace}}/build"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"        shell: bash"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"        run: cmake --build . --config $BUILD_TYPE"}],"authorContributionMap":{"hmanhduc2k":36,"Virushade":1}},{"path":".github/workflows/cmake-single-platform.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"Virushade"},"content":"name: CI for Cmake Project - Windows"},{"lineNumber":2,"author":{"gitId":"Virushade"},"content":""},{"lineNumber":3,"author":{"gitId":"Virushade"},"content":"on:"},{"lineNumber":4,"author":{"gitId":"Virushade"},"content":"  push:"},{"lineNumber":5,"author":{"gitId":"Virushade"},"content":"    branches:"},{"lineNumber":6,"author":{"gitId":"Virushade"},"content":"      - master"},{"lineNumber":7,"author":{"gitId":"Virushade"},"content":"  pull_request:"},{"lineNumber":8,"author":{"gitId":"Virushade"},"content":"    branches:"},{"lineNumber":9,"author":{"gitId":"Virushade"},"content":"      - master"},{"lineNumber":10,"author":{"gitId":"Virushade"},"content":"# If you are doing triggering your workflow from pushes or merging more than twice a day on average,"},{"lineNumber":11,"author":{"gitId":"Virushade"},"content":"# please execute your workflow on a schedule instead."},{"lineNumber":12,"author":{"gitId":"Virushade"},"content":"# Comment the above 7 lines, and uncomment the following 3 lines"},{"lineNumber":13,"author":{"gitId":"Virushade"},"content":"# on:"},{"lineNumber":14,"author":{"gitId":"Virushade"},"content":"#   schedule:"},{"lineNumber":15,"author":{"gitId":"Virushade"},"content":"#     - cron: \"0 09,23 * * *\""},{"lineNumber":16,"author":{"gitId":"Virushade"},"content":""},{"lineNumber":17,"author":{"gitId":"Virushade"},"content":"env:"},{"lineNumber":18,"author":{"gitId":"Virushade"},"content":"    BUILD_TYPE: Release"},{"lineNumber":19,"author":{"gitId":"Virushade"},"content":""},{"lineNumber":20,"author":{"gitId":"Virushade"},"content":"jobs:"},{"lineNumber":21,"author":{"gitId":"Virushade"},"content":"  build:"},{"lineNumber":22,"author":{"gitId":"Virushade"},"content":"    runs-on: windows-latest"},{"lineNumber":23,"author":{"gitId":"Virushade"},"content":"    timeout-minutes: 10"},{"lineNumber":24,"author":{"gitId":"Virushade"},"content":"    strategy:"},{"lineNumber":25,"author":{"gitId":"Virushade"},"content":"      fail-fast: true"},{"lineNumber":26,"author":{"gitId":"Virushade"},"content":""},{"lineNumber":27,"author":{"gitId":"Virushade"},"content":"    steps:"},{"lineNumber":28,"author":{"gitId":"Virushade"},"content":"      - uses: actions/checkout@v2"},{"lineNumber":29,"author":{"gitId":"Virushade"},"content":"      - name: Build Project"},{"lineNumber":30,"author":{"gitId":"Virushade"},"content":"        shell: bash"},{"lineNumber":31,"author":{"gitId":"Virushade"},"content":"        run: |"},{"lineNumber":32,"author":{"gitId":"Virushade"},"content":"          cd Team19/Code19"},{"lineNumber":33,"author":{"gitId":"Virushade"},"content":"          mkdir build"},{"lineNumber":34,"author":{"gitId":"Virushade"},"content":"          cd build"},{"lineNumber":35,"author":{"gitId":"Virushade"},"content":"          cmake -A x64 .."},{"lineNumber":36,"author":{"gitId":"Virushade"},"content":"          cmake --build . --target unit_testing --config Release"},{"lineNumber":37,"author":{"gitId":"Virushade"},"content":"          cmake --build . --target integration_testing --config Release"},{"lineNumber":38,"author":{"gitId":"Virushade"},"content":"          cmake --build . --target autotester --config Release"},{"lineNumber":39,"author":{"gitId":"Virushade"},"content":"          cd ../.."}],"authorContributionMap":{"Virushade":39}},{"path":".gitignore","fileType":"gitignore","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"# Created by https://www.toptal.com/developers/gitignore/api/qt,qtcreator,linux,windows,macos,visualstudio,visualstudiocode,clion,c++"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"# Edit at https://www.toptal.com/developers/gitignore?templates\u003dqt,qtcreator,linux,windows,macos,visualstudio,visualstudiocode,clion,c++"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"### C++ ###"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"# Prerequisites"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"*.d"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"# Compiled Object files"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"*.slo"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"*.lo"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"*.o"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"*.obj"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"# Precompiled Headers"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"*.gch"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"*.pch"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"# Compiled Dynamic libraries"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"*.so"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"*.dylib"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"*.dll"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"# Fortran module files"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"*.mod"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"*.smod"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"# Compiled Static libraries"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"*.lai"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"*.la"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"*.a"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"*.lib"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"# Executables"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"*.exe"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"*.out"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"*.app"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"### CLion ###"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"# User-specific stuff"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/workspace.xml"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/tasks.xml"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/usage.statistics.xml"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dictionaries"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/shelf"},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"# AWS User-specific"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/aws.xml"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":"# Generated files"},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/contentModel.xml"},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"# Sensitive or high-churn files"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dataSources/"},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dataSources.ids"},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dataSources.local.xml"},{"lineNumber":60,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/sqlDataSources.xml"},{"lineNumber":61,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dynamic.xml"},{"lineNumber":62,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/uiDesigner.xml"},{"lineNumber":63,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/dbnavigator.xml"},{"lineNumber":64,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":65,"author":{"gitId":"github-classroom[bot]"},"content":"# Gradle"},{"lineNumber":66,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/gradle.xml"},{"lineNumber":67,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/libraries"},{"lineNumber":68,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":69,"author":{"gitId":"github-classroom[bot]"},"content":"# Gradle and Maven with auto-import"},{"lineNumber":70,"author":{"gitId":"github-classroom[bot]"},"content":"# When using Gradle or Maven with auto-import, you should exclude module files,"},{"lineNumber":71,"author":{"gitId":"github-classroom[bot]"},"content":"# since they will be recreated, and may cause churn.  Uncomment if using"},{"lineNumber":72,"author":{"gitId":"github-classroom[bot]"},"content":"# auto-import."},{"lineNumber":73,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/artifacts"},{"lineNumber":74,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/compiler.xml"},{"lineNumber":75,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/jarRepositories.xml"},{"lineNumber":76,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/modules.xml"},{"lineNumber":77,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/*.iml"},{"lineNumber":78,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/modules"},{"lineNumber":79,"author":{"gitId":"github-classroom[bot]"},"content":"# *.iml"},{"lineNumber":80,"author":{"gitId":"github-classroom[bot]"},"content":"# *.ipr"},{"lineNumber":81,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":82,"author":{"gitId":"github-classroom[bot]"},"content":"# CMake"},{"lineNumber":83,"author":{"gitId":"github-classroom[bot]"},"content":"cmake-build-*/"},{"lineNumber":84,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":85,"author":{"gitId":"github-classroom[bot]"},"content":"# Mongo Explorer plugin"},{"lineNumber":86,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/mongoSettings.xml"},{"lineNumber":87,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":88,"author":{"gitId":"github-classroom[bot]"},"content":"# File-based project format"},{"lineNumber":89,"author":{"gitId":"github-classroom[bot]"},"content":"*.iws"},{"lineNumber":90,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":91,"author":{"gitId":"github-classroom[bot]"},"content":"# IntelliJ"},{"lineNumber":92,"author":{"gitId":"github-classroom[bot]"},"content":"out/"},{"lineNumber":93,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":94,"author":{"gitId":"github-classroom[bot]"},"content":"# mpeltonen/sbt-idea plugin"},{"lineNumber":95,"author":{"gitId":"github-classroom[bot]"},"content":".idea_modules/"},{"lineNumber":96,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":97,"author":{"gitId":"github-classroom[bot]"},"content":"# JIRA plugin"},{"lineNumber":98,"author":{"gitId":"github-classroom[bot]"},"content":"atlassian-ide-plugin.xml"},{"lineNumber":99,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":100,"author":{"gitId":"github-classroom[bot]"},"content":"# Cursive Clojure plugin"},{"lineNumber":101,"author":{"gitId":"github-classroom[bot]"},"content":".idea/replstate.xml"},{"lineNumber":102,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":103,"author":{"gitId":"github-classroom[bot]"},"content":"# Crashlytics plugin (for Android Studio and IntelliJ)"},{"lineNumber":104,"author":{"gitId":"github-classroom[bot]"},"content":"com_crashlytics_export_strings.xml"},{"lineNumber":105,"author":{"gitId":"github-classroom[bot]"},"content":"crashlytics.properties"},{"lineNumber":106,"author":{"gitId":"github-classroom[bot]"},"content":"crashlytics-build.properties"},{"lineNumber":107,"author":{"gitId":"github-classroom[bot]"},"content":"fabric.properties"},{"lineNumber":108,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":109,"author":{"gitId":"github-classroom[bot]"},"content":"# Editor-based Rest Client"},{"lineNumber":110,"author":{"gitId":"github-classroom[bot]"},"content":".idea/httpRequests"},{"lineNumber":111,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":112,"author":{"gitId":"github-classroom[bot]"},"content":"# Android studio 3.1+ serialized cache file"},{"lineNumber":113,"author":{"gitId":"github-classroom[bot]"},"content":".idea/caches/build_file_checksums.ser"},{"lineNumber":114,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":115,"author":{"gitId":"github-classroom[bot]"},"content":"### CLion Patch ###"},{"lineNumber":116,"author":{"gitId":"github-classroom[bot]"},"content":"# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721"},{"lineNumber":117,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":118,"author":{"gitId":"github-classroom[bot]"},"content":"# *.iml"},{"lineNumber":119,"author":{"gitId":"github-classroom[bot]"},"content":"# modules.xml"},{"lineNumber":120,"author":{"gitId":"github-classroom[bot]"},"content":"# .idea/misc.xml"},{"lineNumber":121,"author":{"gitId":"github-classroom[bot]"},"content":"# *.ipr"},{"lineNumber":122,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":123,"author":{"gitId":"github-classroom[bot]"},"content":"# Sonarlint plugin"},{"lineNumber":124,"author":{"gitId":"github-classroom[bot]"},"content":"# https://plugins.jetbrains.com/plugin/7973-sonarlint"},{"lineNumber":125,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/sonarlint/"},{"lineNumber":126,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":127,"author":{"gitId":"github-classroom[bot]"},"content":"# SonarQube Plugin"},{"lineNumber":128,"author":{"gitId":"github-classroom[bot]"},"content":"# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin"},{"lineNumber":129,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/sonarIssues.xml"},{"lineNumber":130,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":131,"author":{"gitId":"github-classroom[bot]"},"content":"# Markdown Navigator plugin"},{"lineNumber":132,"author":{"gitId":"github-classroom[bot]"},"content":"# https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced"},{"lineNumber":133,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/markdown-navigator.xml"},{"lineNumber":134,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/markdown-navigator-enh.xml"},{"lineNumber":135,"author":{"gitId":"github-classroom[bot]"},"content":".idea/**/markdown-navigator/"},{"lineNumber":136,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":137,"author":{"gitId":"github-classroom[bot]"},"content":"# Cache file creation bug"},{"lineNumber":138,"author":{"gitId":"github-classroom[bot]"},"content":"# See https://youtrack.jetbrains.com/issue/JBR-2257"},{"lineNumber":139,"author":{"gitId":"github-classroom[bot]"},"content":".idea/$CACHE_FILE$"},{"lineNumber":140,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":141,"author":{"gitId":"github-classroom[bot]"},"content":"# CodeStream plugin"},{"lineNumber":142,"author":{"gitId":"github-classroom[bot]"},"content":"# https://plugins.jetbrains.com/plugin/12206-codestream"},{"lineNumber":143,"author":{"gitId":"github-classroom[bot]"},"content":".idea/codestream.xml"},{"lineNumber":144,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":145,"author":{"gitId":"github-classroom[bot]"},"content":"### Linux ###"},{"lineNumber":146,"author":{"gitId":"github-classroom[bot]"},"content":"*~"},{"lineNumber":147,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":148,"author":{"gitId":"github-classroom[bot]"},"content":"# temporary files which can be created if a process still has a handle open of a deleted file"},{"lineNumber":149,"author":{"gitId":"github-classroom[bot]"},"content":".fuse_hidden*"},{"lineNumber":150,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":151,"author":{"gitId":"github-classroom[bot]"},"content":"# KDE directory preferences"},{"lineNumber":152,"author":{"gitId":"github-classroom[bot]"},"content":".directory"},{"lineNumber":153,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":154,"author":{"gitId":"github-classroom[bot]"},"content":"# Linux trash folder which might appear on any partition or disk"},{"lineNumber":155,"author":{"gitId":"github-classroom[bot]"},"content":".Trash-*"},{"lineNumber":156,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":157,"author":{"gitId":"github-classroom[bot]"},"content":"# .nfs files are created when an open file is removed but is still being accessed"},{"lineNumber":158,"author":{"gitId":"github-classroom[bot]"},"content":".nfs*"},{"lineNumber":159,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":160,"author":{"gitId":"github-classroom[bot]"},"content":"### macOS ###"},{"lineNumber":161,"author":{"gitId":"github-classroom[bot]"},"content":"# General"},{"lineNumber":162,"author":{"gitId":"github-classroom[bot]"},"content":".DS_Store"},{"lineNumber":163,"author":{"gitId":"github-classroom[bot]"},"content":".AppleDouble"},{"lineNumber":164,"author":{"gitId":"github-classroom[bot]"},"content":".LSOverride"},{"lineNumber":165,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":166,"author":{"gitId":"github-classroom[bot]"},"content":"# Icon must end with two \\r"},{"lineNumber":167,"author":{"gitId":"github-classroom[bot]"},"content":"Icon"},{"lineNumber":168,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":169,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":170,"author":{"gitId":"github-classroom[bot]"},"content":"# Thumbnails"},{"lineNumber":171,"author":{"gitId":"github-classroom[bot]"},"content":"._*"},{"lineNumber":172,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":173,"author":{"gitId":"github-classroom[bot]"},"content":"# Files that might appear in the root of a volume"},{"lineNumber":174,"author":{"gitId":"github-classroom[bot]"},"content":".DocumentRevisions-V100"},{"lineNumber":175,"author":{"gitId":"github-classroom[bot]"},"content":".fseventsd"},{"lineNumber":176,"author":{"gitId":"github-classroom[bot]"},"content":".Spotlight-V100"},{"lineNumber":177,"author":{"gitId":"github-classroom[bot]"},"content":".TemporaryItems"},{"lineNumber":178,"author":{"gitId":"github-classroom[bot]"},"content":".Trashes"},{"lineNumber":179,"author":{"gitId":"github-classroom[bot]"},"content":".VolumeIcon.icns"},{"lineNumber":180,"author":{"gitId":"github-classroom[bot]"},"content":".com.apple.timemachine.donotpresent"},{"lineNumber":181,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":182,"author":{"gitId":"github-classroom[bot]"},"content":"# Directories potentially created on remote AFP share"},{"lineNumber":183,"author":{"gitId":"github-classroom[bot]"},"content":".AppleDB"},{"lineNumber":184,"author":{"gitId":"github-classroom[bot]"},"content":".AppleDesktop"},{"lineNumber":185,"author":{"gitId":"github-classroom[bot]"},"content":"Network Trash Folder"},{"lineNumber":186,"author":{"gitId":"github-classroom[bot]"},"content":"Temporary Items"},{"lineNumber":187,"author":{"gitId":"github-classroom[bot]"},"content":".apdisk"},{"lineNumber":188,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":189,"author":{"gitId":"github-classroom[bot]"},"content":"### Qt ###"},{"lineNumber":190,"author":{"gitId":"github-classroom[bot]"},"content":"# C++ objects and libs"},{"lineNumber":191,"author":{"gitId":"github-classroom[bot]"},"content":"*.so.*"},{"lineNumber":192,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":193,"author":{"gitId":"github-classroom[bot]"},"content":"# Qt-es"},{"lineNumber":194,"author":{"gitId":"github-classroom[bot]"},"content":"object_script.*.Release"},{"lineNumber":195,"author":{"gitId":"github-classroom[bot]"},"content":"object_script.*.Debug"},{"lineNumber":196,"author":{"gitId":"github-classroom[bot]"},"content":"*_plugin_import.cpp"},{"lineNumber":197,"author":{"gitId":"github-classroom[bot]"},"content":"/.qmake.cache"},{"lineNumber":198,"author":{"gitId":"github-classroom[bot]"},"content":"/.qmake.stash"},{"lineNumber":199,"author":{"gitId":"github-classroom[bot]"},"content":"*.pro.user"},{"lineNumber":200,"author":{"gitId":"github-classroom[bot]"},"content":"*.pro.user.*"},{"lineNumber":201,"author":{"gitId":"github-classroom[bot]"},"content":"*.qbs.user"},{"lineNumber":202,"author":{"gitId":"github-classroom[bot]"},"content":"*.qbs.user.*"},{"lineNumber":203,"author":{"gitId":"github-classroom[bot]"},"content":"*.moc"},{"lineNumber":204,"author":{"gitId":"github-classroom[bot]"},"content":"moc_*.cpp"},{"lineNumber":205,"author":{"gitId":"github-classroom[bot]"},"content":"moc_*.h"},{"lineNumber":206,"author":{"gitId":"github-classroom[bot]"},"content":"qrc_*.cpp"},{"lineNumber":207,"author":{"gitId":"github-classroom[bot]"},"content":"ui_*.h"},{"lineNumber":208,"author":{"gitId":"github-classroom[bot]"},"content":"*.qmlc"},{"lineNumber":209,"author":{"gitId":"github-classroom[bot]"},"content":"*.jsc"},{"lineNumber":210,"author":{"gitId":"github-classroom[bot]"},"content":"Makefile*"},{"lineNumber":211,"author":{"gitId":"github-classroom[bot]"},"content":"*build-*"},{"lineNumber":212,"author":{"gitId":"github-classroom[bot]"},"content":"*.qm"},{"lineNumber":213,"author":{"gitId":"github-classroom[bot]"},"content":"*.prl"},{"lineNumber":214,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":215,"author":{"gitId":"github-classroom[bot]"},"content":"# Qt unit tests"},{"lineNumber":216,"author":{"gitId":"github-classroom[bot]"},"content":"target_wrapper.*"},{"lineNumber":217,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":218,"author":{"gitId":"github-classroom[bot]"},"content":"# QtCreator"},{"lineNumber":219,"author":{"gitId":"github-classroom[bot]"},"content":"*.autosave"},{"lineNumber":220,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":221,"author":{"gitId":"github-classroom[bot]"},"content":"# QtCreator Qml"},{"lineNumber":222,"author":{"gitId":"github-classroom[bot]"},"content":"*.qmlproject.user"},{"lineNumber":223,"author":{"gitId":"github-classroom[bot]"},"content":"*.qmlproject.user.*"},{"lineNumber":224,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":225,"author":{"gitId":"github-classroom[bot]"},"content":"# QtCreator CMake"},{"lineNumber":226,"author":{"gitId":"github-classroom[bot]"},"content":"CMakeLists.txt.user*"},{"lineNumber":227,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":228,"author":{"gitId":"github-classroom[bot]"},"content":"# QtCreator 4.8\u003c compilation database"},{"lineNumber":229,"author":{"gitId":"github-classroom[bot]"},"content":"compile_commands.json"},{"lineNumber":230,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":231,"author":{"gitId":"github-classroom[bot]"},"content":"# QtCreator local machine specific files for imported projects"},{"lineNumber":232,"author":{"gitId":"github-classroom[bot]"},"content":"*creator.user*"},{"lineNumber":233,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":234,"author":{"gitId":"github-classroom[bot]"},"content":"*_qmlcache.qrc"},{"lineNumber":235,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":236,"author":{"gitId":"github-classroom[bot]"},"content":"### QtCreator ###"},{"lineNumber":237,"author":{"gitId":"github-classroom[bot]"},"content":"# gitignore for Qt Creator like IDE for pure C/C++ project without Qt"},{"lineNumber":238,"author":{"gitId":"github-classroom[bot]"},"content":"#"},{"lineNumber":239,"author":{"gitId":"github-classroom[bot]"},"content":"# Reference: http://doc.qt.io/qtcreator/creator-project-generic.html"},{"lineNumber":240,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":241,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":242,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":243,"author":{"gitId":"github-classroom[bot]"},"content":"# Qt Creator autogenerated files"},{"lineNumber":244,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":245,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":246,"author":{"gitId":"github-classroom[bot]"},"content":"# A listing of all the files included in the project"},{"lineNumber":247,"author":{"gitId":"github-classroom[bot]"},"content":"*.files"},{"lineNumber":248,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":249,"author":{"gitId":"github-classroom[bot]"},"content":"# Include directories"},{"lineNumber":250,"author":{"gitId":"github-classroom[bot]"},"content":"*.includes"},{"lineNumber":251,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":252,"author":{"gitId":"github-classroom[bot]"},"content":"# Project configuration settings like predefined Macros"},{"lineNumber":253,"author":{"gitId":"github-classroom[bot]"},"content":"*.config"},{"lineNumber":254,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":255,"author":{"gitId":"github-classroom[bot]"},"content":"# Qt Creator settings"},{"lineNumber":256,"author":{"gitId":"github-classroom[bot]"},"content":"*.creator"},{"lineNumber":257,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":258,"author":{"gitId":"github-classroom[bot]"},"content":"# User project settings"},{"lineNumber":259,"author":{"gitId":"github-classroom[bot]"},"content":"*.creator.user*"},{"lineNumber":260,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":261,"author":{"gitId":"github-classroom[bot]"},"content":"# Qt Creator backups"},{"lineNumber":262,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":263,"author":{"gitId":"github-classroom[bot]"},"content":"# Flags for Clang Code Model"},{"lineNumber":264,"author":{"gitId":"github-classroom[bot]"},"content":"*.cxxflags"},{"lineNumber":265,"author":{"gitId":"github-classroom[bot]"},"content":"*.cflags"},{"lineNumber":266,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":267,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":268,"author":{"gitId":"github-classroom[bot]"},"content":"### VisualStudioCode ###"},{"lineNumber":269,"author":{"gitId":"github-classroom[bot]"},"content":".vscode/*"},{"lineNumber":270,"author":{"gitId":"github-classroom[bot]"},"content":"!.vscode/settings.json"},{"lineNumber":271,"author":{"gitId":"github-classroom[bot]"},"content":"!.vscode/tasks.json"},{"lineNumber":272,"author":{"gitId":"github-classroom[bot]"},"content":"!.vscode/launch.json"},{"lineNumber":273,"author":{"gitId":"github-classroom[bot]"},"content":"!.vscode/extensions.json"},{"lineNumber":274,"author":{"gitId":"github-classroom[bot]"},"content":"*.code-workspace"},{"lineNumber":275,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":276,"author":{"gitId":"github-classroom[bot]"},"content":"# Local History for Visual Studio Code"},{"lineNumber":277,"author":{"gitId":"github-classroom[bot]"},"content":".history/"},{"lineNumber":278,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":279,"author":{"gitId":"github-classroom[bot]"},"content":"### VisualStudioCode Patch ###"},{"lineNumber":280,"author":{"gitId":"github-classroom[bot]"},"content":"# Ignore all local history of files"},{"lineNumber":281,"author":{"gitId":"github-classroom[bot]"},"content":".history"},{"lineNumber":282,"author":{"gitId":"github-classroom[bot]"},"content":".ionide"},{"lineNumber":283,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":284,"author":{"gitId":"github-classroom[bot]"},"content":"### Windows ###"},{"lineNumber":285,"author":{"gitId":"github-classroom[bot]"},"content":"# Windows thumbnail cache files"},{"lineNumber":286,"author":{"gitId":"github-classroom[bot]"},"content":"Thumbs.db"},{"lineNumber":287,"author":{"gitId":"github-classroom[bot]"},"content":"Thumbs.db:encryptable"},{"lineNumber":288,"author":{"gitId":"github-classroom[bot]"},"content":"ehthumbs.db"},{"lineNumber":289,"author":{"gitId":"github-classroom[bot]"},"content":"ehthumbs_vista.db"},{"lineNumber":290,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":291,"author":{"gitId":"github-classroom[bot]"},"content":"# Dump file"},{"lineNumber":292,"author":{"gitId":"github-classroom[bot]"},"content":"*.stackdump"},{"lineNumber":293,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":294,"author":{"gitId":"github-classroom[bot]"},"content":"# Folder config file"},{"lineNumber":295,"author":{"gitId":"github-classroom[bot]"},"content":"[Dd]esktop.ini"},{"lineNumber":296,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":297,"author":{"gitId":"github-classroom[bot]"},"content":"# Recycle Bin used on file shares"},{"lineNumber":298,"author":{"gitId":"github-classroom[bot]"},"content":"$RECYCLE.BIN/"},{"lineNumber":299,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":300,"author":{"gitId":"github-classroom[bot]"},"content":"# Windows Installer files"},{"lineNumber":301,"author":{"gitId":"github-classroom[bot]"},"content":"*.cab"},{"lineNumber":302,"author":{"gitId":"github-classroom[bot]"},"content":"*.msi"},{"lineNumber":303,"author":{"gitId":"github-classroom[bot]"},"content":"*.msix"},{"lineNumber":304,"author":{"gitId":"github-classroom[bot]"},"content":"*.msm"},{"lineNumber":305,"author":{"gitId":"github-classroom[bot]"},"content":"*.msp"},{"lineNumber":306,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":307,"author":{"gitId":"github-classroom[bot]"},"content":"# Windows shortcuts"},{"lineNumber":308,"author":{"gitId":"github-classroom[bot]"},"content":"*.lnk"},{"lineNumber":309,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":310,"author":{"gitId":"github-classroom[bot]"},"content":"### VisualStudio ###"},{"lineNumber":311,"author":{"gitId":"github-classroom[bot]"},"content":"## Ignore Visual Studio temporary files, build results, and"},{"lineNumber":312,"author":{"gitId":"github-classroom[bot]"},"content":"## files generated by popular Visual Studio add-ons."},{"lineNumber":313,"author":{"gitId":"github-classroom[bot]"},"content":"##"},{"lineNumber":314,"author":{"gitId":"github-classroom[bot]"},"content":"## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore"},{"lineNumber":315,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":316,"author":{"gitId":"github-classroom[bot]"},"content":"# User-specific files"},{"lineNumber":317,"author":{"gitId":"github-classroom[bot]"},"content":"*.rsuser"},{"lineNumber":318,"author":{"gitId":"github-classroom[bot]"},"content":"*.suo"},{"lineNumber":319,"author":{"gitId":"github-classroom[bot]"},"content":"*.user"},{"lineNumber":320,"author":{"gitId":"github-classroom[bot]"},"content":"*.userosscache"},{"lineNumber":321,"author":{"gitId":"github-classroom[bot]"},"content":"*.sln.docstates"},{"lineNumber":322,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":323,"author":{"gitId":"github-classroom[bot]"},"content":"# User-specific files (MonoDevelop/Xamarin Studio)"},{"lineNumber":324,"author":{"gitId":"github-classroom[bot]"},"content":"*.userprefs"},{"lineNumber":325,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":326,"author":{"gitId":"github-classroom[bot]"},"content":"# Mono auto generated files"},{"lineNumber":327,"author":{"gitId":"github-classroom[bot]"},"content":"mono_crash.*"},{"lineNumber":328,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":329,"author":{"gitId":"github-classroom[bot]"},"content":"# Build results"},{"lineNumber":330,"author":{"gitId":"github-classroom[bot]"},"content":"[Dd]ebug/"},{"lineNumber":331,"author":{"gitId":"github-classroom[bot]"},"content":"[Dd]ebugPublic/"},{"lineNumber":332,"author":{"gitId":"github-classroom[bot]"},"content":"[Rr]elease/"},{"lineNumber":333,"author":{"gitId":"github-classroom[bot]"},"content":"[Rr]eleases/"},{"lineNumber":334,"author":{"gitId":"github-classroom[bot]"},"content":"x64/"},{"lineNumber":335,"author":{"gitId":"github-classroom[bot]"},"content":"x86/"},{"lineNumber":336,"author":{"gitId":"github-classroom[bot]"},"content":"[Ww][Ii][Nn]32/"},{"lineNumber":337,"author":{"gitId":"github-classroom[bot]"},"content":"[Aa][Rr][Mm]/"},{"lineNumber":338,"author":{"gitId":"github-classroom[bot]"},"content":"[Aa][Rr][Mm]64/"},{"lineNumber":339,"author":{"gitId":"github-classroom[bot]"},"content":"bld/"},{"lineNumber":340,"author":{"gitId":"github-classroom[bot]"},"content":"[Bb]in/"},{"lineNumber":341,"author":{"gitId":"github-classroom[bot]"},"content":"[Oo]bj/"},{"lineNumber":342,"author":{"gitId":"github-classroom[bot]"},"content":"[Ll]og/"},{"lineNumber":343,"author":{"gitId":"github-classroom[bot]"},"content":"[Ll]ogs/"},{"lineNumber":344,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":345,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio 2015/2017 cache/options directory"},{"lineNumber":346,"author":{"gitId":"github-classroom[bot]"},"content":".vs/"},{"lineNumber":347,"author":{"gitId":"github-classroom[bot]"},"content":"# Uncomment if you have tasks that create the project\u0027s static files in wwwroot"},{"lineNumber":348,"author":{"gitId":"github-classroom[bot]"},"content":"#wwwroot/"},{"lineNumber":349,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":350,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio 2017 auto generated files"},{"lineNumber":351,"author":{"gitId":"github-classroom[bot]"},"content":"Generated\\ Files/"},{"lineNumber":352,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":353,"author":{"gitId":"github-classroom[bot]"},"content":"# MSTest test Results"},{"lineNumber":354,"author":{"gitId":"github-classroom[bot]"},"content":"[Tt]est[Rr]esult*/"},{"lineNumber":355,"author":{"gitId":"github-classroom[bot]"},"content":"[Bb]uild[Ll]og.*"},{"lineNumber":356,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":357,"author":{"gitId":"github-classroom[bot]"},"content":"# NUnit"},{"lineNumber":358,"author":{"gitId":"github-classroom[bot]"},"content":"*.VisualState.xml"},{"lineNumber":359,"author":{"gitId":"github-classroom[bot]"},"content":"TestResult.xml"},{"lineNumber":360,"author":{"gitId":"github-classroom[bot]"},"content":"nunit-*.xml"},{"lineNumber":361,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":362,"author":{"gitId":"github-classroom[bot]"},"content":"# Build Results of an ATL Project"},{"lineNumber":363,"author":{"gitId":"github-classroom[bot]"},"content":"[Dd]ebugPS/"},{"lineNumber":364,"author":{"gitId":"github-classroom[bot]"},"content":"[Rr]eleasePS/"},{"lineNumber":365,"author":{"gitId":"github-classroom[bot]"},"content":"dlldata.c"},{"lineNumber":366,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":367,"author":{"gitId":"github-classroom[bot]"},"content":"# Benchmark Results"},{"lineNumber":368,"author":{"gitId":"github-classroom[bot]"},"content":"BenchmarkDotNet.Artifacts/"},{"lineNumber":369,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":370,"author":{"gitId":"github-classroom[bot]"},"content":"# .NET Core"},{"lineNumber":371,"author":{"gitId":"github-classroom[bot]"},"content":"project.lock.json"},{"lineNumber":372,"author":{"gitId":"github-classroom[bot]"},"content":"project.fragment.lock.json"},{"lineNumber":373,"author":{"gitId":"github-classroom[bot]"},"content":"artifacts/"},{"lineNumber":374,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":375,"author":{"gitId":"github-classroom[bot]"},"content":"# ASP.NET Scaffolding"},{"lineNumber":376,"author":{"gitId":"github-classroom[bot]"},"content":"ScaffoldingReadMe.txt"},{"lineNumber":377,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":378,"author":{"gitId":"github-classroom[bot]"},"content":"# StyleCop"},{"lineNumber":379,"author":{"gitId":"github-classroom[bot]"},"content":"StyleCopReport.xml"},{"lineNumber":380,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":381,"author":{"gitId":"github-classroom[bot]"},"content":"# Files built by Visual Studio"},{"lineNumber":382,"author":{"gitId":"github-classroom[bot]"},"content":"*_i.c"},{"lineNumber":383,"author":{"gitId":"github-classroom[bot]"},"content":"*_p.c"},{"lineNumber":384,"author":{"gitId":"github-classroom[bot]"},"content":"*_h.h"},{"lineNumber":385,"author":{"gitId":"github-classroom[bot]"},"content":"*.ilk"},{"lineNumber":386,"author":{"gitId":"github-classroom[bot]"},"content":"*.meta"},{"lineNumber":387,"author":{"gitId":"github-classroom[bot]"},"content":"*.iobj"},{"lineNumber":388,"author":{"gitId":"github-classroom[bot]"},"content":"*.pdb"},{"lineNumber":389,"author":{"gitId":"github-classroom[bot]"},"content":"*.ipdb"},{"lineNumber":390,"author":{"gitId":"github-classroom[bot]"},"content":"*.pgc"},{"lineNumber":391,"author":{"gitId":"github-classroom[bot]"},"content":"*.pgd"},{"lineNumber":392,"author":{"gitId":"github-classroom[bot]"},"content":"*.rsp"},{"lineNumber":393,"author":{"gitId":"github-classroom[bot]"},"content":"*.sbr"},{"lineNumber":394,"author":{"gitId":"github-classroom[bot]"},"content":"*.tlb"},{"lineNumber":395,"author":{"gitId":"github-classroom[bot]"},"content":"*.tli"},{"lineNumber":396,"author":{"gitId":"github-classroom[bot]"},"content":"*.tlh"},{"lineNumber":397,"author":{"gitId":"github-classroom[bot]"},"content":"*.tmp"},{"lineNumber":398,"author":{"gitId":"github-classroom[bot]"},"content":"*.tmp_proj"},{"lineNumber":399,"author":{"gitId":"github-classroom[bot]"},"content":"*_wpftmp.csproj"},{"lineNumber":400,"author":{"gitId":"github-classroom[bot]"},"content":"*.log"},{"lineNumber":401,"author":{"gitId":"github-classroom[bot]"},"content":"*.tlog"},{"lineNumber":402,"author":{"gitId":"github-classroom[bot]"},"content":"*.vspscc"},{"lineNumber":403,"author":{"gitId":"github-classroom[bot]"},"content":"*.vssscc"},{"lineNumber":404,"author":{"gitId":"github-classroom[bot]"},"content":".builds"},{"lineNumber":405,"author":{"gitId":"github-classroom[bot]"},"content":"*.pidb"},{"lineNumber":406,"author":{"gitId":"github-classroom[bot]"},"content":"*.svclog"},{"lineNumber":407,"author":{"gitId":"github-classroom[bot]"},"content":"*.scc"},{"lineNumber":408,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":409,"author":{"gitId":"github-classroom[bot]"},"content":"# Chutzpah Test files"},{"lineNumber":410,"author":{"gitId":"github-classroom[bot]"},"content":"_Chutzpah*"},{"lineNumber":411,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":412,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual C++ cache files"},{"lineNumber":413,"author":{"gitId":"github-classroom[bot]"},"content":"ipch/"},{"lineNumber":414,"author":{"gitId":"github-classroom[bot]"},"content":"*.aps"},{"lineNumber":415,"author":{"gitId":"github-classroom[bot]"},"content":"*.ncb"},{"lineNumber":416,"author":{"gitId":"github-classroom[bot]"},"content":"*.opendb"},{"lineNumber":417,"author":{"gitId":"github-classroom[bot]"},"content":"*.opensdf"},{"lineNumber":418,"author":{"gitId":"github-classroom[bot]"},"content":"*.sdf"},{"lineNumber":419,"author":{"gitId":"github-classroom[bot]"},"content":"*.cachefile"},{"lineNumber":420,"author":{"gitId":"github-classroom[bot]"},"content":"*.VC.db"},{"lineNumber":421,"author":{"gitId":"github-classroom[bot]"},"content":"*.VC.VC.opendb"},{"lineNumber":422,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":423,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio profiler"},{"lineNumber":424,"author":{"gitId":"github-classroom[bot]"},"content":"*.psess"},{"lineNumber":425,"author":{"gitId":"github-classroom[bot]"},"content":"*.vsp"},{"lineNumber":426,"author":{"gitId":"github-classroom[bot]"},"content":"*.vspx"},{"lineNumber":427,"author":{"gitId":"github-classroom[bot]"},"content":"*.sap"},{"lineNumber":428,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":429,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio Trace Files"},{"lineNumber":430,"author":{"gitId":"github-classroom[bot]"},"content":"*.e2e"},{"lineNumber":431,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":432,"author":{"gitId":"github-classroom[bot]"},"content":"# TFS 2012 Local Workspace"},{"lineNumber":433,"author":{"gitId":"github-classroom[bot]"},"content":"$tf/"},{"lineNumber":434,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":435,"author":{"gitId":"github-classroom[bot]"},"content":"# Guidance Automation Toolkit"},{"lineNumber":436,"author":{"gitId":"github-classroom[bot]"},"content":"*.gpState"},{"lineNumber":437,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":438,"author":{"gitId":"github-classroom[bot]"},"content":"# ReSharper is a .NET coding add-in"},{"lineNumber":439,"author":{"gitId":"github-classroom[bot]"},"content":"_ReSharper*/"},{"lineNumber":440,"author":{"gitId":"github-classroom[bot]"},"content":"*.[Rr]e[Ss]harper"},{"lineNumber":441,"author":{"gitId":"github-classroom[bot]"},"content":"*.DotSettings.user"},{"lineNumber":442,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":443,"author":{"gitId":"github-classroom[bot]"},"content":"# TeamCity is a build add-in"},{"lineNumber":444,"author":{"gitId":"github-classroom[bot]"},"content":"_TeamCity*"},{"lineNumber":445,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":446,"author":{"gitId":"github-classroom[bot]"},"content":"# DotCover is a Code Coverage Tool"},{"lineNumber":447,"author":{"gitId":"github-classroom[bot]"},"content":"*.dotCover"},{"lineNumber":448,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":449,"author":{"gitId":"github-classroom[bot]"},"content":"# AxoCover is a Code Coverage Tool"},{"lineNumber":450,"author":{"gitId":"github-classroom[bot]"},"content":".axoCover/*"},{"lineNumber":451,"author":{"gitId":"github-classroom[bot]"},"content":"!.axoCover/settings.json"},{"lineNumber":452,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":453,"author":{"gitId":"github-classroom[bot]"},"content":"# Coverlet is a free, cross platform Code Coverage Tool"},{"lineNumber":454,"author":{"gitId":"github-classroom[bot]"},"content":"coverage*.json"},{"lineNumber":455,"author":{"gitId":"github-classroom[bot]"},"content":"coverage*.xml"},{"lineNumber":456,"author":{"gitId":"github-classroom[bot]"},"content":"coverage*.info"},{"lineNumber":457,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":458,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio code coverage results"},{"lineNumber":459,"author":{"gitId":"github-classroom[bot]"},"content":"*.coverage"},{"lineNumber":460,"author":{"gitId":"github-classroom[bot]"},"content":"*.coveragexml"},{"lineNumber":461,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":462,"author":{"gitId":"github-classroom[bot]"},"content":"# NCrunch"},{"lineNumber":463,"author":{"gitId":"github-classroom[bot]"},"content":"_NCrunch_*"},{"lineNumber":464,"author":{"gitId":"github-classroom[bot]"},"content":".*crunch*.local.xml"},{"lineNumber":465,"author":{"gitId":"github-classroom[bot]"},"content":"nCrunchTemp_*"},{"lineNumber":466,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":467,"author":{"gitId":"github-classroom[bot]"},"content":"# MightyMoose"},{"lineNumber":468,"author":{"gitId":"github-classroom[bot]"},"content":"*.mm.*"},{"lineNumber":469,"author":{"gitId":"github-classroom[bot]"},"content":"AutoTest.Net/"},{"lineNumber":470,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":471,"author":{"gitId":"github-classroom[bot]"},"content":"# Web workbench (sass)"},{"lineNumber":472,"author":{"gitId":"github-classroom[bot]"},"content":".sass-cache/"},{"lineNumber":473,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":474,"author":{"gitId":"github-classroom[bot]"},"content":"# Installshield output folder"},{"lineNumber":475,"author":{"gitId":"github-classroom[bot]"},"content":"[Ee]xpress/"},{"lineNumber":476,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":477,"author":{"gitId":"github-classroom[bot]"},"content":"# DocProject is a documentation generator add-in"},{"lineNumber":478,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/buildhelp/"},{"lineNumber":479,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/*.HxT"},{"lineNumber":480,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/*.HxC"},{"lineNumber":481,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/*.hhc"},{"lineNumber":482,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/*.hhk"},{"lineNumber":483,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/*.hhp"},{"lineNumber":484,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/Html2"},{"lineNumber":485,"author":{"gitId":"github-classroom[bot]"},"content":"DocProject/Help/html"},{"lineNumber":486,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":487,"author":{"gitId":"github-classroom[bot]"},"content":"# Click-Once directory"},{"lineNumber":488,"author":{"gitId":"github-classroom[bot]"},"content":"publish/"},{"lineNumber":489,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":490,"author":{"gitId":"github-classroom[bot]"},"content":"# Publish Web Output"},{"lineNumber":491,"author":{"gitId":"github-classroom[bot]"},"content":"*.[Pp]ublish.xml"},{"lineNumber":492,"author":{"gitId":"github-classroom[bot]"},"content":"*.azurePubxml"},{"lineNumber":493,"author":{"gitId":"github-classroom[bot]"},"content":"# Note: Comment the next line if you want to checkin your web deploy settings,"},{"lineNumber":494,"author":{"gitId":"github-classroom[bot]"},"content":"# but database connection strings (with potential passwords) will be unencrypted"},{"lineNumber":495,"author":{"gitId":"github-classroom[bot]"},"content":"*.pubxml"},{"lineNumber":496,"author":{"gitId":"github-classroom[bot]"},"content":"*.publishproj"},{"lineNumber":497,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":498,"author":{"gitId":"github-classroom[bot]"},"content":"# Microsoft Azure Web App publish settings. Comment the next line if you want to"},{"lineNumber":499,"author":{"gitId":"github-classroom[bot]"},"content":"# checkin your Azure Web App publish settings, but sensitive information contained"},{"lineNumber":500,"author":{"gitId":"github-classroom[bot]"},"content":"# in these scripts will be unencrypted"},{"lineNumber":501,"author":{"gitId":"github-classroom[bot]"},"content":"PublishScripts/"},{"lineNumber":502,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":503,"author":{"gitId":"github-classroom[bot]"},"content":"# NuGet Packages"},{"lineNumber":504,"author":{"gitId":"github-classroom[bot]"},"content":"*.nupkg"},{"lineNumber":505,"author":{"gitId":"github-classroom[bot]"},"content":"# NuGet Symbol Packages"},{"lineNumber":506,"author":{"gitId":"github-classroom[bot]"},"content":"*.snupkg"},{"lineNumber":507,"author":{"gitId":"github-classroom[bot]"},"content":"# The packages folder can be ignored because of Package Restore"},{"lineNumber":508,"author":{"gitId":"github-classroom[bot]"},"content":"**/[Pp]ackages/*"},{"lineNumber":509,"author":{"gitId":"github-classroom[bot]"},"content":"# except build/, which is used as an MSBuild target."},{"lineNumber":510,"author":{"gitId":"github-classroom[bot]"},"content":"!**/[Pp]ackages/build/"},{"lineNumber":511,"author":{"gitId":"github-classroom[bot]"},"content":"# Uncomment if necessary however generally it will be regenerated when needed"},{"lineNumber":512,"author":{"gitId":"github-classroom[bot]"},"content":"#!**/[Pp]ackages/repositories.config"},{"lineNumber":513,"author":{"gitId":"github-classroom[bot]"},"content":"# NuGet v3\u0027s project.json files produces more ignorable files"},{"lineNumber":514,"author":{"gitId":"github-classroom[bot]"},"content":"*.nuget.props"},{"lineNumber":515,"author":{"gitId":"github-classroom[bot]"},"content":"*.nuget.targets"},{"lineNumber":516,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":517,"author":{"gitId":"github-classroom[bot]"},"content":"# Nuget personal access tokens and Credentials"},{"lineNumber":518,"author":{"gitId":"github-classroom[bot]"},"content":"nuget.config"},{"lineNumber":519,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":520,"author":{"gitId":"github-classroom[bot]"},"content":"# Microsoft Azure Build Output"},{"lineNumber":521,"author":{"gitId":"github-classroom[bot]"},"content":"csx/"},{"lineNumber":522,"author":{"gitId":"github-classroom[bot]"},"content":"*.build.csdef"},{"lineNumber":523,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":524,"author":{"gitId":"github-classroom[bot]"},"content":"# Microsoft Azure Emulator"},{"lineNumber":525,"author":{"gitId":"github-classroom[bot]"},"content":"ecf/"},{"lineNumber":526,"author":{"gitId":"github-classroom[bot]"},"content":"rcf/"},{"lineNumber":527,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":528,"author":{"gitId":"github-classroom[bot]"},"content":"# Windows Store app package directories and files"},{"lineNumber":529,"author":{"gitId":"github-classroom[bot]"},"content":"AppPackages/"},{"lineNumber":530,"author":{"gitId":"github-classroom[bot]"},"content":"BundleArtifacts/"},{"lineNumber":531,"author":{"gitId":"github-classroom[bot]"},"content":"Package.StoreAssociation.xml"},{"lineNumber":532,"author":{"gitId":"github-classroom[bot]"},"content":"_pkginfo.txt"},{"lineNumber":533,"author":{"gitId":"github-classroom[bot]"},"content":"*.appx"},{"lineNumber":534,"author":{"gitId":"github-classroom[bot]"},"content":"*.appxbundle"},{"lineNumber":535,"author":{"gitId":"github-classroom[bot]"},"content":"*.appxupload"},{"lineNumber":536,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":537,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio cache files"},{"lineNumber":538,"author":{"gitId":"github-classroom[bot]"},"content":"# files ending in .cache can be ignored"},{"lineNumber":539,"author":{"gitId":"github-classroom[bot]"},"content":"*.[Cc]ache"},{"lineNumber":540,"author":{"gitId":"github-classroom[bot]"},"content":"# but keep track of directories ending in .cache"},{"lineNumber":541,"author":{"gitId":"github-classroom[bot]"},"content":"!?*.[Cc]ache/"},{"lineNumber":542,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":543,"author":{"gitId":"github-classroom[bot]"},"content":"# Others"},{"lineNumber":544,"author":{"gitId":"github-classroom[bot]"},"content":"ClientBin/"},{"lineNumber":545,"author":{"gitId":"github-classroom[bot]"},"content":"~$*"},{"lineNumber":546,"author":{"gitId":"github-classroom[bot]"},"content":"*.dbmdl"},{"lineNumber":547,"author":{"gitId":"github-classroom[bot]"},"content":"*.dbproj.schemaview"},{"lineNumber":548,"author":{"gitId":"github-classroom[bot]"},"content":"*.jfm"},{"lineNumber":549,"author":{"gitId":"github-classroom[bot]"},"content":"*.pfx"},{"lineNumber":550,"author":{"gitId":"github-classroom[bot]"},"content":"*.publishsettings"},{"lineNumber":551,"author":{"gitId":"github-classroom[bot]"},"content":"orleans.codegen.cs"},{"lineNumber":552,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":553,"author":{"gitId":"github-classroom[bot]"},"content":"# Including strong name files can present a security risk"},{"lineNumber":554,"author":{"gitId":"github-classroom[bot]"},"content":"# (https://github.com/github/gitignore/pull/2483#issue-259490424)"},{"lineNumber":555,"author":{"gitId":"github-classroom[bot]"},"content":"#*.snk"},{"lineNumber":556,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":557,"author":{"gitId":"github-classroom[bot]"},"content":"# Since there are multiple workflows, uncomment next line to ignore bower_components"},{"lineNumber":558,"author":{"gitId":"github-classroom[bot]"},"content":"# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)"},{"lineNumber":559,"author":{"gitId":"github-classroom[bot]"},"content":"#bower_components/"},{"lineNumber":560,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":561,"author":{"gitId":"github-classroom[bot]"},"content":"# RIA/Silverlight projects"},{"lineNumber":562,"author":{"gitId":"github-classroom[bot]"},"content":"Generated_Code/"},{"lineNumber":563,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":564,"author":{"gitId":"github-classroom[bot]"},"content":"# Backup \u0026 report files from converting an old project file"},{"lineNumber":565,"author":{"gitId":"github-classroom[bot]"},"content":"# to a newer Visual Studio version. Backup files are not needed,"},{"lineNumber":566,"author":{"gitId":"github-classroom[bot]"},"content":"# because we have git ;-)"},{"lineNumber":567,"author":{"gitId":"github-classroom[bot]"},"content":"_UpgradeReport_Files/"},{"lineNumber":568,"author":{"gitId":"github-classroom[bot]"},"content":"Backup*/"},{"lineNumber":569,"author":{"gitId":"github-classroom[bot]"},"content":"UpgradeLog*.XML"},{"lineNumber":570,"author":{"gitId":"github-classroom[bot]"},"content":"UpgradeLog*.htm"},{"lineNumber":571,"author":{"gitId":"github-classroom[bot]"},"content":"ServiceFabricBackup/"},{"lineNumber":572,"author":{"gitId":"github-classroom[bot]"},"content":"*.rptproj.bak"},{"lineNumber":573,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":574,"author":{"gitId":"github-classroom[bot]"},"content":"# SQL Server files"},{"lineNumber":575,"author":{"gitId":"github-classroom[bot]"},"content":"*.mdf"},{"lineNumber":576,"author":{"gitId":"github-classroom[bot]"},"content":"*.ldf"},{"lineNumber":577,"author":{"gitId":"github-classroom[bot]"},"content":"*.ndf"},{"lineNumber":578,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":579,"author":{"gitId":"github-classroom[bot]"},"content":"# Business Intelligence projects"},{"lineNumber":580,"author":{"gitId":"github-classroom[bot]"},"content":"*.rdl.data"},{"lineNumber":581,"author":{"gitId":"github-classroom[bot]"},"content":"*.bim.layout"},{"lineNumber":582,"author":{"gitId":"github-classroom[bot]"},"content":"*.bim_*.settings"},{"lineNumber":583,"author":{"gitId":"github-classroom[bot]"},"content":"*.rptproj.rsuser"},{"lineNumber":584,"author":{"gitId":"github-classroom[bot]"},"content":"*- [Bb]ackup.rdl"},{"lineNumber":585,"author":{"gitId":"github-classroom[bot]"},"content":"*- [Bb]ackup ([0-9]).rdl"},{"lineNumber":586,"author":{"gitId":"github-classroom[bot]"},"content":"*- [Bb]ackup ([0-9][0-9]).rdl"},{"lineNumber":587,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":588,"author":{"gitId":"github-classroom[bot]"},"content":"# Microsoft Fakes"},{"lineNumber":589,"author":{"gitId":"github-classroom[bot]"},"content":"FakesAssemblies/"},{"lineNumber":590,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":591,"author":{"gitId":"github-classroom[bot]"},"content":"# GhostDoc plugin setting file"},{"lineNumber":592,"author":{"gitId":"github-classroom[bot]"},"content":"*.GhostDoc.xml"},{"lineNumber":593,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":594,"author":{"gitId":"github-classroom[bot]"},"content":"# Node.js Tools for Visual Studio"},{"lineNumber":595,"author":{"gitId":"github-classroom[bot]"},"content":".ntvs_analysis.dat"},{"lineNumber":596,"author":{"gitId":"github-classroom[bot]"},"content":"node_modules/"},{"lineNumber":597,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":598,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio 6 build log"},{"lineNumber":599,"author":{"gitId":"github-classroom[bot]"},"content":"*.plg"},{"lineNumber":600,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":601,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio 6 workspace options file"},{"lineNumber":602,"author":{"gitId":"github-classroom[bot]"},"content":"*.opt"},{"lineNumber":603,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":604,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)"},{"lineNumber":605,"author":{"gitId":"github-classroom[bot]"},"content":"*.vbw"},{"lineNumber":606,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":607,"author":{"gitId":"github-classroom[bot]"},"content":"# Visual Studio LightSwitch build output"},{"lineNumber":608,"author":{"gitId":"github-classroom[bot]"},"content":"**/*.HTMLClient/GeneratedArtifacts"},{"lineNumber":609,"author":{"gitId":"github-classroom[bot]"},"content":"**/*.DesktopClient/GeneratedArtifacts"},{"lineNumber":610,"author":{"gitId":"github-classroom[bot]"},"content":"**/*.DesktopClient/ModelManifest.xml"},{"lineNumber":611,"author":{"gitId":"github-classroom[bot]"},"content":"**/*.Server/GeneratedArtifacts"},{"lineNumber":612,"author":{"gitId":"github-classroom[bot]"},"content":"**/*.Server/ModelManifest.xml"},{"lineNumber":613,"author":{"gitId":"github-classroom[bot]"},"content":"_Pvt_Extensions"},{"lineNumber":614,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":615,"author":{"gitId":"github-classroom[bot]"},"content":"# Paket dependency manager"},{"lineNumber":616,"author":{"gitId":"github-classroom[bot]"},"content":".paket/paket.exe"},{"lineNumber":617,"author":{"gitId":"github-classroom[bot]"},"content":"paket-files/"},{"lineNumber":618,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":619,"author":{"gitId":"github-classroom[bot]"},"content":"# FAKE - F# Make"},{"lineNumber":620,"author":{"gitId":"github-classroom[bot]"},"content":".fake/"},{"lineNumber":621,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":622,"author":{"gitId":"github-classroom[bot]"},"content":"# CodeRush personal settings"},{"lineNumber":623,"author":{"gitId":"github-classroom[bot]"},"content":".cr/personal"},{"lineNumber":624,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":625,"author":{"gitId":"github-classroom[bot]"},"content":"# Python Tools for Visual Studio (PTVS)"},{"lineNumber":626,"author":{"gitId":"github-classroom[bot]"},"content":"__pycache__/"},{"lineNumber":627,"author":{"gitId":"github-classroom[bot]"},"content":"*.pyc"},{"lineNumber":628,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":629,"author":{"gitId":"github-classroom[bot]"},"content":"# Cake - Uncomment if you are using it"},{"lineNumber":630,"author":{"gitId":"github-classroom[bot]"},"content":"# tools/**"},{"lineNumber":631,"author":{"gitId":"github-classroom[bot]"},"content":"# !tools/packages.config"},{"lineNumber":632,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":633,"author":{"gitId":"github-classroom[bot]"},"content":"# Tabs Studio"},{"lineNumber":634,"author":{"gitId":"github-classroom[bot]"},"content":"*.tss"},{"lineNumber":635,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":636,"author":{"gitId":"github-classroom[bot]"},"content":"# Telerik\u0027s JustMock configuration file"},{"lineNumber":637,"author":{"gitId":"github-classroom[bot]"},"content":"*.jmconfig"},{"lineNumber":638,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":639,"author":{"gitId":"github-classroom[bot]"},"content":"# BizTalk build output"},{"lineNumber":640,"author":{"gitId":"github-classroom[bot]"},"content":"*.btp.cs"},{"lineNumber":641,"author":{"gitId":"github-classroom[bot]"},"content":"*.btm.cs"},{"lineNumber":642,"author":{"gitId":"github-classroom[bot]"},"content":"*.odx.cs"},{"lineNumber":643,"author":{"gitId":"github-classroom[bot]"},"content":"*.xsd.cs"},{"lineNumber":644,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":645,"author":{"gitId":"github-classroom[bot]"},"content":"# OpenCover UI analysis results"},{"lineNumber":646,"author":{"gitId":"github-classroom[bot]"},"content":"OpenCover/"},{"lineNumber":647,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":648,"author":{"gitId":"github-classroom[bot]"},"content":"# Azure Stream Analytics local run output"},{"lineNumber":649,"author":{"gitId":"github-classroom[bot]"},"content":"ASALocalRun/"},{"lineNumber":650,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":651,"author":{"gitId":"github-classroom[bot]"},"content":"# MSBuild Binary and Structured Log"},{"lineNumber":652,"author":{"gitId":"github-classroom[bot]"},"content":"*.binlog"},{"lineNumber":653,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":654,"author":{"gitId":"github-classroom[bot]"},"content":"# NVidia Nsight GPU debugger configuration file"},{"lineNumber":655,"author":{"gitId":"github-classroom[bot]"},"content":"*.nvuser"},{"lineNumber":656,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":657,"author":{"gitId":"github-classroom[bot]"},"content":"# MFractors (Xamarin productivity tool) working folder"},{"lineNumber":658,"author":{"gitId":"github-classroom[bot]"},"content":".mfractor/"},{"lineNumber":659,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":660,"author":{"gitId":"github-classroom[bot]"},"content":"# Local History for Visual Studio"},{"lineNumber":661,"author":{"gitId":"github-classroom[bot]"},"content":".localhistory/"},{"lineNumber":662,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":663,"author":{"gitId":"github-classroom[bot]"},"content":"# BeatPulse healthcheck temp database"},{"lineNumber":664,"author":{"gitId":"github-classroom[bot]"},"content":"healthchecksdb"},{"lineNumber":665,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":666,"author":{"gitId":"github-classroom[bot]"},"content":"# Backup folder for Package Reference Convert tool in Visual Studio 2017"},{"lineNumber":667,"author":{"gitId":"github-classroom[bot]"},"content":"MigrationBackup/"},{"lineNumber":668,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":669,"author":{"gitId":"github-classroom[bot]"},"content":"# Ionide (cross platform F# VS Code tools) working folder"},{"lineNumber":670,"author":{"gitId":"github-classroom[bot]"},"content":".ionide/"},{"lineNumber":671,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":672,"author":{"gitId":"github-classroom[bot]"},"content":"# Fody - auto-generated XML schema"},{"lineNumber":673,"author":{"gitId":"github-classroom[bot]"},"content":"FodyWeavers.xsd"},{"lineNumber":674,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":675,"author":{"gitId":"github-classroom[bot]"},"content":"# VS Code files for those working on multiple tools"},{"lineNumber":676,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":677,"author":{"gitId":"github-classroom[bot]"},"content":"# Local History for Visual Studio Code"},{"lineNumber":678,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":679,"author":{"gitId":"github-classroom[bot]"},"content":"# Windows Installer files from build outputs"},{"lineNumber":680,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":681,"author":{"gitId":"github-classroom[bot]"},"content":"# JetBrains Rider"},{"lineNumber":682,"author":{"gitId":"github-classroom[bot]"},"content":".idea/"},{"lineNumber":683,"author":{"gitId":"github-classroom[bot]"},"content":"*.sln.iml"},{"lineNumber":684,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":685,"author":{"gitId":"github-classroom[bot]"},"content":"### VisualStudio Patch ###"},{"lineNumber":686,"author":{"gitId":"github-classroom[bot]"},"content":"# Additional files built by Visual Studio"},{"lineNumber":687,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":688,"author":{"gitId":"github-classroom[bot]"},"content":"# End of https://www.toptal.com/developers/gitignore/api/qt,qtcreator,linux,windows,macos,visualstudio,visualstudiocode,clion,c++"}],"authorContributionMap":{"github-classroom[bot]":688}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/XTHBxU7a)"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"# Team 19"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"## Target Environment"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"Item | Version"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"-|-"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"OS | Window, MacOS"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"Toolchain | Visual Studio, CMake, CLion"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"C++ Standard | C++17"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"### Additional Build Instructions"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"To be updated"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"# Team Members"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"Name | Email | Development OS/Toolchain"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"-:|:-|-|"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"Hoang Manh Duc | hmanhduc2k@gmail.com | Windows, Microsoft Visual Studio 2022, CMake 3.27.2-msvc1"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"Phua Guan Wei | phuaguanwei99@gmail.com | Windows, Microsoft Visual Studio 2022, CMake 3.27.2-msvc1"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"Tan Jian Wei | tanjwkeith@gmail.com | MacOS Clion 2023.3.2 CMake 3.27.8"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"Zheng Yong Shen Winson | zheng.yongshen.winson@gmail.com | MacOS, CLion 2023.2.1, CMake 3.26.4"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"Shurvir Singh Arora | shurvirarora@gmail.com | MacOS, CLion 2023.3.2, CMake 3.27.8"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"Bahatheq Tariq Ahmed S | tariqbahatheq@outlook.com | Windows, Microsoft Visual Studio 2022, CMake 3.27.2-msvc1"}],"authorContributionMap":{"github-classroom[bot]":15,"hmanhduc2k":10}},{"path":"Team19/Code19/.gitignore","fileType":"gitignore","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"# Ignore build folder"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"build/"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":".claudiaideconfig"}],"authorContributionMap":{"github-classroom[bot]":2,"hmanhduc2k":1}},{"path":"Team19/Code19/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"cmake_minimum_required (VERSION 3.20.2)"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"project (SPA)"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_VERBOSE_MAKEFILE on)"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/cmake\")"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"message (STATUS \"${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR}\")"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"if(\"${PROJECT_SOURCE_DIR}\" STREQUAL \"${PROJECT_BINARY_DIR}\")"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"    message(FATAL_ERROR \"In-source builds are forbidden.\")"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"endif()"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"if(NOT CMAKE_BUILD_TYPE)"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"    set(CMAKE_BUILD_TYPE Release)"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"endif()"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"if(NOT MSVC)"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"  set(CMAKE_CXX_FLAGS_DEBUG \"-g\")"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"  set(CMAKE_CXX_FLAGS_RELEASE \"-O3\")"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"endif()"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_CXX_STANDARD 17)"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_CXX_STANDARD_REQUIRED on)"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"set(AUTOTESTER_ROOT \"${CMAKE_CURRENT_LIST_DIR}/lib/autotester/${CMAKE_SYSTEM_PROCESSOR}/${CMAKE_SYSTEM_NAME}/${CMAKE_BUILD_TYPE}\")"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"list(APPEND CMAKE_PREFIX_PATH \"${AUTOTESTER_ROOT}\")"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"find_package(autotester REQUIRED)"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"include_directories(\"${CMAKE_CURRENT_LIST_DIR}/lib\")#include catch.hpp"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"add_subdirectory(src/spa)"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"add_subdirectory(src/autotester)"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"#add_subdirectory(src/autotester_gui)"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"add_subdirectory(src/unit_testing)"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"add_subdirectory(src/integration_testing)"}],"authorContributionMap":{"github-classroom[bot]":34}},{"path":"Team19/Code19/CMakeSettings.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"﻿{"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"  \"configurations\": ["},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"      \"name\": \"x64-Debug\","},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"      \"generator\": \"Ninja\","},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"      \"configurationType\": \"Debug\","},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\","},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\","},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"      \"cmakeCommandArgs\": \"\","},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"      \"buildCommandArgs\": \"\","},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"      \"ctestCommandArgs\": \"\""},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"    },"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"    {"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"      \"name\": \"x64-Release\","},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"      \"generator\": \"Ninja\","},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"      \"configurationType\": \"RelWithDebInfo\","},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\","},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\","},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"      \"cmakeCommandArgs\": \"\","},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"      \"buildCommandArgs\": \"\","},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"      \"ctestCommandArgs\": \"\","},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"      \"variables\": ["},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"        {"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"          \"name\": \"CMAKE_BUILD_TYPE\","},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"          \"value\": \"Release\","},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"          \"type\": \"STRING\""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"      ]"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"  ]"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"github-classroom[bot]":33}},{"path":"Team19/Code19/cmake/Findautotester.cmake","fileType":"cmake","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"# - Try to find Autotester library"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"# The following variables are optionally searched for defaults"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#  AUTOTESTER_ROOT_DIR:            Base directory where all autotester components are found"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"# The following are set after configuration is done:"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"#  AUTOTESTER_FOUND"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"#  AUTOTESTER_INCLUDE_DIRS"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"#  AUTOTESTER_LIBRARIES"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"#  AUTOTESTER_LIBRARYRARY_DIRS"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"include(FindPackageHandleStandardArgs)"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"#find_path(AUTOTESTER_INCLUDE_DIR autotester.h"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"#    PATHS ${AUTOTESTER_LIBRARYDIR}/include)"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"find_library(AUTOTESTER_LIBRARY_DEBUG autotester "},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"    PATHS ${AUTOTESTER_ROOT}/debug"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"    PATH_SUFFIXES"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"        lib"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"        lib64)"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"find_library(AUTOTESTER_LIBRARY_RELEASE autotester "},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"    PATHS ${AUTOTESTER_ROOT}/release"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"    PATH_SUFFIXES"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"        lib"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"        lib64)"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"SET(AUTOTESTER_LIBRARY"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    debug ${AUTOTESTER_LIBRARY_DEBUG}"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"        optimized ${AUTOTESTER_LIBRARY_RELEASE}"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"          )"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"find_package_handle_standard_args(autotester DEFAULT_MSG"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"    # AUTOTESTER_INCLUDE_DIR"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"    AUTOTESTER_LIBRARY)"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"if(AUTOTESTER_FOUND)"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"    #set(AUTOTESTER_INCLUDE_DIRS ${AUTOTESTER_INCLUDE_DIR})"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"    set(AUTOTESTER_LIBRARIES ${AUTOTESTER_LIBRARY})"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"endif()"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":""}],"authorContributionMap":{"github-classroom[bot]":42}},{"path":"Team19/Code19/lib/catch.hpp","fileType":"hpp","isIgnored":true,"lines":[],"authorContributionMap":{"github-classroom[bot]":17966}},{"path":"Team19/Code19/lib/tests/Sample_queries.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"1 - comment"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"while w;"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"Select w such that Parent(w, 7)"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"none"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"2 - comment"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"if ifs;"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"Select ifs such that Follows(5, ifs)"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"6"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"3 - comment"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"Select a such that Parent*(4, a)"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"5, 7, 8, 9, 11"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"4 - comment"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"call c;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"Select c such that Follows*(1, c)"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"12"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"5 - comment"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"stmt s;"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"Select s such that Modifies(s, \"i\")"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"3, 4, 11, 12, 13, 14, 17"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"6 - comment"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"variable v;"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"Select v such that Uses(\"p\", v)"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"i, x, y, z"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"7 - comment"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"procedure p;"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"Select p such that Calls(p, \"q\")"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"Example, p"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"8 - comment"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"procedure p;"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"Select p such that Calls*(\"Example\", p)"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"p, q"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"9 - comment"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"prog_line n;"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"Select n such that Next(4, n)"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"5, 12"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"10 - comment"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"prog_line n;"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"Select n such that Next*(n, 4)"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"11 - comment"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"Select a such that Affects(a, 9)"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"2, 3, 5, 7, 11"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"12 - comment"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"Select a such that Affects*(11, a)"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"9, 11"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"13 - comment"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"Select a pattern a(\"z\", _\"x+i\")"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"none"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"14 - comment"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"Select a pattern a(_, _\"x + 1\"_)"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"7, 18, 23"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"15 - comment"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"assign a;"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"Select a pattern a(_, \" 3  +  2 \")"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"none"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"16 - comment"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"while w; variable v;"},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"Select w such that Modifies(w, v) with v.varName \u003d \"x\""},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"4, 14"},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":"17 - comment"},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":"if ifs; variable v;"},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"Select v such that Uses(ifs, v) with ifs.stmt# \u003d 22"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"x, z"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"18 - comment"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"procedure p, q;"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"Select BOOLEAN such that Calls(p, q) with q.procName \u003d \"p\" and p.procName \u003d \"Example\""},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":"TRUE"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":"19 - comment"},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"if ifs; assign a1, a2; variable v1, v2;"},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":"Select ifs such that Follows*(a1, ifs) and Follows*(ifs, a2) and Modifies(ifs, v1) and Uses(ifs, v2) with v1.varName \u003d v2.varName"},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"6"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":"20 - comment"},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"prog_line n; stmt s;"},{"lineNumber":98,"author":{"gitId":"hmanhduc2k"},"content":"Select s such that Next*(16, n) and Parent*(s, n)"},{"lineNumber":99,"author":{"gitId":"hmanhduc2k"},"content":"13, 14"},{"lineNumber":100,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":101,"author":{"gitId":"hmanhduc2k"},"content":"21 - comment"},{"lineNumber":102,"author":{"gitId":"hmanhduc2k"},"content":"prog_line n; assign a;"},{"lineNumber":103,"author":{"gitId":"hmanhduc2k"},"content":"Select a such that Affects*(a, n) and Next*(13, n)"},{"lineNumber":104,"author":{"gitId":"hmanhduc2k"},"content":"17, 18, 19, 20"},{"lineNumber":105,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":106,"author":{"gitId":"hmanhduc2k"},"content":"22 - comment"},{"lineNumber":107,"author":{"gitId":"hmanhduc2k"},"content":"procedure p, q; variable v;"},{"lineNumber":108,"author":{"gitId":"hmanhduc2k"},"content":"Select \u003cp, q, v\u003e such that Modifies(p, v) and Calls(p, q)"},{"lineNumber":109,"author":{"gitId":"hmanhduc2k"},"content":"Example p i, Example p x, Example p y, Example p z, Example q i, Example q x, Example q y, Example q z, p q i, p q x, p q z"},{"lineNumber":110,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":111,"author":{"gitId":"hmanhduc2k"},"content":"23 - comment"},{"lineNumber":112,"author":{"gitId":"hmanhduc2k"},"content":"call c; assign a1, a2;"},{"lineNumber":113,"author":{"gitId":"hmanhduc2k"},"content":"Select BOOLEAN such that Follows*(_, c) and Affects(a1, a2) and Uses(a2, _)"},{"lineNumber":114,"author":{"gitId":"hmanhduc2k"},"content":"TRUE"},{"lineNumber":115,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":116,"author":{"gitId":"hmanhduc2k"},"content":"24 - comment"},{"lineNumber":117,"author":{"gitId":"hmanhduc2k"},"content":"assign a1, a2; variable v;"},{"lineNumber":118,"author":{"gitId":"hmanhduc2k"},"content":"Select v pattern a1(v, _) such that Affects*(a1, a2) and Uses(a2, v)"},{"lineNumber":119,"author":{"gitId":"hmanhduc2k"},"content":"i, x, z"},{"lineNumber":120,"author":{"gitId":"hmanhduc2k"},"content":"5000"},{"lineNumber":121,"author":{"gitId":"hmanhduc2k"},"content":"25 - comment"},{"lineNumber":122,"author":{"gitId":"hmanhduc2k"},"content":"prog_line n1, n2; variable v; call c;"},{"lineNumber":123,"author":{"gitId":"hmanhduc2k"},"content":"Select c such that Next*(n1, n2) and Modifies(n1, v) and Uses(n2, v) and Modifies(c, v)"},{"lineNumber":124,"author":{"gitId":"hmanhduc2k"},"content":"10, 12, 16"},{"lineNumber":125,"author":{"gitId":"hmanhduc2k"},"content":"5000"}],"authorContributionMap":{"hmanhduc2k":125}},{"path":"Team19/Code19/lib/tests/Sample_source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure Example {"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"  x \u003d 2;"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"  z \u003d 3;"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"  i \u003d 5;"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"  while (i!\u003d0) {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"    x \u003d x - 1;"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"    if (x\u003d\u003d1) then {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"      z \u003d x + 1; }"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"    else {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"      y \u003d z + x; }"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d z + x + i;"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    call q;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    i \u003d i - 1; }"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"  call p; }"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"procedure p {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"  if (x\u003c0) then {"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    while (i\u003e0) {"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"      x \u003d z * 3 + 2 * y;"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"      call q;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"      i \u003d i - 1; }"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    x \u003d x + 1;"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d x + z; }"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"  else {"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d 1; }"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"  z \u003d z + x + i; }"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"procedure q {"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"  if (x\u003d\u003d1) then {"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d x + 1; }"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"  else {"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    x \u003d z + x; } }"}],"authorContributionMap":{"hmanhduc2k":32}},{"path":"Team19/Code19/lib/tests/out.xml","fileType":"xml","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"\u003c?xml-stylesheet type\u003d\"text/xsl\" href\u003d\"analysis.xsl\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctest_results\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"\u003cinfo\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\u003cname\u003eAutoTester\u003c/name\u003e\u003cparsing_time_taken\u003e0.000000\u003c/parsing_time_taken\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/info\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\u003cqueries\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Parent\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e1\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[while w; Select w such that Parent(w, 7)]]\u003e\u003c/querystr\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\u003cpassed/\u003e"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Follows\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e2\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; Select ifs such that Follows(5, ifs)]]\u003e\u003c/querystr\u003e"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e6\u003c/correct\u003e"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e6\u003c/missing\u003e"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Parentstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e3\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Parent*(4, a)]]\u003e\u003c/querystr\u003e"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e5,7,8,9,11\u003c/correct\u003e"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e19.000000\u003c/time_taken\u003e"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11,5,7,8,9\u003c/missing\u003e"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e5\u003c/expected\u003e"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e5\u003c/missing\u003e"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Followsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e4\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[call c; Select c such that Follows*(1, c)]]\u003e\u003c/querystr\u003e"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e12\u003c/correct\u003e"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e22.000000\u003c/time_taken\u003e"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e12\u003c/missing\u003e"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e5\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[stmt s; Select s such that Modifies(s, \"i\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e3,4,11,12,13,14,17\u003c/correct\u003e"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e24.000000\u003c/time_taken\u003e"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11,12,13,14,17,3,4\u003c/missing\u003e"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e7\u003c/expected\u003e"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e7\u003c/missing\u003e"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e6\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[variable v; Select v such that Uses(\"p\", v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003ei,x,y,z\u003c/correct\u003e"},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e19.000000\u003c/time_taken\u003e"},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003ei,x,y,z\u003c/missing\u003e"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e4\u003c/expected\u003e"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e4\u003c/missing\u003e"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Calls\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e7\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p; Select p such that Calls(p, \"q\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003eExample,p\u003c/correct\u003e"},{"lineNumber":98,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":99,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":100,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003eExample,p\u003c/missing\u003e"},{"lineNumber":101,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":102,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":103,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":104,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":105,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":106,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":107,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":108,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":109,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":110,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":111,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Callsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e8\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p; Select p such that Calls*(\"Example\", p)]]\u003e\u003c/querystr\u003e"},{"lineNumber":112,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":113,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003ep,q\u003c/correct\u003e"},{"lineNumber":114,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e22.000000\u003c/time_taken\u003e"},{"lineNumber":115,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":116,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003ep,q\u003c/missing\u003e"},{"lineNumber":117,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":118,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":119,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":120,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":121,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":122,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":123,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":124,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":125,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":126,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":127,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Next\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e9\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; Select n such that Next(4, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":128,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":129,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e5,12\u003c/correct\u003e"},{"lineNumber":130,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":131,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":132,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e12,5\u003c/missing\u003e"},{"lineNumber":133,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":134,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":135,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":136,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":137,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":138,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":139,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":140,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":141,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":142,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":143,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e10\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; Select n such that Next*(n, 4)]]\u003e\u003c/querystr\u003e"},{"lineNumber":144,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":145,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e1,2,3,4,5,6,7,8,9,10,11\u003c/correct\u003e"},{"lineNumber":146,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e19.000000\u003c/time_taken\u003e"},{"lineNumber":147,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":148,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1,10,11,2,3,4,5,6,7,8,9\u003c/missing\u003e"},{"lineNumber":149,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":150,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":151,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e11\u003c/expected\u003e"},{"lineNumber":152,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":153,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11\u003c/missing\u003e"},{"lineNumber":154,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":155,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":156,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":157,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":158,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":159,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Affects\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e11\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Affects(a, 9)]]\u003e\u003c/querystr\u003e"},{"lineNumber":160,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":161,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e2,3,5,7,11\u003c/correct\u003e"},{"lineNumber":162,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e25.000000\u003c/time_taken\u003e"},{"lineNumber":163,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":164,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11,2,3,5,7\u003c/missing\u003e"},{"lineNumber":165,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":166,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":167,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e5\u003c/expected\u003e"},{"lineNumber":168,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":169,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e5\u003c/missing\u003e"},{"lineNumber":170,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":171,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":172,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":173,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":174,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":175,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e12\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Affects*(11, a)]]\u003e\u003c/querystr\u003e"},{"lineNumber":176,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":177,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e9,11\u003c/correct\u003e"},{"lineNumber":178,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e19.000000\u003c/time_taken\u003e"},{"lineNumber":179,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":180,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11,9\u003c/missing\u003e"},{"lineNumber":181,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":182,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":183,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":184,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":185,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":186,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":187,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":188,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":189,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":190,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":191,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"1\" Pattern\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e13\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(\"z\", _\"x+i\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":192,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":193,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":194,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e28.000000\u003c/time_taken\u003e"},{"lineNumber":195,"author":{"gitId":"hmanhduc2k"},"content":"\u003cpassed/\u003e"},{"lineNumber":196,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":197,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":198,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"3\" Pattern\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e14\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(_, _\"x + 1\"_)]]\u003e\u003c/querystr\u003e"},{"lineNumber":199,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":200,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e7,18,23\u003c/correct\u003e"},{"lineNumber":201,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e23.000000\u003c/time_taken\u003e"},{"lineNumber":202,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":203,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e18,23,7\u003c/missing\u003e"},{"lineNumber":204,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":205,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":206,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":207,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":208,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":209,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":210,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":211,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":212,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":213,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":214,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"1\" Pattern\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e15\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(_, \" 3  +  2 \")]]\u003e\u003c/querystr\u003e"},{"lineNumber":215,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":216,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":217,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e25.000000\u003c/time_taken\u003e"},{"lineNumber":218,"author":{"gitId":"hmanhduc2k"},"content":"\u003cpassed/\u003e"},{"lineNumber":219,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":220,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":221,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e16\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[while w; variable v; Select w such that Modifies(w, v) with v.varName \u003d \"x\"]]\u003e\u003c/querystr\u003e"},{"lineNumber":222,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":223,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e4,14\u003c/correct\u003e"},{"lineNumber":224,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":225,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":226,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e14,4\u003c/missing\u003e"},{"lineNumber":227,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":228,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":229,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":230,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":231,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":232,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":233,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":234,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":235,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":236,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":237,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e17\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; variable v; Select v such that Uses(ifs, v) with ifs.stmt# \u003d 22]]\u003e\u003c/querystr\u003e"},{"lineNumber":238,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":239,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003ex,z\u003c/correct\u003e"},{"lineNumber":240,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":241,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":242,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003ex,z\u003c/missing\u003e"},{"lineNumber":243,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":244,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":245,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":246,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":247,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":248,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":249,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":250,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":251,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":252,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":253,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnBoolean\u003d\"1\" Calls\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e18\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p, q; Select BOOLEAN such that Calls(p, q) with q.procName \u003d \"p\" and p.procName \u003d \"Example\"]]\u003e\u003c/querystr\u003e"},{"lineNumber":254,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":255,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003etrue\u003c/correct\u003e"},{"lineNumber":256,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":257,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":258,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003etrue\u003c/missing\u003e"},{"lineNumber":259,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":260,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":261,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":262,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":263,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":264,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":265,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":266,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":267,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":268,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":269,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Followsstar\u003d\"2\" Modifies\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"4\" comment\u003d\"comment\"\u003e19\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; assign a1, a2; variable v1, v2; Select ifs such that Follows*(a1, ifs) and Follows*(ifs, a2) and Modifies(ifs, v1) and Uses(ifs, v2) with v1.varName \u003d v2.varName]]\u003e\u003c/querystr\u003e"},{"lineNumber":270,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":271,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e6\u003c/correct\u003e"},{"lineNumber":272,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":273,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":274,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e6\u003c/missing\u003e"},{"lineNumber":275,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":276,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":277,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":278,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":279,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":280,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":281,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":282,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":283,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":284,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":285,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Nextstar\u003d\"1\" Parentstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e20\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; stmt s; Select s such that Next*(16, n) and Parent*(s, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":286,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":287,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e13,14\u003c/correct\u003e"},{"lineNumber":288,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":289,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":290,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e13,14\u003c/missing\u003e"},{"lineNumber":291,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":292,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":293,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":294,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":295,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":296,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":297,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":298,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":299,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":300,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":301,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e21\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; assign a; Select a such that Affects*(a, n) and Next*(13, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":302,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":303,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e17,18,19,20\u003c/correct\u003e"},{"lineNumber":304,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":305,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":306,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e17,18,19,20\u003c/missing\u003e"},{"lineNumber":307,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":308,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":309,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e4\u003c/expected\u003e"},{"lineNumber":310,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":311,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e4\u003c/missing\u003e"},{"lineNumber":312,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":313,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":314,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":315,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":316,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":317,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Calls\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e22\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p, q; variable v; Select \u003cp, q, v\u003e such that Modifies(p, v) and Calls(p, q)]]\u003e\u003c/querystr\u003e"},{"lineNumber":318,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":319,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003eExample p i,Example p x,Example p y,Example p z,Example q i,Example q x,Example q y,Example q z,p q i,p q x,p q z\u003c/correct\u003e"},{"lineNumber":320,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":321,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":322,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003eExample p i,Example p x,Example p y,Example p z,Example q i,Example q x,Example q y,Example q z,p q i,p q x,p q z\u003c/missing\u003e"},{"lineNumber":323,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":324,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":325,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e11\u003c/expected\u003e"},{"lineNumber":326,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":327,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e11\u003c/missing\u003e"},{"lineNumber":328,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":329,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":330,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":331,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":332,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":333,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid Affects\u003d\"1\" ReturnBoolean\u003d\"1\" Followsstar\u003d\"1\" UnnamedVar\u003d\"2\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"3\" comment\u003d\"comment\"\u003e23\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[call c; assign a1, a2; Select BOOLEAN such that Follows*(_, c) and Affects(a1, a2) and Uses(a2, _)]]\u003e\u003c/querystr\u003e"},{"lineNumber":334,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":335,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003etrue\u003c/correct\u003e"},{"lineNumber":336,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e21.000000\u003c/time_taken\u003e"},{"lineNumber":337,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":338,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003etrue\u003c/missing\u003e"},{"lineNumber":339,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":340,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":341,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":342,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":343,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":344,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":345,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":346,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":347,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":348,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":349,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" UnnamedVar\u003d\"1\" Uses\u003d\"1\" Pattern\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"6\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e24\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a1, a2; variable v; Select v pattern a1(v, _) such that Affects*(a1, a2) and Uses(a2, v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":350,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":351,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003ei,x,z\u003c/correct\u003e"},{"lineNumber":352,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e22.000000\u003c/time_taken\u003e"},{"lineNumber":353,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":354,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003ei,x,z\u003c/missing\u003e"},{"lineNumber":355,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":356,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":357,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":358,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":359,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":360,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":361,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":362,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":363,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":364,"author":{"gitId":"hmanhduc2k"},"content":"\u003cquery\u003e"},{"lineNumber":365,"author":{"gitId":"hmanhduc2k"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"2\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"4\" comment\u003d\"comment\"\u003e25\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n1, n2; variable v; call c; Select c such that Next*(n1, n2) and Modifies(n1, v) and Uses(n2, v) and Modifies(c, v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":366,"author":{"gitId":"hmanhduc2k"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":367,"author":{"gitId":"hmanhduc2k"},"content":"\u003ccorrect\u003e10,12,16\u003c/correct\u003e"},{"lineNumber":368,"author":{"gitId":"hmanhduc2k"},"content":"\u003ctime_taken\u003e20.000000\u003c/time_taken\u003e"},{"lineNumber":369,"author":{"gitId":"hmanhduc2k"},"content":"\u003cfailed\u003e"},{"lineNumber":370,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e10,12,16\u003c/missing\u003e"},{"lineNumber":371,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":372,"author":{"gitId":"hmanhduc2k"},"content":"\u003csummary\u003e"},{"lineNumber":373,"author":{"gitId":"hmanhduc2k"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":374,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":375,"author":{"gitId":"hmanhduc2k"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":376,"author":{"gitId":"hmanhduc2k"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":377,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/summary\u003e"},{"lineNumber":378,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/failed\u003e"},{"lineNumber":379,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/query\u003e"},{"lineNumber":380,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/queries\u003e"},{"lineNumber":381,"author":{"gitId":"hmanhduc2k"},"content":"\u003c/test_results\u003e"}],"authorContributionMap":{"hmanhduc2k":381}},{"path":"Team19/Code19/lib/tests/prototype_sample_SIMPLE_source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure ABC"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"{"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"  i\u003d1;\t\\\\1"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":" read b ;\t\\\\2"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\tc\u003d a   ;\\\\3"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"if (a \u003c  beta) then{\t\\\\4"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"   while beta {\t\\\\5"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"        oSCar  \u003d 1 * beta + tmp;\t\\\\6"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"        while tmp {\t\\\\7"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"          oSCar \u003d I - (k + j1k * chArlie); }}\t\\\\8"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\twhile (x!\u003d1) {\t\\\\9"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"        x \u003d x + 1;\t\\\\10"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"        if (left\u003d\u003d0) then {\t\\\\11"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"          while (right\u003d\u003d 5){\t\\\\12"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"            print Romeo;\t\\\\13"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"            b \u003d 0;\t\\\\14"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"            c \u003d delta    + l  * width + Romeo; }}\t\\\\15"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"        else {\t"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"            while (c\u003e1) {\t\\\\16"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"              c \u003d c -1;} \t\\\\17"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"            x \u003d x+ 1; }}}\t\\\\18"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"else{\t"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\ta\u003d 2;}\t\\\\19"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":24}},{"path":"Team19/Code19/src/autotester/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB srcs \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp\")"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"add_executable(autotester ${srcs})"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"target_link_libraries(autotester spa ${AUTOTESTER_LIBRARIES})"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"if (NOT WIN32)"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"    target_link_libraries(autotester pthread)"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"endif()"}],"authorContributionMap":{"github-classroom[bot]":8}},{"path":"Team19/Code19/src/autotester/src/AbstractWrapper.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#ifndef ABSTRACTWRAPPER_H"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#define ABSTRACTWRAPPER_H"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003ciostream\u003e"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003clist\u003e"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"class AbstractWrapper {"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"  static volatile bool GlobalStop;"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"  // method for parsing the SIMPLE source"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"  virtual void parse(std::string filename) \u003d 0;"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"  // method for evaluating a query"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"  virtual void evaluate(std::string query, std::list\u003cstd::string\u003e\u0026 results) \u003d0;"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"class WrapperFactory {"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"  // static method for creating a wrapper"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"  static AbstractWrapper* createWrapper();"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"private:"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"  // the following three will prevent the creation of WrapperFactory objects"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"  WrapperFactory();"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"  WrapperFactory(const WrapperFactory\u0026);"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"  WrapperFactory\u0026 operator\u003d(const WrapperFactory\u0026);"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"  // the Wrapper object"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"  static AbstractWrapper* wrapper;"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"#endif"}],"authorContributionMap":{"github-classroom[bot]":31}},{"path":"Team19/Code19/src/autotester/src/TestWrapper.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"TestWrapper.h\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"using namespace std;"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"// implementation code of WrapperFactory - do NOT modify the next 5 lines"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"AbstractWrapper* WrapperFactory::wrapper \u003d 0;"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"AbstractWrapper* WrapperFactory::createWrapper() {"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"    if (wrapper \u003d\u003d 0) wrapper \u003d new TestWrapper;"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"    return wrapper;"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"// Do not modify the following line"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"volatile bool AbstractWrapper::GlobalStop \u003d false;"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"// a default constructor"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"TestWrapper::TestWrapper() {"},{"lineNumber":13,"author":{"gitId":"TariqBahatheq"},"content":""},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"\t// create any objects here as instance variables of this class"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"\t// as well as any initialization required for your spa program"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"\tpkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"\tpkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"\tpkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":19,"author":{"gitId":"TariqBahatheq"},"content":""},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"    pkbWriterManager-\u003egetFollowsWriter();"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"// method for parsing the SIMPLE source"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"void TestWrapper::parse(std::string filename) {"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"    // call your parser to do the parsing"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"\t// call your parser to do the parsing"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"  // ...rest of your code..."},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\tSourceProcessor sp \u003d SourceProcessor(filename, this-\u003epkbManager);"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\tsp.parseSIMPLE();"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\tsp.extractAndPopulate();"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"// method to evaluating a query"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"void TestWrapper::evaluate(std::string query, std::list\u003cstd::string\u003e\u0026 results) {"},{"lineNumber":40,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"\t// call your evaluator to evaluate the query here"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"    // ...code to evaluate query..."},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":"\tTokenizer tokenizer(query);"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"\tvector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"\tQueryParser parser(tokens);"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"\tauto parsingResult \u003d parser.parse();"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"\tQueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"\tstd::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":49,"author":{"gitId":"winson8222"},"content":"\tfor (auto \u0026 re : res) {"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"\t\tresults.push_back(re);"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"\t}"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"\t// store the answers to the query in the results list (it is initially empty)"},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":"\t// each result must be a string."},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"winson8222":11,"TariqBahatheq":2,"github-classroom[bot]":28,"hmanhduc2k":3,"MSI\\vegit":7,"jianoway":4}},{"path":"Team19/Code19/src/autotester/src/TestWrapper.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#ifndef TESTWRAPPER_H"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#define TESTWRAPPER_H"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003clist\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cmemory\u003e"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"// include your other headers here"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"AbstractWrapper.h\""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"// #include \"pkb/PKBManager.h\""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"#include \"qps/Evaluator/QueryEvaluator.h\""},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"#include \"qps/Parser/QueryParser.h\""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SourceProcessor.h\""},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"class TestWrapper : public AbstractWrapper {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    //private:"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    //    shared_ptr\u003cPKBManager\u003e pkbManager;"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    //    shared_ptr\u003cPKB\u003e pkb;"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    //    shared_ptr\u003cPKBWriter\u003e pkbWriter;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    // shared_ptr\u003cPKBReader\u003e pkbReader;"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager;"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager;"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"    // default constructor"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    TestWrapper();"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"    // destructor"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"    ~TestWrapper();"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"    // method for parsing the SIMPLE source"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"    virtual void parse(std::string filename);"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"    // method for evaluating a query"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"    virtual void evaluate(std::string query, std::list\u003cstd::string\u003e\u0026 results);"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"#endif"}],"authorContributionMap":{"winson8222":2,"github-classroom[bot]":25,"hmanhduc2k":3,"MSI\\vegit":5,"jianoway":6}},{"path":"Team19/Code19/src/autotester_gui/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_PREFIX_PATH \"C:\\\\Qt\\\\Qt5.14.2\\\\5.14.2\\\\msvc2017\")"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_AUTOMOC ON)"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_AUTOUIC ON)"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"set(CMAKE_AUTORCC ON)"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"find_package( Qt5Core REQUIRED )"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"find_package( Qt5Widgets REQUIRED )"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"find_package( Qt5Gui REQUIRED )"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB srcs \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp\")"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"SET(forms mainwindow.ui)"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"QT5_WRAP_UI(forms_headers ${forms})"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"add_executable(autotester_gui ${srcs} ${forms_headers})"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"target_link_libraries(autotester_gui Qt5::Widgets spa)"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"macro(qt5_copy_dll APP DLL)"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"    # find the release *.dll file"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"    get_target_property(Qt5_${DLL}Location Qt5::${DLL} LOCATION)"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"    # find the debug *d.dll file"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"    get_target_property(Qt5_${DLL}LocationDebug Qt5::${DLL} IMPORTED_LOCATION_DEBUG)"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"    add_custom_command(TARGET ${APP} POST_BUILD"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"       COMMAND ${CMAKE_COMMAND} -E copy_if_different $\u003c$\u003cCONFIG:Debug\u003e:${Qt5_${DLL}LocationDebug}\u003e $\u003c$\u003cNOT:$\u003cCONFIG:Debug\u003e\u003e:${Qt5_${DLL}Location}\u003e $\u003cTARGET_FILE_DIR:${APP}\u003e)"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"endmacro()"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"qt5_copy_dll(autotester_gui Core)"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"qt5_copy_dll(autotester_gui Widgets)"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"qt5_copy_dll(autotester_gui Gui)"}],"authorContributionMap":{"github-classroom[bot]":31}},{"path":"Team19/Code19/src/autotester_gui/src/GUIWrapper.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"GUIWrapper.h\""},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003ciostream\u003e"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"// a default constructor"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"GUIWrapper::GUIWrapper() {"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"  // create any objects here as instance variables of this class"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"  // as well as any initialization required for your spa program"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"// method for parsing the SIMPLE source"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"void GUIWrapper::parse(std::string filename) {"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"\t// call your parser to do the parsing"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"\tstd::cout \u003c\u003c \"parsed \" \u003c\u003c filename \u003c\u003c std::endl;"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"  // ...rest of your code..."},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"// method to evaluating a query"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"void GUIWrapper::evaluate(std::string query, std::list\u003cstd::string\u003e\u0026 results){"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"// call your evaluator to evaluate the query here"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"  // ...code to evaluate query..."},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"\tstd::cout \u003c\u003c \"query\u003d  \" \u003c\u003c query \u003c\u003c std::endl;"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"\tresults.push_back(query + \"\\nQuery result: ...\");"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"  // store the answers to the query in the results list (it is initially empty)"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"  // each result must be a string."},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"github-classroom[bot]":27}},{"path":"Team19/Code19/src/autotester_gui/src/GUIWrapper.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#ifndef TESTWRAPPER_H"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#define TESTWRAPPER_H"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003ciostream\u003e"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003clist\u003e"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"class GUIWrapper {"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":" public:"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"  // default constructor"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"  GUIWrapper();"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"  "},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"  // destructor"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"  ~GUIWrapper();"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"  "},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"  // method for parsing the SIMPLE source"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"  virtual void parse(std::string filename);"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"  "},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"  // method for evaluating a query"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"  virtual void evaluate(std::string query, std::list\u003cstd::string\u003e\u0026 results);"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"#endif"}],"authorContributionMap":{"github-classroom[bot]":24}},{"path":"Team19/Code19/src/autotester_gui/src/codeeditor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQtWidgets\u003e"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"codeeditor.h\""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"CodeEditor::CodeEditor(QWidget *parent) : QPlainTextEdit(parent)"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"    lineNumberArea \u003d new LineNumberArea(this);"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"    connect(this, SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth(int)));"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"    connect(this, SIGNAL(updateRequest(QRect,int)), this, SLOT(updateLineNumberArea(QRect,int)));"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"    connect(this, SIGNAL(cursorPositionChanged()), this, SLOT(highlightCurrentLine()));"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"    updateLineNumberAreaWidth(0);"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"    highlightCurrentLine();"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"int CodeEditor::lineNumberAreaWidth()"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"    int digits \u003d 1;"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"    int max \u003d qMax(1, blockCount());"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"    while (max \u003e\u003d 10) {"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"        max /\u003d 10;"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"        ++digits;"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"\t//int space \u003d 3 + fontMetrics().horizontalAdvance(QLatin1Char(\u00279\u0027)) * digits;"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"    return 20;"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"void CodeEditor::updateLineNumberAreaWidth(int /* newBlockCount */)"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"    setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"void CodeEditor::updateLineNumberArea(const QRect \u0026rect, int dy)"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":"    if (dy)"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"        lineNumberArea-\u003escroll(0, dy);"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":"    else"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":"        lineNumberArea-\u003eupdate(0, rect.y(), lineNumberArea-\u003ewidth(), rect.height());"},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"    if (rect.contains(viewport()-\u003erect()))"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":"        updateLineNumberAreaWidth(0);"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"void CodeEditor::resizeEvent(QResizeEvent *e)"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":"    QPlainTextEdit::resizeEvent(e);"},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":60,"author":{"gitId":"github-classroom[bot]"},"content":"    QRect cr \u003d contentsRect();"},{"lineNumber":61,"author":{"gitId":"github-classroom[bot]"},"content":"    lineNumberArea-\u003esetGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));"},{"lineNumber":62,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":63,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":64,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":65,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":66,"author":{"gitId":"github-classroom[bot]"},"content":"void CodeEditor::highlightCurrentLine()"},{"lineNumber":67,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":68,"author":{"gitId":"github-classroom[bot]"},"content":"    QList\u003cQTextEdit::ExtraSelection\u003e extraSelections;"},{"lineNumber":69,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":70,"author":{"gitId":"github-classroom[bot]"},"content":"    if (!isReadOnly()) {"},{"lineNumber":71,"author":{"gitId":"github-classroom[bot]"},"content":"        QTextEdit::ExtraSelection selection;"},{"lineNumber":72,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":73,"author":{"gitId":"github-classroom[bot]"},"content":"        QColor lineColor \u003d QColor(Qt::yellow).lighter(160);"},{"lineNumber":74,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":75,"author":{"gitId":"github-classroom[bot]"},"content":"        selection.format.setBackground(lineColor);"},{"lineNumber":76,"author":{"gitId":"github-classroom[bot]"},"content":"        selection.format.setProperty(QTextFormat::FullWidthSelection, true);"},{"lineNumber":77,"author":{"gitId":"github-classroom[bot]"},"content":"        selection.cursor \u003d textCursor();"},{"lineNumber":78,"author":{"gitId":"github-classroom[bot]"},"content":"        selection.cursor.clearSelection();"},{"lineNumber":79,"author":{"gitId":"github-classroom[bot]"},"content":"        extraSelections.append(selection);"},{"lineNumber":80,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":82,"author":{"gitId":"github-classroom[bot]"},"content":"    setExtraSelections(extraSelections);"},{"lineNumber":83,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":84,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":85,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":86,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":87,"author":{"gitId":"github-classroom[bot]"},"content":"void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *event)"},{"lineNumber":88,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":89,"author":{"gitId":"github-classroom[bot]"},"content":"    QPainter painter(lineNumberArea);"},{"lineNumber":90,"author":{"gitId":"github-classroom[bot]"},"content":"    painter.fillRect(event-\u003erect(), Qt::lightGray);"},{"lineNumber":91,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":92,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":93,"author":{"gitId":"github-classroom[bot]"},"content":"    QTextBlock block \u003d firstVisibleBlock();"},{"lineNumber":94,"author":{"gitId":"github-classroom[bot]"},"content":"\tint blockNumber \u003d 0;// block.blockNumber();"},{"lineNumber":95,"author":{"gitId":"github-classroom[bot]"},"content":"    int top \u003d (int) blockBoundingGeometry(block).translated(contentOffset()).top();"},{"lineNumber":96,"author":{"gitId":"github-classroom[bot]"},"content":"    int bottom \u003d top + (int) blockBoundingRect(block).height();"},{"lineNumber":97,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":98,"author":{"gitId":"github-classroom[bot]"},"content":"    while (block.isValid() \u0026\u0026 top \u003c\u003d event-\u003erect().bottom()) {"},{"lineNumber":99,"author":{"gitId":"github-classroom[bot]"},"content":"        if (block.isVisible() \u0026\u0026 bottom \u003e\u003d event-\u003erect().top()) {"},{"lineNumber":100,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tint cnt \u003d block.text().count(QLatin1Char(\u0027;\u0027));"},{"lineNumber":101,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":102,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tcnt+\u003dblock.text().count(QString(\"if\"));"},{"lineNumber":103,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tcnt +\u003d block.text().count(QString(\"while\"));"},{"lineNumber":104,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tif (cnt \u003e 0) {"},{"lineNumber":105,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\tblockNumber +\u003d cnt;"},{"lineNumber":106,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\tQString number \u003d QString::number(blockNumber);"},{"lineNumber":107,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\tpainter.setPen(Qt::black);"},{"lineNumber":108,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\tpainter.drawText(0, top, lineNumberArea-\u003ewidth(), fontMetrics().height(),"},{"lineNumber":109,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\t\tQt::AlignRight, number);"},{"lineNumber":110,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t}"},{"lineNumber":111,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t}"},{"lineNumber":112,"author":{"gitId":"github-classroom[bot]"},"content":"\t\telse {"},{"lineNumber":113,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":114,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tint cnt \u003d block.text().count(QLatin1Char(\u0027;\u0027));"},{"lineNumber":115,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tcnt +\u003d block.text().count(QString(\"if\"));"},{"lineNumber":116,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tcnt +\u003d block.text().count(QString(\"while\"));"},{"lineNumber":117,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\tif (cnt \u003e 0) {"},{"lineNumber":118,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t\tblockNumber +\u003d cnt;"},{"lineNumber":119,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t\t}"},{"lineNumber":120,"author":{"gitId":"github-classroom[bot]"},"content":"\t\t}"},{"lineNumber":121,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":122,"author":{"gitId":"github-classroom[bot]"},"content":"        block \u003d block.next();"},{"lineNumber":123,"author":{"gitId":"github-classroom[bot]"},"content":"        top \u003d bottom;"},{"lineNumber":124,"author":{"gitId":"github-classroom[bot]"},"content":"        bottom \u003d top + (int) blockBoundingRect(block).height();"},{"lineNumber":125,"author":{"gitId":"github-classroom[bot]"},"content":"        //++blockNumber;"},{"lineNumber":126,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"github-classroom[bot]":127}},{"path":"Team19/Code19/src/autotester_gui/src/codeeditor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#ifndef CODEEDITOR_H"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#define CODEEDITOR_H"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQPlainTextEdit\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQObject\u003e"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"class QPaintEvent;"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"class QResizeEvent;"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"class QSize;"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"class QWidget;"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"class LineNumberArea;"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"class CodeEditor : public QPlainTextEdit"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"    Q_OBJECT"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"    CodeEditor(QWidget *parent \u003d 0);"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"    void lineNumberAreaPaintEvent(QPaintEvent *event);"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"    int lineNumberAreaWidth();"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"protected:"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"    void resizeEvent(QResizeEvent *event) override;"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"private slots:"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"    void updateLineNumberAreaWidth(int newBlockCount);"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    void highlightCurrentLine();"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"    void updateLineNumberArea(const QRect \u0026, int);"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"private:"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"    QWidget *lineNumberArea;"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"class LineNumberArea : public QWidget"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"    LineNumberArea(CodeEditor *editor) : QWidget(editor) {"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"        codeEditor \u003d editor;"},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":"    QSize sizeHint() const override {"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"        return QSize(codeEditor-\u003elineNumberAreaWidth(), 0);"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":"protected:"},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"    void paintEvent(QPaintEvent *event) override {"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":"        codeEditor-\u003elineNumberAreaPaintEvent(event);"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":"private:"},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":"    CodeEditor *codeEditor;"},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":"#endif"}],"authorContributionMap":{"github-classroom[bot]":59}},{"path":"Team19/Code19/src/autotester_gui/src/main.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQtWidgets\u003e"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"//#include \"codeeditor.h\""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"mainwindow.h\""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"int main(int argv, char **args)"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"    QApplication app(argv, args);"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"\t//QApplication a(argc, argv);"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"\tMainWindow w;"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"\tw.show();"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"    return app.exec();"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"github-classroom[bot]":13}},{"path":"Team19/Code19/src/autotester_gui/src/mainwindow.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"ui_mainwindow.h\""},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"mainwindow.h\""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"GUIWrapper.h\""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003ciostream\u003e"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQFileDialog\u003e"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQtWidgets\u003e"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQTextStream\u003e"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003clist\u003e"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"using namespace std;"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"MainWindow::MainWindow(QWidget *parent) :"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"\tQMainWindow(parent),"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"\tui(new Ui::MainWindow)"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"\tui-\u003esetupUi(this);"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"\twrapper \u003d new GUIWrapper();"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"MainWindow::~MainWindow()"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"\tdelete ui;"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"void MainWindow::btnLoad_clicked() {"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"\tQString src_name \u003d QFileDialog::getOpenFileName(this,"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"\t\ttr(\"Open Source file\"), \".\", tr(\"txt Files (*.txt)\"));"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"\tQFile file;"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"\tfile.setFileName(src_name);"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"\tif (!file.open(QIODevice::ReadOnly))"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"\t\treturn;"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"\tQString m_fileContents \u003d file.readAll();"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"\tui-\u003etxtCodeEditor-\u003edocument()-\u003esetPlainText(m_fileContents);\t"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"\twrapper-\u003eparse(src_name.toStdString());"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"void MainWindow::btnRun_clicked() {"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"\tstd::list\u003cstd::string\u003e results;"},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"\twrapper-\u003eevaluate(ui-\u003etxtQuery-\u003etoPlainText().toStdString(),results);"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":"\tQString result_str;"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"\tfor (auto const\u0026 result : results) {"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":"\t\tresult_str +\u003d QString(result.c_str());"},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":"\t}"},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"\tui-\u003etxtResult-\u003edocument()-\u003esetPlainText(result_str);"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"}"}],"authorContributionMap":{"github-classroom[bot]":52}},{"path":"Team19/Code19/src/autotester_gui/src/mainwindow.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#ifndef MAINWINDOW_H"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#define MAINWINDOW_H"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"#include \u003cQMainWindow\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"GUIWrapper.h\""},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"namespace Ui {"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"\tclass MainWindow;"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"class MainWindow : public QMainWindow"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"{"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"\tQ_OBJECT"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"public:"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"\texplicit MainWindow(QWidget *parent \u003d 0);"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"\t~MainWindow();"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"public slots:"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"\tvoid btnLoad_clicked();"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"\tvoid btnRun_clicked();"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"private:"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"\tUi::MainWindow *ui;"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"\tGUIWrapper *wrapper;"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"};"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"#endif // MAINWINDOW_H"}],"authorContributionMap":{"github-classroom[bot]":29}},{"path":"Team19/Code19/src/autotester_gui/src/mainwindow.ui","fileType":"ui","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"\u003cui version\u003d\"4.0\"\u003e"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":" \u003cclass\u003eMainWindow\u003c/class\u003e"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":" \u003cwidget class\u003d\"QMainWindow\" name\u003d\"MainWindow\"\u003e"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cproperty name\u003d\"geometry\"\u003e"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003crect\u003e"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003cx\u003e0\u003c/x\u003e"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003cy\u003e0\u003c/y\u003e"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003cwidth\u003e852\u003c/width\u003e"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003cheight\u003e751\u003c/height\u003e"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003c/rect\u003e"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/property\u003e"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cproperty name\u003d\"windowTitle\"\u003e"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cstring\u003eSPA GUI\u003c/string\u003e"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/property\u003e"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cwidget class\u003d\"QWidget\" name\u003d\"centralwidget\"\u003e"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003clayout class\u003d\"QVBoxLayout\" name\u003d\"verticalLayout\"\u003e"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003citem\u003e"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidget class\u003d\"QGroupBox\" name\u003d\"groupBox_2\"\u003e"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"title\"\u003e"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cstring\u003eSIMPLE Source Code Editor\u003c/string\u003e"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003clayout class\u003d\"QHBoxLayout\" name\u003d\"horizontalLayout_2\"\u003e"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003citem\u003e"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cwidget class\u003d\"CodeEditor\" name\u003d\"txtCodeEditor\"/\u003e"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003c/item\u003e"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/layout\u003e"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003c/widget\u003e"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/item\u003e"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003citem\u003e"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidget class\u003d\"QGroupBox\" name\u003d\"groupBox\"\u003e"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"maximumSize\"\u003e"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003csize\u003e"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cwidth\u003e16777215\u003c/width\u003e"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cheight\u003e80\u003c/height\u003e"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003c/size\u003e"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"title\"\u003e"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cstring\u003ePQL Query - input one query at a time\u003c/string\u003e"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"checkable\"\u003e"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cbool\u003efalse\u003c/bool\u003e"},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003clayout class\u003d\"QHBoxLayout\" name\u003d\"horizontalLayout\"\u003e"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003citem\u003e"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cwidget class\u003d\"QTextEdit\" name\u003d\"txtQuery\"\u003e"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":"         \u003cproperty name\u003d\"sizeAdjustPolicy\"\u003e"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":"          \u003cenum\u003eQAbstractScrollArea::AdjustIgnored\u003c/enum\u003e"},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":"         \u003c/property\u003e"},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003c/widget\u003e"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003c/item\u003e"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/layout\u003e"},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003c/widget\u003e"},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/item\u003e"},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003citem\u003e"},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidget class\u003d\"QGroupBox\" name\u003d\"groupBox_3\"\u003e"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"maximumSize\"\u003e"},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003csize\u003e"},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cwidth\u003e16777215\u003c/width\u003e"},{"lineNumber":60,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cheight\u003e100\u003c/height\u003e"},{"lineNumber":61,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003c/size\u003e"},{"lineNumber":62,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":63,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"title\"\u003e"},{"lineNumber":64,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cstring\u003eQuery Results\u003c/string\u003e"},{"lineNumber":65,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":66,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003clayout class\u003d\"QHBoxLayout\" name\u003d\"horizontalLayout_3\"\u003e"},{"lineNumber":67,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003citem\u003e"},{"lineNumber":68,"author":{"gitId":"github-classroom[bot]"},"content":"        \u003cwidget class\u003d\"QTextEdit\" name\u003d\"txtResult\"/\u003e"},{"lineNumber":69,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003c/item\u003e"},{"lineNumber":70,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/layout\u003e"},{"lineNumber":71,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003c/widget\u003e"},{"lineNumber":72,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/item\u003e"},{"lineNumber":73,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003citem\u003e"},{"lineNumber":74,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidget class\u003d\"QPushButton\" name\u003d\"btnLoadQuery\"\u003e"},{"lineNumber":75,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"text\"\u003e"},{"lineNumber":76,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cstring\u003eLoad SIMPLE source code from file\u003c/string\u003e"},{"lineNumber":77,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":78,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003c/widget\u003e"},{"lineNumber":79,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/item\u003e"},{"lineNumber":80,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003citem\u003e"},{"lineNumber":81,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidget class\u003d\"QPushButton\" name\u003d\"btnRunQuery\"\u003e"},{"lineNumber":82,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003cproperty name\u003d\"text\"\u003e"},{"lineNumber":83,"author":{"gitId":"github-classroom[bot]"},"content":"       \u003cstring\u003eEvaluate PQL qeury\u003c/string\u003e"},{"lineNumber":84,"author":{"gitId":"github-classroom[bot]"},"content":"      \u003c/property\u003e"},{"lineNumber":85,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003c/widget\u003e"},{"lineNumber":86,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/item\u003e"},{"lineNumber":87,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003c/layout\u003e"},{"lineNumber":88,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/widget\u003e"},{"lineNumber":89,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cwidget class\u003d\"QMenuBar\" name\u003d\"menubar\"\u003e"},{"lineNumber":90,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cproperty name\u003d\"geometry\"\u003e"},{"lineNumber":91,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003crect\u003e"},{"lineNumber":92,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cx\u003e0\u003c/x\u003e"},{"lineNumber":93,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cy\u003e0\u003c/y\u003e"},{"lineNumber":94,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cwidth\u003e852\u003c/width\u003e"},{"lineNumber":95,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cheight\u003e21\u003c/height\u003e"},{"lineNumber":96,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/rect\u003e"},{"lineNumber":97,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003c/property\u003e"},{"lineNumber":98,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/widget\u003e"},{"lineNumber":99,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cwidget class\u003d\"QStatusBar\" name\u003d\"statusbar\"/\u003e"},{"lineNumber":100,"author":{"gitId":"github-classroom[bot]"},"content":" \u003c/widget\u003e"},{"lineNumber":101,"author":{"gitId":"github-classroom[bot]"},"content":" \u003ccustomwidgets\u003e"},{"lineNumber":102,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003ccustomwidget\u003e"},{"lineNumber":103,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cclass\u003eCodeEditor\u003c/class\u003e"},{"lineNumber":104,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cextends\u003eQTextEdit\u003c/extends\u003e"},{"lineNumber":105,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cheader\u003ecodeeditor.h\u003c/header\u003e"},{"lineNumber":106,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/customwidget\u003e"},{"lineNumber":107,"author":{"gitId":"github-classroom[bot]"},"content":" \u003c/customwidgets\u003e"},{"lineNumber":108,"author":{"gitId":"github-classroom[bot]"},"content":" \u003cresources/\u003e"},{"lineNumber":109,"author":{"gitId":"github-classroom[bot]"},"content":" \u003cconnections\u003e"},{"lineNumber":110,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cconnection\u003e"},{"lineNumber":111,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003csender\u003ebtnLoadQuery\u003c/sender\u003e"},{"lineNumber":112,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003csignal\u003eclicked()\u003c/signal\u003e"},{"lineNumber":113,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003creceiver\u003eMainWindow\u003c/receiver\u003e"},{"lineNumber":114,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cslot\u003ebtnLoad_clicked()\u003c/slot\u003e"},{"lineNumber":115,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003chints\u003e"},{"lineNumber":116,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003chint type\u003d\"sourcelabel\"\u003e"},{"lineNumber":117,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cx\u003e635\u003c/x\u003e"},{"lineNumber":118,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cy\u003e683\u003c/y\u003e"},{"lineNumber":119,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/hint\u003e"},{"lineNumber":120,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003chint type\u003d\"destinationlabel\"\u003e"},{"lineNumber":121,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cx\u003e625\u003c/x\u003e"},{"lineNumber":122,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cy\u003e784\u003c/y\u003e"},{"lineNumber":123,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/hint\u003e"},{"lineNumber":124,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003c/hints\u003e"},{"lineNumber":125,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/connection\u003e"},{"lineNumber":126,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cconnection\u003e"},{"lineNumber":127,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003csender\u003ebtnRunQuery\u003c/sender\u003e"},{"lineNumber":128,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003csignal\u003eclicked()\u003c/signal\u003e"},{"lineNumber":129,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003creceiver\u003eMainWindow\u003c/receiver\u003e"},{"lineNumber":130,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003cslot\u003ebtnRun_clicked()\u003c/slot\u003e"},{"lineNumber":131,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003chints\u003e"},{"lineNumber":132,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003chint type\u003d\"sourcelabel\"\u003e"},{"lineNumber":133,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cx\u003e714\u003c/x\u003e"},{"lineNumber":134,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cy\u003e710\u003c/y\u003e"},{"lineNumber":135,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/hint\u003e"},{"lineNumber":136,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003chint type\u003d\"destinationlabel\"\u003e"},{"lineNumber":137,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cx\u003e692\u003c/x\u003e"},{"lineNumber":138,"author":{"gitId":"github-classroom[bot]"},"content":"     \u003cy\u003e808\u003c/y\u003e"},{"lineNumber":139,"author":{"gitId":"github-classroom[bot]"},"content":"    \u003c/hint\u003e"},{"lineNumber":140,"author":{"gitId":"github-classroom[bot]"},"content":"   \u003c/hints\u003e"},{"lineNumber":141,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003c/connection\u003e"},{"lineNumber":142,"author":{"gitId":"github-classroom[bot]"},"content":" \u003c/connections\u003e"},{"lineNumber":143,"author":{"gitId":"github-classroom[bot]"},"content":" \u003cslots\u003e"},{"lineNumber":144,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cslot\u003ebtnLoad_clicked()\u003c/slot\u003e"},{"lineNumber":145,"author":{"gitId":"github-classroom[bot]"},"content":"  \u003cslot\u003ebtnRun_clicked()\u003c/slot\u003e"},{"lineNumber":146,"author":{"gitId":"github-classroom[bot]"},"content":" \u003c/slots\u003e"},{"lineNumber":147,"author":{"gitId":"github-classroom[bot]"},"content":"\u003c/ui\u003e"}],"authorContributionMap":{"github-classroom[bot]":147}},{"path":"Team19/Code19/src/integration_testing/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB srcs \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp\")"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"add_executable(integration_testing ${srcs})"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"target_link_libraries(integration_testing spa)"}],"authorContributionMap":{"github-classroom[bot]":6}},{"path":"Team19/Code19/src/integration_testing/src/TestFrontEnd.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"catch.hpp\""}],"authorContributionMap":{"github-classroom[bot]":1}},{"path":"Team19/Code19/src/integration_testing/src/main.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"catch.hpp\""}],"authorContributionMap":{"github-classroom[bot]":2}},{"path":"Team19/Code19/src/spa/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE srcs \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE headers \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp\")"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE sp_files \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.cpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.hpp\")"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"file(GLOB_RECURSE qps_files \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.cpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.hpp\")"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"add_library(spa ${srcs} ${headers} ${sp_files} ${qps_files})"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"# this makes the headers accessible for other projects which uses spa lib"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"target_include_directories(spa PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)"}],"authorContributionMap":{"Guan Wei":1,"github-classroom[bot]":3,"MSI\\vegit":2,"jianoway":3}},{"path":"Team19/Code19/src/spa/src/commons/ShuntingYard.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"ShuntingYard.h\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cstack\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"std::string ShuntingYard::convertToPostfix(const std::string\u0026 infixExpression) {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"  return infixToPostfix(infixExpression);"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"int ShuntingYard::precedence(char c) {"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"  if (c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    return 1;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"  } else if (c \u003d\u003d \u0027*\u0027 || c \u003d\u003d \u0027/\u0027) {"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    return 2;"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"  } else if (c \u003d\u003d \u0027^\u0027) {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    return 3;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"  } else {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    return -1;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"bool ShuntingYard::isOperator(char c) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"  return c \u003d\u003d \u0027+\u0027 || c \u003d\u003d \u0027-\u0027 || c \u003d\u003d \u0027*\u0027 || c \u003d\u003d \u0027/\u0027 || c \u003d\u003d \u0027^\u0027;"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"bool ShuntingYard::isOperand(char c) {"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"  return c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027 || c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027;"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"bool ShuntingYard::isLeftParenthesis(char c) {"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"  return c \u003d\u003d \u0027(\u0027;"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"bool ShuntingYard::isRightParenthesis(char c) {"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"  return c \u003d\u003d \u0027)\u0027;"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"std::string ShuntingYard::infixToPostfix(const std::string\u0026 infixExpression) {"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    std::string postfixExpression;"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::stack\u003cchar\u003e stack;"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    for (char c : infixExpression) {"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        if (c \u003d\u003d \u0027 \u0027) {"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        continue;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        if (isOperand(c)) {"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        postfixExpression +\u003d c;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        } else if (isOperator(c)) {"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        while (!stack.empty() \u0026\u0026 isOperator(stack.top()) \u0026\u0026 ( precedence(c) \u003c\u003d precedence(stack.top()))) {"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"            postfixExpression +\u003d stack.top();"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"            stack.pop();"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        stack.push(c);"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        } else if (isLeftParenthesis(c)) {"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        stack.push(c);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        } else if (isRightParenthesis(c)) {"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        while (!stack.empty() \u0026\u0026 !isLeftParenthesis(stack.top())) {"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"            postfixExpression +\u003d stack.top();"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"            stack.pop();"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        stack.pop();"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    while (!stack.empty()) {"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        postfixExpression +\u003d stack.top();"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        stack.pop();"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"    return postfixExpression;"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"// ai-generated code, slightly modifies to fit the project"}],"authorContributionMap":{"jianoway":69}},{"path":"Team19/Code19/src/spa/src/commons/ShuntingYard.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"class ShuntingYard {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"  std::string convertToPostfix(const std::string\u0026 infixExpression);"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"  static int precedence(char c);"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"  static bool isOperator(char c);"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"  static bool isOperand(char c);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"  static bool isLeftParenthesis(char c);"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"  static bool isRightParenthesis(char c);"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"  static std::string infixToPostfix(const std::string\u0026 infixExpression);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":15}},{"path":"Team19/Code19/src/spa/src/pkb/PKB.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/FollowsStore.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/FollowsTStore.h\""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/UsesPStore.h\""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/UsesSStore.h\""},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentStore.h\""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentTStore.h\""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ModifiesPStore.h\""},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ModifiesSStore.h\""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/StatementStore.h\""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ReadStore.h\""},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/PrintStore.h\""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/CallStore.h\""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/WhileStore.h\""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/IfStore.h\""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/AssignStore.h\""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/VariableStore.h\""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ConstantStore.h\""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ProcedureStore.h\""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/AssignPatternStore.h\""},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cmemory\u003e"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"class PKB {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    // Relationship stores"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsStore\u003e followsStore;"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTStore\u003e followsTStore;"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentStore\u003e parentStore;"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTStore\u003e parentTStore;"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesPStore\u003e usesPStore;"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesSStore\u003e usesSStore;"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesPStore\u003e modifiesPStore;"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesSStore\u003e modifiesSStore;"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    // Entity stores"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementStore\u003e statementStore;"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadStore\u003e readStore;"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintStore\u003e printStore;"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallStore\u003e callStore;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileStore\u003e whileStore;"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfStore\u003e ifStore;"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignStore\u003e assignStore;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableStore\u003e variableStore;"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantStore\u003e constantStore;"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureStore\u003e procedureStore;"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    // Pattern stores"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"   std::shared_ptr\u003cAssignPatternStore\u003e assignPatternStore;"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"    PKB() {"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        // Initialise all relationship stores"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        followsTStore \u003d std::make_shared\u003cFollowsTStore\u003e();"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        followsStore \u003d std::make_shared\u003cFollowsStore\u003e();"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        parentStore \u003d std::make_shared\u003cParentStore\u003e();"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        parentTStore \u003d std::make_shared\u003cParentTStore\u003e();"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        usesPStore \u003d std::make_shared\u003cUsesPStore\u003e();"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        usesSStore \u003d std::make_shared\u003cUsesSStore\u003e();"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        modifiesPStore \u003d std::make_shared\u003cModifiesPStore\u003e();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        modifiesSStore \u003d std::make_shared\u003cModifiesSStore\u003e();"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        // Initialize all entities stores"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        statementStore \u003d std::make_shared\u003cStatementStore\u003e();"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        readStore \u003d std::make_shared\u003cReadStore\u003e();"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        printStore \u003d std::make_shared\u003cPrintStore\u003e();"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"        callStore \u003d std::make_shared\u003cCallStore\u003e();"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        whileStore \u003d std::make_shared\u003cWhileStore\u003e();"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        ifStore \u003d std::make_shared\u003cIfStore\u003e();"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        assignStore \u003d std::make_shared\u003cAssignStore\u003e();"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        variableStore \u003d std::make_shared\u003cVariableStore\u003e();"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        constantStore \u003d std::make_shared\u003cConstantStore\u003e();"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"        procedureStore \u003d std::make_shared\u003cProcedureStore\u003e();"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"        // Initialize all pattern stores"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        assignPatternStore \u003d std::make_shared\u003cAssignPatternStore\u003e();"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    // Relationship Getters"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsStore\u003e getFollowsStore() { return followsStore; }"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTStore\u003e getFollowsTStore() { return followsTStore; }"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentStore\u003e getParentStore() { return parentStore; }"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTStore\u003e getParentTStore() { return parentTStore; }"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesPStore\u003e getUsesPStore() { return usesPStore; }"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesSStore\u003e getUsesSStore() { return usesSStore; }"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesPStore\u003e getModifiesPStore() { return modifiesPStore; }"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesSStore\u003e getModifiesSStore() { return modifiesSStore; }"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    // Entity Getters"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementStore\u003e getStatementStore() { return statementStore; }"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadStore\u003e getReadStore() { return readStore; }"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintStore\u003e getPrintStore() { return printStore; }"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallStore\u003e getCallStore() { return callStore; }"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileStore\u003e getWhileStore() { return whileStore; }"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfStore\u003e getIfStore() { return ifStore; }"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignStore\u003e getAssignStore() { return assignStore; }"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableStore\u003e getVariableStore() { return variableStore; }"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantStore\u003e getConstantStore() { return constantStore; }"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureStore\u003e getProcedureStore() { return procedureStore; }"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    // Pattern Getters"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternStore\u003e getAssignPatternStore() { return assignPatternStore; }"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"MSI\\vegit":1,"jianoway":103}},{"path":"Team19/Code19/src/spa/src/pkb/PKBManager.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"PKB.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"PKBReaderManager.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class PKBManager {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKB\u003e pkb;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    PKBManager() {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      pkb \u003d std::make_shared\u003cPKB\u003e(); // TODO: Change to private"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"      pkbReaderManager \u003d std::make_shared\u003cPKBReaderManager\u003e(pkb);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"      pkbWriterManager \u003d std::make_shared\u003cPKBWriterManager\u003e(pkb);"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKB\u003e getPKB() {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return pkb;"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e getPKBReaderManager() {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        return pkbReaderManager;"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e getPKBWriterManager() {"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        return pkbWriterManager;"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":27}},{"path":"Team19/Code19/src/spa/src/pkb/PKBReaderManager.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"PKB.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/AssignReader.h\""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/VariableReader.h\""},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/ProcedureReader.h\""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/StatementReader.h\""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/IfReader.h\""},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/WhileReader.h\""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/CallReader.h\""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/ConstantReader.h\""},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/ReadReader.h\""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/entities/PrintReader.h\""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/relationships/FollowsReader.h\""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/relationships/FollowsTReader.h\""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/relationships/ParentReader.h\""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/relationships/ParentTReader.h\""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"#include \"pkb/readers/patterns/AssignPatternReader.h\""},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"class PKBReaderManager {"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKB\u003e pkb;"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignReader\u003e assignReader;"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableReader\u003e variableReader;"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureReader\u003e procedureReader;"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementReader\u003e statementReader;"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfReader\u003e ifReader;"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileReader\u003e whileReader;"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallReader\u003e callReader;"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadReader\u003e readReader;"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantReader\u003e constantReader;"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintReader\u003e printReader;"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsReader\u003e followsReader;"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTReader\u003e followsTReader;"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentReader\u003e parentReader;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTReader\u003e parentTReader;"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternReader\u003e assignPatternReader;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    explicit PKBReaderManager(const std::shared_ptr\u003cPKB\u003e\u0026 pkb): pkb(pkb) {"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"      assignReader \u003d std::make_shared\u003cAssignReader\u003e(pkb-\u003egetAssignStore());"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"      variableReader \u003d std::make_shared\u003cVariableReader\u003e(pkb-\u003egetVariableStore());"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"      procedureReader \u003d std::make_shared\u003cProcedureReader\u003e(pkb-\u003egetProcedureStore());"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"      statementReader \u003d std::make_shared\u003cStatementReader\u003e(pkb-\u003egetStatementStore());"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"      ifReader \u003d std::make_shared\u003cIfReader\u003e(pkb-\u003egetIfStore());"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"      whileReader \u003d std::make_shared\u003cWhileReader\u003e(pkb-\u003egetWhileStore());"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"      callReader \u003d std::make_shared\u003cCallReader\u003e(pkb-\u003egetCallStore());"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"      readReader \u003d std::make_shared\u003cReadReader\u003e(pkb-\u003egetReadStore());"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"      constantReader \u003d std::make_shared\u003cConstantReader\u003e(pkb-\u003egetConstantStore());"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"      printReader \u003d std::make_shared\u003cPrintReader\u003e(pkb-\u003egetPrintStore());"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"      followsReader \u003d std::make_shared\u003cFollowsReader\u003e(pkb-\u003egetFollowsStore());"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      followsTReader \u003d std::make_shared\u003cFollowsTReader\u003e(pkb-\u003egetFollowsTStore());"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"      parentReader \u003d std::make_shared\u003cParentReader\u003e(pkb-\u003egetParentStore());"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"      parentTReader \u003d std::make_shared\u003cParentTReader\u003e(pkb-\u003egetParentTStore());"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"      assignPatternReader \u003d std::make_shared\u003cAssignPatternReader\u003e(pkb-\u003egetAssignPatternStore());"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"    // Entity Readers"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignReader\u003e getAssignReader() {"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        return assignReader;"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableReader\u003e getVariableReader() {"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"        return variableReader;"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureReader\u003e getProcedureReader() {"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"        return procedureReader;"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementReader\u003e getStatementReader() {"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        return statementReader;"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfReader\u003e getIfReader() {"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        return ifReader;"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileReader\u003e getWhileReader() {"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"        return whileReader;"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallReader\u003e getCallReader() {"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        return callReader;"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadReader\u003e getReadReader() {"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        return readReader;"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantReader\u003e getConstantReader() {"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"        return constantReader;"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintReader\u003e getPrintReader() {"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"        return printReader;"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"    // Relationship Readers"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsReader\u003e getFollowsReader() {"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"        return followsReader;"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTReader\u003e getFollowsTReader() {"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"        return followsTReader;"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentReader\u003e getParentReader() {"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        return parentReader;"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTReader\u003e getParentTReader() {"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"        return parentTReader;"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"    // Pattern Readers"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternReader\u003e getAssignPatternReader() {"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"        return assignPatternReader;"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"};"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":""}],"authorContributionMap":{"jianoway":133}},{"path":"Team19/Code19/src/spa/src/pkb/PKBWriterManager.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"PKB.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/AssignWriter.h\""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/VariableWriter.h\""},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/ProcedureWriter.h\""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/ConstantWriter.h\""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/StatementWriter.h\""},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/IfWriter.h\""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/WhileWriter.h\""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/CallWriter.h\""},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/ReadWriter.h\""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/entities/PrintWriter.h\""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/FollowsWriter.h\""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/FollowsTWriter.h\""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/ParentWriter.h\""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/ParentTWriter.h\""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/UsesPWriter.h\""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/UsesSWriter.h\""},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/ModifiesPWriter.h\""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/relationships/ModifiesSWriter.h\""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"#include \"pkb/writers/patterns/AssignPatternWriter.h\""},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"class PKBWriterManager {"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKB\u003e pkb;"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsWriter\u003e followsWriter;"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTWriter\u003e followsTWriter;"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentWriter\u003e parentWriter;"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTWriter\u003e parentTWriter;"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesPWriter\u003e usesPWriter;"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesSWriter\u003e usesSWriter;"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesPWriter\u003e modifiesPWriter;"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesSWriter\u003e modifiesSWriter;"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignWriter\u003e assignWriter;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableWriter\u003e variableWriter;"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantWriter\u003e constantWriter;"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureWriter\u003e procedureWriter;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter;"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfWriter\u003e ifWriter;"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileWriter\u003e whileWriter;"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallWriter\u003e callWriter;"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadWriter\u003e readWriter;"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintWriter\u003e printWriter;"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignPatternWriter;"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    explicit PKBWriterManager(const std::shared_ptr\u003cPKB\u003e\u0026 pkb): pkb(pkb) {"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"      followsWriter \u003d std::make_shared\u003cFollowsWriter\u003e(pkb-\u003egetFollowsStore());"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"      followsTWriter \u003d std::make_shared\u003cFollowsTWriter\u003e(pkb-\u003egetFollowsTStore());"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"      parentWriter \u003d std::make_shared\u003cParentWriter\u003e(pkb-\u003egetParentStore());"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"      parentTWriter \u003d std::make_shared\u003cParentTWriter\u003e(pkb-\u003egetParentTStore());"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      usesPWriter \u003d std::make_shared\u003cUsesPWriter\u003e(pkb-\u003egetUsesPStore());"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"      usesSWriter \u003d std::make_shared\u003cUsesSWriter\u003e(pkb-\u003egetUsesSStore());"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"      modifiesPWriter \u003d std::make_shared\u003cModifiesPWriter\u003e(pkb-\u003egetModifiesPStore());"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"      modifiesSWriter \u003d std::make_shared\u003cModifiesSWriter\u003e(pkb-\u003egetModifiesSStore());"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"      assignWriter \u003d std::make_shared\u003cAssignWriter\u003e(pkb-\u003egetAssignStore());"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"      variableWriter \u003d std::make_shared\u003cVariableWriter\u003e(pkb-\u003egetVariableStore());"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"      constantWriter \u003d std::make_shared\u003cConstantWriter\u003e(pkb-\u003egetConstantStore());"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"      procedureWriter \u003d std::make_shared\u003cProcedureWriter\u003e(pkb-\u003egetProcedureStore());"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"      statementWriter \u003d std::make_shared\u003cStatementWriter\u003e(pkb-\u003egetStatementStore());"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"      ifWriter \u003d std::make_shared\u003cIfWriter\u003e(pkb-\u003egetIfStore());"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"      whileWriter \u003d std::make_shared\u003cWhileWriter\u003e(pkb-\u003egetWhileStore());"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"      callWriter \u003d std::make_shared\u003cCallWriter\u003e(pkb-\u003egetCallStore());"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"      readWriter \u003d std::make_shared\u003cReadWriter\u003e(pkb-\u003egetReadStore());"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"      printWriter \u003d std::make_shared\u003cPrintWriter\u003e(pkb-\u003egetPrintStore());"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"      assignPatternWriter \u003d std::make_shared\u003cAssignPatternWriter\u003e(pkb-\u003egetAssignPatternStore());"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"    // Relationships"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsWriter\u003e getFollowsWriter() {"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"      return followsWriter;"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTWriter\u003e getFollowsTWriter() {"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"      return followsTWriter;"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentWriter\u003e getParentWriter() {"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"      return parentWriter;"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTWriter\u003e getParentTWriter() {"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"      return parentTWriter;"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesPWriter\u003e getUsesPWriter() {"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"      return usesPWriter;"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesSWriter\u003e getUsesSWriter() {"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"      return usesSWriter;"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesPWriter\u003e getModifiesPWriter() {"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"      return modifiesPWriter;"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesSWriter\u003e getModifiesSWriter() {"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"      return modifiesSWriter;"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"    // Entities"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableWriter\u003e getVariableWriter() {"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"      return variableWriter;"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantWriter\u003e getConstantWriter() {"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"      return constantWriter;"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureWriter\u003e getProcedureWriter() {"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"      return procedureWriter;"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementWriter\u003e getStatementWriter() {"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"      return statementWriter;"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfWriter\u003e getIfWriter() {"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"      return ifWriter;"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileWriter\u003e getWhileWriter() {"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"      return whileWriter;"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallWriter\u003e getCallWriter() {"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"      return callWriter;"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadWriter\u003e getReadWriter() {"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"      return readWriter;"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintWriter\u003e getPrintWriter() {"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"      return printWriter;"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignWriter\u003e getAssignWriter() {"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"      return assignWriter;"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"    // Patterns"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e getAssignPatternWriter() {"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"      return assignPatternWriter;"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"};"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":160,"author":{"gitId":"jianoway"},"content":""}],"authorContributionMap":{"jianoway":160}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/AssignReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/AssignStore.h\""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class AssignReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignStore\u003e assignStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit AssignReader(std::shared_ptr\u003cAssignStore\u003e store) {"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        assignStore \u003d std::move(store);"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return assignStore-\u003eisEmpty();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        return getAllAssigns();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"      return hasAssign(stmtNum);"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllAssigns() const {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"      return assignStore-\u003egetAllEntities();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    bool hasAssign(int stmtNum) const {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"      return assignStore-\u003econtains(stmtNum);"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"MSI\\vegit":1,"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/CallReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/CallStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class CallReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallStore\u003e callStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit CallReader(std::shared_ptr\u003cCallStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      callStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return callStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllCalls();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasCall(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllCalls() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return callStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasCall(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return callStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/ConstantReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ConstantStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class ConstantReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cConstantStore\u003e constantStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit ConstantReader(std::shared_ptr\u003cConstantStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      constantStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return constantStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllConstants();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasConstant(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllConstants() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return constantStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasConstant(int constant) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return constantStore-\u003econtains(constant);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/IfReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/IfStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class IfReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfStore\u003e ifStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit IfReader(std::shared_ptr\u003cIfStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      ifStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return ifStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllIfs();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasIf(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllIfs() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return ifStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasIf(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return ifStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/PrintReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/PrintStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class PrintReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintStore\u003e printStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit PrintReader(std::shared_ptr\u003cPrintStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      printStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return printStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllPrints();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasPrint(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllPrints() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return printStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasPrint(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return printStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/ProcedureReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ProcedureStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class ProcedureReader: public IEntityReader\u003cstd::string\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureStore\u003e procedureStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit ProcedureReader(std::shared_ptr\u003cProcedureStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      procedureStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return procedureStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cstd::string\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllProcedures();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(std::string stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasProcedure(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cstd::string\u003e getAllProcedures() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return procedureStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasProcedure(std::string proc) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return procedureStore-\u003econtains(proc);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/ReadReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ReadStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class ReadReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadStore\u003e readStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit ReadReader(std::shared_ptr\u003cReadStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      readStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return readStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllReads();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasRead(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllReads() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return readStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasRead(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return readStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/StatementReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/StatementStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class StatementReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementStore\u003e statementStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit StatementReader(std::shared_ptr\u003cStatementStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      statementStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return statementStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllStatements();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasProcedure(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllStatements() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return statementStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasProcedure(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return statementStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/VariableReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/VariableStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class VariableReader: public IEntityReader\u003cstd::string\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableStore\u003e variableStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit VariableReader(std::shared_ptr\u003cVariableStore\u003e vs) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        variableStore \u003d std::move(vs);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return variableStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cstd::string\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllVariables();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(std::string variable) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasVariable(variable);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cstd::string\u003e getAllVariables() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return variableStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasVariable(std::string variable) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return variableStore-\u003econtains(std::move(variable));"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/entities/WhileReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/WhileStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class WhileReader: public IEntityReader\u003cint\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileStore\u003e whileStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit WhileReader(std::shared_ptr\u003cWhileStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      whileStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() const override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return whileStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllEntities() const override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return getAllWhiles();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    bool contains(int stmtNum) const override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      return hasWhile(stmtNum);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllWhiles() const {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"      return whileStore-\u003egetAllEntities();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool hasWhile(int stmtNum) const {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"      return whileStore-\u003econtains(stmtNum);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":33}},{"path":"Team19/Code19/src/spa/src/pkb/readers/patterns/AssignPatternReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/IAssignPatternReader.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/AssignPatternStore.h\""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"class AssignPatternReader : public IAssignPatternReader {"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternStore\u003e assignPatternStore;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit AssignPatternReader(std::shared_ptr\u003cAssignPatternStore\u003e store) : assignPatternStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003eisEmpty();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::string getLHS(int statementNumber) override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetLHS(statementNumber);"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    std::string getRHS(int statementNumber) override {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetRHS(statementNumber);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::pair\u003cstd::string, std::string\u003e\u003e getAllPatterns() override {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetAllPatterns();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    std::pair\u003cstd::string, std::string\u003e getPattern(int statementNumber) override {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetPattern(statementNumber);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    bool contains(int statementNumber) override {"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003econtains(statementNumber);"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHS(const std::string\u0026 LHS) override {"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetStatementNumbersWithLHS(LHS);"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithRHS(const std::string\u0026 RHS) override {"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetStatementNumbersWithRHS(RHS);"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithPartialRHS(const std::string\u0026 partialRHS) override {"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetStatementNumbersWithPartialRHS(partialRHS);"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHSRHS (const std::string\u0026 LHS, const std::string\u0026 RHS) override {"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetStatementNumbersWithLHSRHS(LHS, RHS);"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHSPartialRHS (const std::string\u0026 LHS, const std::string\u0026 partialRHS) override {"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        return assignPatternStore-\u003egetStatementNumbersWithLHSPartialRHS(LHS, partialRHS);"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":57}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/FollowsReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/FollowsStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class FollowsReader: public IRelationshipReader\u003cint, int\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsStore\u003e followsStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit FollowsReader(std::shared_ptr\u003cFollowsStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      followsStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // Inherited methods"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003eisEmpty();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetKeyValueRelationships();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetValueKeyRelationships();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"      return getAllPreFollows();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getValues() override {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"      return getAllPostFollows();"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(int stmtNum) override {"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"      return getPreFollows(stmtNum);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByKey(int stmtNum) override {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"      return getPostFollows(stmtNum);"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    bool hasRelationship(int stmt1, int stmt2) override {"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"      return hasFollows(stmt1, stmt2);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    // Custom methods"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the preceding statement numbers of all \"Follows\" relationships."},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s1 in Follows(s1, s2)"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllPreFollows() {"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetKeys();"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the post statement numbers of all \"Follows\" relationships."},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s2 in Follows(s1, s2)"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllPostFollows() {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetValues();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the statement number of reversed \"Follows\" relationships of the given statement."},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * @param stmt"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement number of all s1 in Follows(s1, stmt)"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getPreFollows(int stmt) {"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetRelationshipsByValue(stmt);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the statement number of \"Follows\" relationships of the given statement."},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * @param stmt: stmt in Follows(stmt, s2)"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of all s2 in Follows(stmt, s2)"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getPostFollows(int stmt) {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003egetRelationshipsByKey(stmt);"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     * @brief Checks if a specific \"Follows\" relationship exists between a given statement and another statement."},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @param stmt1 The statement number of the first statement."},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     * @param stmt2 The statement number of the second statement."},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"     * @return true if the \"Follows\" relationship exists, false otherwise."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    bool hasFollows(int stmt1, int stmt2) {"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"      return followsStore-\u003ehasRelationship(stmt1, stmt2);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":92}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/FollowsTReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/FollowsTStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class FollowsTReader: public IRelationshipReader\u003cint, int\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cFollowsTStore\u003e followsTStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit FollowsTReader(std::shared_ptr\u003cFollowsTStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      followsTStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // Inherited methods"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003eisEmpty();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetKeyValueRelationships();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetValueKeyRelationships();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"      return getAllPreFollowsT();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getValues() override {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"      return getAllPostFollowsT();"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(int stmtNum) override {"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"      return getPreFollowsT(stmtNum);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByKey(int stmtNum) override {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"      return getPostFollowsT(stmtNum);"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    bool hasRelationship(int stmt1, int stmt2) override {"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"      return hasFollowsT(stmt1, stmt2);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    // Custom methods"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the preceding statement numbers of all \"FollowsT\" relationships."},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s1 in FollowsT(s1, s2)"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllPreFollowsT() {"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetKeys();"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the post statement numbers of all \"FollowsT\" relationships."},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s2 in FollowsT(s1, s2)"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllPostFollowsT() {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetValues();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the set of statements number of reversed \"FollowsT\" relationships of the given statement."},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * @param stmt"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement number of all s1 in FollowsT(s1, stmt)"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getPreFollowsT(int stmt) {"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetRelationshipsByValue(stmt);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the set of statements number of \"FollowsT\" relationships of the given statement."},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * @param stmt: stmt in FollowsT(stmt, s2)"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of all s2 in FollowsT(stmt, s2)"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getPostFollowsT(int stmt) {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003egetRelationshipsByKey(stmt);"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     * @brief Checks if a specific \"FollowsT\" relationship exists between two statements."},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @param stmt1: The statement number of the first statement."},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     * @param stmt2: The statement number of the second statement."},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"     * @return true if the \"FollowsT\" relationship exists, false otherwise."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    bool hasFollowsT(int stmt1, int stmt2) {"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"      return followsTStore-\u003ehasRelationship(stmt1, stmt2);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":92}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/ModifiesPReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"class ModifiesPReader : public IRelationshipReader\u003cstd::string, std::string\u003e {"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cModifiesPStore\u003e store;"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    explicit ModifiesPReader(std::shared_ptr\u003cModifiesPStore\u003e store) : store(std::move(store)) {}"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    bool isEmpty() override {"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003eisEmpty();"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cstd::string\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeyValueRelationships();"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cstd::string\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValueKeyRelationships();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByKey(std::string key) override {"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByKey(key);"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByValue(std::string value) override {"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByValue(value);"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"    bool hasRelationship(std::string key, std::string value) override {"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003ehasRelationship(key, value);"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getKeys() override {"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeys();"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getValues() override {"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValues();"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":39}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/ModifiesSReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ModifiesSStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @class ModifiesSReader"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * @brief Reader class for accessing \"Modifies\" relationships involving statements."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * This class provides read-only access to the \"Modifies\" relationships where"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * statements modify variables. It utilizes the ModifiesSStore to query these relationships."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Inherits from IRelationshipReader to provide a consistent interface for relationship queries."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class ModifiesSReader : public IRelationshipReader\u003cint, std::string\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cModifiesSStore\u003e store;"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    explicit ModifiesSReader(std::shared_ptr\u003cModifiesSStore\u003e store) : store(std::move(store)) {}"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"    bool isEmpty() override {"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003eisEmpty();"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cstd::string\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeyValueRelationships();"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValueKeyRelationships();"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByKey(int key) override {"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByKey(key);"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(std::string value) override {"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByValue(value);"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"    bool hasRelationship(int key, std::string value) override {"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003ehasRelationship(key, value);"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeys();"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getValues() override {"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValues();"},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":53}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/ParentReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class ParentReader: public IRelationshipReader\u003cint, int\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentStore\u003e parentStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit ParentReader(std::shared_ptr\u003cParentStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      parentStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // Inherited methods"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003eisEmpty();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetKeyValueRelationships();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetValueKeyRelationships();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"      return getAllParents();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getValues() override {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"      return getAllChildren();"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(int stmtNum) override {"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"      return getParent(stmtNum);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByKey(int stmtNum) override {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"      return getChild(stmtNum);"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    bool hasRelationship(int stmt1, int stmt2) override {"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"      return hasParent(stmt1, stmt2);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    // Custom methods"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the parent statement numbers of all \"Parent\" relationships."},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s1 in Parent(s1, s2)"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllParents() {"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetKeys();"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the child statement numbers of all \"Parent\" relationships."},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s2 in Parent(s1, s2)"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllChildren() {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetValues();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the statement number of parent of the given child statement."},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * @param stmt"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement number of all s1 in Parent*(s1, stmt)"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getParent(int child) {"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetRelationshipsByValue(child);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the statement number of the child of the given parent statement."},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * @param stmt: stmt in Parent(stmt, s2)"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of all s2 in Parent(stmt, s2)"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getChild(int parent) {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003egetRelationshipsByKey(parent);"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     * @brief Checks if a specific relationship exists between a parent and a child."},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @param parent The parent part of the relationship to check."},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     * @param child The child part of the relationship to check."},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"     * @return true if the relationship exists, false otherwise."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    bool hasParent(int parent, int child) {"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"      return parentStore-\u003ehasRelationship(parent, child);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":92}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/ParentTReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentTStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class ParentTReader: public IRelationshipReader\u003cint, int\u003e {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTStore\u003e parentTStore;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    explicit ParentTReader(std::shared_ptr\u003cParentTStore\u003e store) {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"      parentTStore \u003d std::move(store);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // Inherited methods"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003eisEmpty();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetKeyValueRelationships();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetValueKeyRelationships();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"      return getAllParentTs();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getValues() override {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"      return getAllChildrenT();"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(int stmtNum) override {"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"      return getParentT(stmtNum);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByKey(int stmtNum) override {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"      return getChildT(stmtNum);"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    bool hasRelationship(int stmt1, int stmt2) override {"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"      return hasParentT(stmt1, stmt2);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    // Custom methods"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the parentT statement numbers of all \"ParentT\" relationships."},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s1 in ParentT(s1, s2)"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllParentTs() {"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetKeys();"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the childT statement numbers of all \"ParentT\" relationships."},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of s2 in ParentT(s1, s2)"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getAllChildrenT() {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetValues();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the set of statement numbers of parentT of the given childT statement."},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * @param stmt"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement number of all s1 in ParentT(s1, stmt)"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getParentT(int child) {"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetRelationshipsByValue(child);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * @brief Gets the set of statement number of the children of the given parentT statement."},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * @param stmt: stmt in ParentT(stmt, s2)"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @return unordered_set\u003cint\u003e: The set of statement numbers of all s2 in ParentT(stmt, s2)"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getChildT(int parentT) {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003egetRelationshipsByKey(parentT);"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     * @brief Checks if a specific \"ParentT\" relationship exists between a parentT and a childT."},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @param parentT The parentT part of the relationship to check."},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     * @param childT The childT part of the relationship to check."},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"     * @return true if the relationship exists, false otherwise."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    bool hasParentT(int parentT, int childT) {"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"      return parentTStore-\u003ehasRelationship(parentT, childT);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":92}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/UsesPReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesPStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Provides read-only access to the Uses relationships for procedures."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Specifically, it accesses data about which procedures use which variables."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"class UsesPReader : public IRelationshipReader\u003cstd::string, std::string\u003e {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cUsesPStore\u003e store; // Store for Uses relationships involving procedures."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    explicit UsesPReader(std::shared_ptr\u003cUsesPStore\u003e store) : store(std::move(store)) {}"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"    bool isEmpty() override {"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003eisEmpty();"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cstd::string\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeyValueRelationships();"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cstd::string\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValueKeyRelationships();"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByKey(std::string key) override {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByKey(key);"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByValue(std::string value) override {"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByValue(value);"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"    bool hasRelationship(std::string key, std::string value) override {"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003ehasRelationship(key, value);"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getKeys() override {"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeys();"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getValues() override {"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValues();"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":52}},{"path":"Team19/Code19/src/spa/src/pkb/readers/relationships/UsesSReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/IRelationshipReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesSStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"class UsesSReader : public IRelationshipReader\u003cint, std::string\u003e {"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cUsesSStore\u003e store; // Store for Uses relationships involving statements."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    explicit UsesSReader(std::shared_ptr\u003cUsesSStore\u003e store) : store(std::move(store)) {}"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    bool isEmpty() override {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003eisEmpty();"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cint, std::unordered_set\u003cstd::string\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeyValueRelationships();"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cint\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValueKeyRelationships();"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getRelationshipsByKey(int key) override {"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByKey(key);"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cint\u003e getRelationshipsByValue(std::string value) override {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetRelationshipsByValue(value);"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"    bool hasRelationship(int key, std::string value) override {"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003ehasRelationship(key, value);"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cint\u003e getKeys() override {"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetKeys();"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cstd::string\u003e getValues() override {"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        return store-\u003egetValues();"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":48}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/EntityStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"IEntityReader.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * @brief A store that manages a collection of entities of a certain type."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * @tparam EntityType The type of entities being stored."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"template \u003ctypename EntityType\u003e"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class EntityStore : public IEntityReader\u003cEntityType\u003e, public IEntityWriter\u003cEntityType\u003e {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cEntityType\u003e entities;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    // IEntityWriter implementation"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    bool addEntity(EntityType entity) override {"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        return entities.insert(entity).second;"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"    void clear() override {"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        entities.clear();"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"    // IEntityReader implementation"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"    bool isEmpty() const override {"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        return entities.empty();"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"    bool contains(EntityType entity) const override {"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        return entities.find(entity) !\u003d entities.end();"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"    std::unordered_set\u003cEntityType\u003e getAllEntities() const override {"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        return entities;"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"shurvirarora":30,"jianoway":9}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/IEntityReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @brief Interface for reading entities from a store."},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * @tparam EntityType The type of the entity being managed."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"template \u003ctypename EntityType\u003e"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"class IEntityReader {"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    // Checks if the store is empty."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    virtual bool isEmpty() const \u003d 0;"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Checks if the store contains a given entity."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    virtual bool contains(EntityType entity) const \u003d 0;"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    // Retrieves all entities from the store."},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    virtual std::unordered_set\u003cEntityType\u003e getAllEntities() const \u003d 0;"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"shurvirarora":13,"jianoway":8}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/IEntityWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":" * @brief Interface for writing entities into a store."},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @tparam EntityType The type of the entity being managed."},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"template \u003ctypename EntityType\u003e"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"class IEntityWriter {"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    // Adds an entity to the store."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    virtual bool addEntity(EntityType entity) \u003d 0;"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    // Clears all entities from the store."},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    virtual void clear() \u003d 0;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"shurvirarora":9,"jianoway":7}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/AssignStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class AssignStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Assign\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027Assign\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class AssignStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Assign\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/CallStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class CallStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Call\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027Call\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class CallStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Call\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/ConstantStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class ConstantStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Constant\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of constants used in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE constants."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class ConstantStore: public EntityStore\u003cint\u003e {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Constant\u0027 Entity."},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":16}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/IfStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class IfStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027If\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027If\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class IfStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027If\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/PrintStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class PrintStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Print\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027Print\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class PrintStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Print\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/ProcedureStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * @class ProcedureStore"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Procedure\u0027 entity."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of procedures declared in a SIMPLE program."},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to string, representing SIMPLE procedure names."},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"class ProcedureStore: public EntityStore\u003cstd::string\u003e {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Procedure\u0027 Entity."},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":18}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/ReadStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class ReadStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Read\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027Read\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class ReadStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Read\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/StatementStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class StatementStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Statement\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class StatementStore: public EntityStore\u003cint\u003e {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Statement\u0027 Entity."},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":16}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/VariableStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * @class VariableStore"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027Variable\u0027 entity."},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of variable names in a SIMPLE program."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to string, representing SIMPLE variable names."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class VariableStore: public EntityStore\u003cstd::string\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027Variable\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/entities/types/WhileStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * @class WhileStore"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * Specialization of EntityStore for \u0027While\u0027 entity."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This store manages the collection of statement numbers in a SIMPLE program"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * that are of type \u0027While\u0027."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * Inherits all functionalities from EntityStore."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"class WhileStore: public EntityStore\u003cint\u003e {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    // This class can be used to instantiate an EntityStore"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    // specific for the \u0027While\u0027 Entity."},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/patterns/assign/AssignPatternStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cutility\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"#include \"pkb/templates/TemplateMapSet.h\""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"#include \"string\""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"#include \"IAssignPatternReader.h\""},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"#include \"IAssignPatternWriter.h\""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * @brief A store for managing assign patterns."},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class AssignPatternStore : public IAssignPatternReader, IAssignPatternWriter {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::string\u003e LHSMap;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::string\u003e RHSMap;"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    // Adds an assign pattern to the store."},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    void addAssignPattern(int statementNumber, std::string LHS, std::string RHS) override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        LHSMap[statementNumber] \u003d std::move(LHS);"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        RHSMap[statementNumber] \u003d std::move(RHS);"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    // Clears all assign patterns from the store."},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        LHSMap.clear();"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        RHSMap.clear();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    // Checks if the store is empty."},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        return LHSMap.empty() \u0026\u0026 RHSMap.empty();"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    // Retrieves the assign pattern for a given statement number."},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    std::pair\u003cstd::string, std::string\u003e getPattern(int statementNumber) override {"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        return std::make_pair(LHSMap[statementNumber], RHSMap[statementNumber]);"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    // Retrieves all assign patterns from the store."},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cint, std::pair\u003cstd::string, std::string\u003e\u003e getAllPatterns() override {"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        std::unordered_map\u003cint, std::pair\u003cstd::string, std::string\u003e\u003e result;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : LHSMap) {"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"            result[key] \u003d std::make_pair(value, RHSMap.at(key));"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    // Get LHS of the assign pattern for a given statement number."},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    std::string getLHS(int statementNumber) override {"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        return LHSMap.at(statementNumber);"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    // Get RHS of the assign pattern for a given statement number."},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"    std::string getRHS(int statementNumber) override {"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        return RHSMap.at(statementNumber);"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a given assign pattern."},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    bool contains(int statementNumber) override {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        return LHSMap.find(statementNumber) !\u003d LHSMap.end();"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a LHS and returns the set of statement numbers that contain the LHS."},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHS(const std::string\u0026 LHS) override {"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        std::unordered_set\u003cint\u003e result;"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : LHSMap) {"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"            if (value \u003d\u003d LHS) {"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"                result.insert(key);"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a RHS and returns the set of statement numbers that contain the RHS."},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithRHS(const std::string\u0026 RHS) override {"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        std::unordered_set\u003cint\u003e result;"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : RHSMap) {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"            if (value \u003d\u003d RHS) {"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"                result.insert(key);"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a partial RHS and returns the set of statement numbers that contain the partial RHS."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithPartialRHS(const std::string\u0026 RHS) override {"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"        std::unordered_set\u003cint\u003e result;"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : RHSMap) {"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"            if (value.find(RHS) !\u003d std::string::npos) {"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"                result.insert(key);"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a LHS and RHS and returns the set of statement numbers that contain the LHS and RHS."},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHSRHS(const std::string\u0026LHS, const std::string\u0026 RHS) override {"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        std::unordered_set\u003cint\u003e result;"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : LHSMap) {"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"            if (value \u003d\u003d LHS \u0026\u0026 RHSMap.at(key) \u003d\u003d RHS) {"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"                result.insert(key);"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    // Checks if the store contains a LHS and a partial RHS and returns the set of statement numbers that contain the LHS and partial RHS."},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cint\u003e getStatementNumbersWithLHSPartialRHS(const std::string\u0026 LHS, const std::string\u0026 RHS) override {"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"        std::unordered_set\u003cint\u003e result;"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 [key, value] : LHSMap) {"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"            if (value \u003d\u003d LHS \u0026\u0026 RHSMap.at(key).find(RHS) !\u003d std::string::npos) {"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"                result.insert(key);"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"        return result;"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":118}},{"path":"Team19/Code19/src/spa/src/pkb/stores/patterns/assign/IAssignPatternReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cstring\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class IAssignPatternReader {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    virtual bool isEmpty() \u003d 0;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    virtual std::string getLHS(int statementNumber) \u003d 0;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    virtual std::string getRHS(int statementNumber) \u003d 0;"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_map\u003cint, std::pair\u003cstd::string, std::string\u003e\u003e getAllPatterns() \u003d 0;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    virtual std::pair\u003cstd::string, std::string\u003e getPattern(int statementNumber) \u003d 0;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    virtual bool contains(int statementNumber) \u003d 0;"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cint\u003e getStatementNumbersWithLHS(const std::string\u0026 LHS) \u003d 0;"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cint\u003e getStatementNumbersWithRHS(const std::string\u0026 RHS) \u003d 0;"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cint\u003e getStatementNumbersWithPartialRHS(const std::string\u0026 partialRHS) \u003d 0;"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cint\u003e getStatementNumbersWithLHSRHS (const std::string\u0026 LHS, const std::string\u0026 RHS) \u003d 0;"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cint\u003e getStatementNumbersWithLHSPartialRHS (const std::string\u0026 LHS, const std::string\u0026 partialRHS) \u003d 0;"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":30}},{"path":"Team19/Code19/src/spa/src/pkb/stores/patterns/assign/IAssignPatternWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"class IAssignPatternWriter {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    virtual void addAssignPattern(int statementNumber, std::string LHS, std::string RHS) \u003d 0;"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    virtual void clear() \u003d 0;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":11}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/IRelationshipReader.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @brief Interface for reading key-value relationships."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * This interface defines the contract for a component that can read relationships"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * between keys and values, where a single key may be associated with multiple values,"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * and vice versa."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * @tparam KeyType The data type of the key in the relationship."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" * @tparam ValueType The data type of the value in the relationship."},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"class IRelationshipReader {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"     * Checks if there are any relationships stored."},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"     * @return true if no relationships exist, false otherwise."},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    virtual bool isEmpty() \u003d 0;"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"     * Retrieves all relationships in a map where each key is associated with a set of values."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"     * @return A map of keys to sets of values."},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_map\u003cKeyType, std::unordered_set\u003cValueType\u003e\u003e getKeyValueRelationships() \u003d 0;"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"     * Retrieves all relationships in a map where each value is associated with a set of keys."},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"     * @return A map of values to sets of keys."},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_map\u003cValueType, std::unordered_set\u003cKeyType\u003e\u003e getValueKeyRelationships() \u003d 0;"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"     * Retrieves all values associated with a given key."},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"     * @param key The key to retrieve values for."},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"     * @return A set of values associated with the key."},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cValueType\u003e getRelationshipsByKey(KeyType key) \u003d 0;"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"     * Retrieves all keys associated with a given value."},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"     * @param value The value to retrieve keys for."},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"     * @return A set of keys associated with the value."},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cKeyType\u003e getRelationshipsByValue(ValueType value) \u003d 0;"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"     * Checks if a specific relationship exists between a key and a value."},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"     * @param key The key part of the relationship to check."},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":"     * @param value The value part of the relationship to check."},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"     * @return true if the relationship exists, false otherwise."},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    virtual bool hasRelationship(KeyType key, ValueType value) \u003d 0;"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"     * Retrieves all keys in the store."},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"     * @return A set of keys."},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cKeyType\u003e getKeys() \u003d 0;"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * Retrieves all values in the store."},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return A set of values."},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cValueType\u003e getValues() \u003d 0;"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"shurvirarora":45,"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/IRelationshipWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":" * @brief Interface for writing key-value relationships."},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * This interface defines the contract for a component that can add relationships"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * between keys and values. Each key can be associated with multiple values."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * @tparam KeyType The data type of the key in the relationship."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * @tparam ValueType The data type of the value in the relationship."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class IRelationshipWriter {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"     * Adds a relationship between a key and a value."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"     * If the key already exists, the value is added to the existing set of values."},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"     * If the key does not exist, it is created and associated with the value."},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"     * @param key The key to associate the value with."},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"     * @param value The value to be associated with the key."},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    virtual void addRelationship(KeyType key, ValueType value) \u003d 0;"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    // Clears all entities from the store."},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    virtual void clear() \u003d 0;"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"shurvirarora":17,"jianoway":10}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/RelationshipStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/templates/TemplateMapSet.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"IRelationshipReader.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"IRelationshipWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"class RelationshipStore: public IRelationshipReader\u003cKeyType, ValueType\u003e , public IRelationshipWriter\u003cKeyType, ValueType\u003e {"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    TemplateMapSet\u003cKeyType, ValueType\u003e keyToValueMap;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    TemplateMapSet\u003cValueType, KeyType\u003e valueToKeyMap;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"     * Check if the store is empty"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"     * @return true if the store is empty, false otherwise"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        return keyToValueMap.isEmpty();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * Check if the Relationship exists for a given key-value pair"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param key"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * @param value"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     * @return true if the Relationship exists, false otherwise"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    bool hasRelationship(KeyType key, ValueType value) override {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        return keyToValueMap.hasKeyValue(key, value);"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     * Add a relationship to the store"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param key"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param value"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    void addRelationship(KeyType key, ValueType value) override {"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        keyToValueMap.addKeyValue(key, value);"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        valueToKeyMap.addKeyValue(value, key);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"     * Get all key-value relationships"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"     * @return map of key-value relationships"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cKeyType, std::unordered_set\u003cValueType\u003e\u003e getKeyValueRelationships() override {"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        return keyToValueMap.getMapSet();"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * Get all value-key relationships"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     * @return map of value-key relationships"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cValueType, std::unordered_set\u003cKeyType\u003e\u003e getValueKeyRelationships() override {"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"        return valueToKeyMap.getMapSet();"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     * Get all keys in the store"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     * @return set of keys"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cKeyType\u003e getKeys() override {"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        return keyToValueMap.getKeys();"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"     * Get all values in the store"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"     * @return set of values"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cValueType\u003e getValues() override {"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        return valueToKeyMap.getKeys();"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"     * Get all values related to a given key"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"     * @param key"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"     * @return The set of values related to the given key"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cValueType\u003e getRelationshipsByKey(KeyType key) override {"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        return keyToValueMap.getValuesByKey(key);"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     * Get all keys related to a given value"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     * @param value"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"     * @return"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cKeyType\u003e getRelationshipsByValue(ValueType value) override {"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        return valueToKeyMap.getValuesByKey(value);"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    };"},{"lineNumber":85,"author":{"gitId":"shurvirarora"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"shurvirarora"},"content":"     * Clears all stored relationships from the store."},{"lineNumber":87,"author":{"gitId":"shurvirarora"},"content":"     * This method resets both the key-to-value and value-to-key mappings, effectively"},{"lineNumber":88,"author":{"gitId":"shurvirarora"},"content":"     * removing all relationships."},{"lineNumber":89,"author":{"gitId":"shurvirarora"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":91,"author":{"gitId":"shurvirarora"},"content":"        keyToValueMap.clear();"},{"lineNumber":92,"author":{"gitId":"shurvirarora"},"content":"        valueToKeyMap.clear();"},{"lineNumber":93,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"};"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":""}],"authorContributionMap":{"shurvirarora":8,"jianoway":87}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/FollowsStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @class FollowsStore"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Specialization of RelationshipStore for \u0027Follows\u0027 relationships."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * This store manages direct \u0027Follows\u0027 relationships where one statement"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * directly follows another in a SIMPLE program."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Inherits all functionalities from RelationshipStore."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"class FollowsStore: public RelationshipStore\u003cint, int\u003e {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    // This class can be used to instantiate a RelationshipStore"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // specific for the \u0027Follows\u0027 relationship between statements."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":13,"jianoway":4}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/FollowsTStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @class FollowsTStore"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Specialization of RelationshipStore for transitive \u0027Follows*\u0027 relationships."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * This store manages transitive \u0027Follows*\u0027 relationships where a statement"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * follows another either directly or through a series of statements in a SIMPLE program."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Inherits all functionalities from RelationshipStore."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"class FollowsTStore: public RelationshipStore\u003cint, int\u003e {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    // This class can be used to instantiate a RelationshipStore"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // specific for the \u0027Follows*\u0027 relationship between statements."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":13,"jianoway":4}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/ModifiesPStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @class ModifiesPStore"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * Manages \"Modifies\" relationships for procedures in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * This store captures relationships where a procedure modifies a certain variable."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Inherits from RelationshipStore\u003cstd::string, std::string\u003e to provide"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * functionality for managing relationships between procedures (identified by name)"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * and the variables they modify."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class ModifiesPStore : public RelationshipStore\u003cstd::string, std::string\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Additional functionality specific to procedure-variable modifications can be added here"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/ModifiesSStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @class ModifiesSStore"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * Manages \"Modifies\" relationships for statements in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * This store captures relationships where a particular statement (identified by number)"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * modifies a certain variable."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Inherits from RelationshipStore\u003cint, std::string\u003e to provide"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * functionality for managing relationships between statement numbers and variables."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class ModifiesSStore : public RelationshipStore\u003cint, std::string\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Additional functionality specific to statement-variable modifications can be added here"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/ParentStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @class ParentStore"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Specialization of RelationshipStore for \u0027Parent\u0027 relationships."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * This store manages the \u0027Parent\u0027 relationships where one statement"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * is directly nested within another statement in a SIMPLE program."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Inherits all functionalities from RelationshipStore."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"class ParentStore : public RelationshipStore\u003cint, int\u003e {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    // This class can be used to instantiate a RelationshipStore"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // specific for the \u0027Parent\u0027 relationship between statements."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/ParentTStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" * @class ParentTStore"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Specialization of RelationshipStore for transitive \u0027Parent*\u0027 relationships."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * This store manages the \u0027Parent*\u0027 relationships where one statement"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * is nested within another statement, either directly or indirectly through"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * multiple levels of nesting in a SIMPLE program."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Inherits all functionalities from RelationshipStore."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * Template parameters are set to int, representing SIMPLE statement numbers."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class ParentTStore : public RelationshipStore\u003cint, int\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // This class can be used to instantiate a RelationshipStore"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    // specific for the \u0027Parent*\u0027 relationship between statements."},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":18}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/UsesPStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @class UsesPStore"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * Manages \"Uses\" relationships for procedures in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * This store captures relationships where a procedure uses a certain variable."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * Inherits from RelationshipStore\u003cstd::string, std::string\u003e to provide"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * functionality for managing relationships between procedures (identified by name)"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * and the variables they use."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class UsesPStore : public RelationshipStore\u003cstd::string, std::string\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":17}},{"path":"Team19/Code19/src/spa/src/pkb/stores/relationships/types/UsesSStore.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * @class UsesSStore"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * Manages \"Uses\" relationships for statements in a SIMPLE program."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * This store captures relationships where a particular statement (identified by number)"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * uses a certain variable."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * Inherits from RelationshipStore\u003cint, std::string\u003e to provide"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" * functionality for managing relationships between statement numbers and variables."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"class UsesSStore : public RelationshipStore\u003cint, std::string\u003e {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":17}},{"path":"Team19/Code19/src/spa/src/pkb/templates/TemplateMapSet.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * @brief Template class for key-set of values store."},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" *"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * @tparam KeyType Type of keys in the TemplateMapSet."},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * @tparam ValueType Type of values in the TemplateMapSet."},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"class TemplateMapSet {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cKeyType, std::unordered_set\u003cValueType\u003e\u003e map;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * @brief Construct an empty TemplateMapSet."},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    TemplateMapSet();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @brief Checks if the TemplateMapSet is empty."},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"     * @brief Get all values in the TemplateMapSet."},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"     * @return Map of all key-values in the TemplateMapSet."},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    bool isEmpty() {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        return this-\u003emap.empty();"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    std::unordered_map\u003cKeyType, std::unordered_set\u003cValueType\u003e\u003e getMapSet();"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"     * @brief Get all keys in the TemplateMapSet."},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"     * @return Set of all keys in the TemplateMapSet."},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cKeyType\u003e getKeys();"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"     * @brief Get all values in the TemplateMapSet."},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * @return Set of all values in the TemplateMapSet."},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cValueType\u003e getValues();"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     * @brief Get the set of values associated with the given key."},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     * @param key Key to search for."},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     * @return Set of values associated with the given key."},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    std::unordered_set\u003cValueType\u003e getValuesByKey(KeyType key);"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     * @brief Check if the given key exists in the TemplateMapSet."},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"     * @param key Key to search for."},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"     * @return True if the key exists in the TemplateMapSet, false otherwise."},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    bool hasKey(KeyType key);"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @brief Check if the given value exists in the TemplateMapSet for a given key."},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"     * @param key Key to search for."},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"     * @param value Value to search for."},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"     * @return True if the value exists in the TemplateMapSet, false otherwise."},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    bool hasKeyValue(KeyType key, ValueType value);"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @brief Add a key-value pair to the TemplateMapSet."},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     * @param key Key to add."},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     * @param value Value to add."},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"    void addKeyValue(KeyType key, ValueType value);"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @brief Remove the key-value pair associated with the given key from the TemplateMapSet."},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"     * @param key Key to remove."},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    void remove(KeyType key);"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"     * @brief Clear all key-value pairs from the TemplateMapSet."},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    void clear();"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"};"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"/**"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":" * Default implementations for TemplateMapSet\u0027s methods."},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":" */"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"TemplateMapSet\u003cKeyType, ValueType\u003e::TemplateMapSet() \u003d default;"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"std::unordered_map\u003cKeyType, std::unordered_set\u003cValueType\u003e\u003e TemplateMapSet\u003cKeyType, ValueType\u003e::getMapSet() {"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    return this-\u003emap;"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"std::unordered_set\u003cKeyType\u003e TemplateMapSet\u003cKeyType, ValueType\u003e::getKeys() {"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"  std::unordered_set\u003cKeyType\u003e keys;"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"    for (auto const\u0026 pair : this-\u003emap) {"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"        keys.insert(pair.first);"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    return keys;"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"std::unordered_set\u003cValueType\u003e TemplateMapSet\u003cKeyType, ValueType\u003e::getValues() {"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"  std::unordered_set\u003cValueType\u003e values;"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"    for (auto const\u0026 pair : this-\u003emap) {"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        for (auto const\u0026 value : pair.second) {"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"            values.insert(value);"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"    return values;"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"std::unordered_set\u003cValueType\u003e TemplateMapSet\u003cKeyType, ValueType\u003e::getValuesByKey(KeyType key) {"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"    return this-\u003emap[key];"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"bool TemplateMapSet\u003cKeyType, ValueType\u003e::hasKey(KeyType key) {"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"    return this-\u003emap.find(key) !\u003d this-\u003emap.end();"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"bool TemplateMapSet\u003cKeyType, ValueType\u003e::hasKeyValue(KeyType key, ValueType value) {"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"    return this-\u003emap[key].find(value) !\u003d this-\u003emap[key].end();"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"void TemplateMapSet\u003cKeyType, ValueType\u003e::addKeyValue(KeyType key, ValueType value) {"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"    this-\u003emap[key].insert(value);"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"void TemplateMapSet\u003cKeyType, ValueType\u003e::remove(KeyType key) {"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"    this-\u003emap.erase(key);"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"}"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"template \u003ctypename KeyType, typename ValueType\u003e"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"void TemplateMapSet\u003cKeyType, ValueType\u003e::clear() {"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"    this-\u003emap.clear();"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":155}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/AssignWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/types/AssignStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"class AssignWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cAssignStore\u003e assignStore;"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    explicit AssignWriter(std::shared_ptr\u003cAssignStore\u003e as) : assignStore(std::move(as)) {}"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        return insertAssign(entity);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        assignStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"    bool insertAssign(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        return assignStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/CallWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/CallStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class CallWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallStore\u003e callStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit CallWriter(std::shared_ptr\u003cCallStore\u003e cs) : callStore(std::move(cs)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertCall(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      callStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertCall(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return callStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/ConstantWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/types/ConstantStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"class ConstantWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cConstantStore\u003e constantStore;"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    explicit ConstantWriter(std::shared_ptr\u003cConstantStore\u003e cs) : constantStore(std::move(cs)) {}"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        return insertConstant(entity);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        constantStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"    bool insertConstant(int constantValue) {"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        return constantStore-\u003eaddEntity(constantValue);"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/IfWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/IfStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class IfWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfStore\u003e ifStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit IfWriter(std::shared_ptr\u003cIfStore\u003e is) : ifStore(std::move(is)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertIf(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      ifStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertIf(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return ifStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/PrintWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/PrintStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class PrintWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintStore\u003e printStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit PrintWriter(std::shared_ptr\u003cPrintStore\u003e ps) : printStore(std::move(ps)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertPrint(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      printStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertPrint(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return printStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/ProcedureWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/types/ProcedureStore.h\""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"class ProcedureWriter: public IEntityWriter\u003cstd::string\u003e {"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cProcedureStore\u003e procedureStore;"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    explicit ProcedureWriter(std::shared_ptr\u003cProcedureStore\u003e ps) : procedureStore(std::move(ps)) {}"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    bool addEntity(std::string entity) override {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        return insertProcedure(entity);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        procedureStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"    bool insertProcedure(const std::string\u0026 procedureName) {"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        return procedureStore-\u003eaddEntity(procedureName);"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/ReadWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/ReadStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class ReadWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadStore\u003e readStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit ReadWriter(std::shared_ptr\u003cReadStore\u003e rs) : readStore(std::move(rs)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertRead(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      readStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertRead(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return readStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/StatementWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/StatementStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class StatementWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementStore\u003e statementStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit StatementWriter(std::shared_ptr\u003cStatementStore\u003e ss) : statementStore(std::move(ss)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertStatement(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      statementStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertStatement(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return statementStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/VariableWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cutility\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/VariableStore.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"class VariableWriter: public IEntityWriter\u003cstd::string\u003e {"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableStore\u003e variableStore;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"  explicit VariableWriter(std::shared_ptr\u003cVariableStore\u003e vs) {"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    variableStore \u003d std::move(vs);"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"  bool addEntity(std::string entity) override {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    return insertVariable(entity);"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"  void clear() override {"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    variableStore-\u003eclear();"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"  bool insertVariable (std::string \u0026variable) {"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    return variableStore-\u003eaddEntity(variable);"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":27}},{"path":"Team19/Code19/src/spa/src/pkb/writers/entities/WhileWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/types/WhileStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/IEntityWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class WhileWriter: public IEntityWriter\u003cint\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileStore\u003e whileStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    explicit WhileWriter(std::shared_ptr\u003cWhileStore\u003e ws) : whileStore(std::move(ws)) {}"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    bool addEntity(int entity) override {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"      return insertWhile(entity);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"      whileStore-\u003eclear();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    bool insertWhile(int stmtNum) {"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"      return whileStore-\u003eaddEntity(stmtNum);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/src/spa/src/pkb/writers/patterns/AssignPatternWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/IAssignPatternWriter.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/AssignPatternStore.h\""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"class AssignPatternWriter : public IAssignPatternWriter {"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignPatternStore\u003e assignPatternStore;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit AssignPatternWriter(std::shared_ptr\u003cAssignPatternStore\u003e store) : assignPatternStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addAssignPattern(int statementNumber, std::string LHS, std::string RHS) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"      assignPatternStore-\u003eaddAssignPattern(statementNumber, LHS, RHS);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    // Clears all assign patterns from the store."},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"      assignPatternStore-\u003eclear();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":22}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/FollowsTWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/FollowsTStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"class FollowsTWriter : public IRelationshipWriter\u003cint, int\u003e {"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cFollowsTStore\u003e followsTStore;"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    explicit FollowsTWriter(std::shared_ptr\u003cFollowsTStore\u003e store) : followsTStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    void addRelationship(int precedingStmt, int followingStmt) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"      addFollowsT(precedingStmt, followingStmt);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"      followsTStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addFollowsT(int stmtNum, int followingStmt) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      followsTStore-\u003eaddRelationship(stmtNum, followingStmt);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":19,"jianoway":6}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/FollowsWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/FollowsStore.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"class FollowsWriter : public IRelationshipWriter\u003cint, int\u003e {"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    std::shared_ptr\u003cFollowsStore\u003e followsStore;"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    explicit FollowsWriter(std::shared_ptr\u003cFollowsStore\u003e store) : followsStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    void addRelationship(int precedingStmt, int followingStmt) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addFollows(precedingStmt, followingStmt);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        followsStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addFollows(int stmtNum, int followingStmt) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        followsStore-\u003eaddRelationship(stmtNum, followingStmt);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"};"}],"authorContributionMap":{"shurvirarora":19,"jianoway":6}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/ModifiesPWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ModifiesPStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class ModifiesPWriter : public IRelationshipWriter\u003cstd::string , std::string\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesPStore\u003e modifiesPStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit ModifiesPWriter(std::shared_ptr\u003cModifiesPStore\u003e store) : modifiesPStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(std::string proc, std::string var) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addModifiesP(proc, var);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"      modifiesPStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addModifiesP(std::string proc, std::string var) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      modifiesPStore-\u003eaddRelationship(proc, var);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/ModifiesSWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ModifiesSStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class ModifiesSWriter : public IRelationshipWriter\u003cint , std::string\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cModifiesSStore\u003e modifiesSStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit ModifiesSWriter(std::shared_ptr\u003cModifiesSStore\u003e store) : modifiesSStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(int stmtNum, std::string var) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addModifiesP(stmtNum, var);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"      modifiesSStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addModifiesP(int stmtNum, std::string var) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      modifiesSStore-\u003eaddRelationship(stmtNum, var);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/ParentTWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentTStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class ParentTWriter : public IRelationshipWriter\u003cint, int\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentTStore\u003e parentTStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit ParentTWriter(std::shared_ptr\u003cParentTStore\u003e store) : parentTStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(int parent, int child) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addParentT(parent, child);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        parentTStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addParentT(int parent, int child) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        parentTStore-\u003eaddRelationship(parent, child);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/ParentWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/ParentStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class ParentWriter : public IRelationshipWriter\u003cint, int\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cParentStore\u003e parentStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit ParentWriter(std::shared_ptr\u003cParentStore\u003e store) : parentStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(int parent, int child) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addParent(parent, child);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        parentStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addParent(int parent, int child) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        parentStore-\u003eaddRelationship(parent, child);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/UsesPWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/UsesPStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class UsesPWriter : public IRelationshipWriter\u003cstd::string , std::string\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesPStore\u003e usesPStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit UsesPWriter(std::shared_ptr\u003cUsesPStore\u003e store) : usesPStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(std::string proc, std::string var) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addUsesP(proc, var);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"      usesPStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addUsesP(std::string proc, std::string var) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      usesPStore-\u003eaddRelationship(proc, var);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/pkb/writers/relationships/UsesSWriter.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/IRelationshipWriter.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/UsesSStore.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"#include \u003cmemory\u003e"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"class UsesSWriter : public IRelationshipWriter\u003cint , std::string\u003e {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cUsesSStore\u003e usesSStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    explicit UsesSWriter(std::shared_ptr\u003cUsesSStore\u003e store) : usesSStore(std::move(store)) {}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    void addRelationship(int stmtNum, std::string var) override {"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        addUsesS(stmtNum, var);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    void clear() override {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"      usesSStore-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    void addUsesS(int stmtNum, std::string var) {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"      usesSStore-\u003eaddRelationship(stmtNum, var);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"};"}],"authorContributionMap":{"jianoway":25}},{"path":"Team19/Code19/src/spa/src/qps/ParsingResult.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef PARSINGRESULT_H"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#define PARSINGRESULT_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cutility\u003e"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"class ParsingResult {"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"    // Constructor"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult();"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    // Setters"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    // Method to add a single synonym"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"    void addDeclaredSynonym(const std::string\u0026 key, const std::string\u0026 value);"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"    void setRequiredSynonym(const string\u0026 synonym);"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    void setSuchThatClause(bool relationship,"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"        const pair\u003cstring, string\u003e\u0026 firstParam,"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"        const pair\u003cstring, string\u003e\u0026 secondParam);"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    void setPatternClause(bool relationship,"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"        const pair\u003cstring, string\u003e\u0026 firstParam,"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"        const pair\u003cstring, string\u003e\u0026 secondParam);"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    // Getters"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"    const unordered_map\u003cstring, string\u003e\u0026 getDeclaredSynonyms() const;"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"    string getDeclaredSynonym(const string\u0026 key) const;"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    const string\u0026 getRequiredSynonym() const;"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    bool getSuchThatClauseRelationship() const;"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"    const pair\u003cstring, string\u003e\u0026 getSuchThatClauseFirstParam() const;"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"    const pair\u003cstring, string\u003e\u0026 getSuchThatClauseSecondParam() const;"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"    bool getPatternClauseRelationship() const;"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"    const pair\u003cstring, string\u003e\u0026 getPatternClauseFirstParam() const;"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"    const pair\u003cstring, string\u003e\u0026 getPatternClauseSecondParam() const;"},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":"    bool throwSemanticError(string);"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_map\u003cstring, string\u003e declaredSynonyms;"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    string requiredSynonym;"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"    bool suchThatClauseRelationship;"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    pair\u003cstring, string\u003e suchThatClauseFirstParam;"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    pair\u003cstring, string\u003e suchThatClauseSecondParam;"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    bool patternRelationship;"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"    pair\u003cstring, string\u003e patternFirstParam;"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    pair\u003cstring, string\u003e patternSecondParam;"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"#endif "}],"authorContributionMap":{"winson8222":1,"MSI\\vegit":48}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/PatternStrategy.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#include \"PatternStrategy.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \"qps/parser/Token.h\" // Include the Token header"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cregex\u003e"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"// The PatternStrategy class evaluates queries to find pattern relationships in a program."},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"// A pattern relationship is defined between (entRef, expressionSpec),"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"// where ent can be a wildcard, a quoted IDENT, or a synonym,"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"// and expressionSpec is a wildcard, or a quoted expression or quoted expression surrounded by wildcards."},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"unordered_set\u003cstring\u003e PatternStrategy::evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) {"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    string requiredSynonym \u003d parsingResult.getRequiredSynonym();"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e result;"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"    // Obtain readers from PKBReaderManager"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    this-\u003epatternReader \u003d pkbReaderManager.getAssignPatternReader();//dummy function"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    this-\u003eassignReader \u003d pkbReaderManager.getAssignReader();"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 patternFirstParam \u003d parsingResult.getPatternClauseFirstParam();"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 patternSecondParam \u003d parsingResult.getPatternClauseSecondParam();"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    bool partialMatch \u003d patternSecondParam.getValue()[0] \u003d\u003d \u0027_\u0027;"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    processLHS(patternFirstParam, result);"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"    processRHS(patternSecondParam, result, partialMatch);"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    return result;"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":" * Processes the left-hand side (LHS) of the pattern."},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":" * @param firstParam - The first parameter of the pattern (LHS)."},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":" * @param result - A set to store the processing results."},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":" */"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"void PatternStrategy::processLHS(const Token\u0026 firstParam,  unordered_set\u003cstring\u003e\u0026 result)"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"{"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    // now there are 3 cases, either wildcard where we retrieve all assignments"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"    // or quoted variable where we retrieve all assignment with this variable"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    // or synonym - not sure how to handle this yet"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    if (firstParam.getType() \u003d\u003d TokenType::QuoutIDENT) {"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"        //extract the Identifier from the token"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"        regex pattern(R\"([\"](.*?)[\"])\");"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"        smatch matches;"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"        string firstParamValue \u003d firstParam.getValue();"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"        std::regex_search(firstParamValue, matches, pattern);"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"        string variable \u003d matches[1].str();"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"\t\tconst unordered_set\u003cint\u003e\u0026 assignments \u003d patternReader-\u003egetStatementNumbersWithLHS(variable); //dummy function"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"\t\tfillResult(assignments, result);"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"\t}"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"    else if (firstParam.getType() \u003d\u003d TokenType::Wildcard) {"},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"\t\tconst unordered_set\u003cint\u003e\u0026 assignments \u003d assignReader-\u003egetAllAssigns();"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":"        fillResult(assignments, result);"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":"\t\t// can skip filling the result as all that matters is the RHS now"},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":"\t}"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"    else if (firstParam.getType() \u003d\u003d TokenType::IDENT) {"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"\t\t// not sure how to handle this yet"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"\t}"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"/**"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":" * Processes the right-hand side (RHS) of the pattern."},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":" * @param secondParam - The second parameter of the pattern (RHS)."},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":" * @param result - A set to store the processing results."},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":" * @param partialMatch - Boolean flag indicating if partial matches should be considered."},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":" */"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"void PatternStrategy::processRHS(const Token\u0026 secondParam, unordered_set\u003cstring\u003e\u0026 result, bool partialMatch)"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"{"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"    // First extract the quoted expression from the token using regex."},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"    // Now there are 3 cases, either wildcard where we retrieve all assignments"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    // Or quoted expression where we retrieve all RHS assignment "},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"    // With this expression exactly or partially"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"    if (secondParam.getType() \u003d\u003d TokenType::ExpressionSpec) {"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":"        // if the second param is a wildcard, we need to combine the results with the LHS"},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":"        if (secondParam.getValue() \u003d\u003d \"_\") {"},{"lineNumber":83,"author":{"gitId":"winson8222"},"content":"            if (result.empty()) {"},{"lineNumber":84,"author":{"gitId":"winson8222"},"content":"                const unordered_set\u003cint\u003e\u0026 assignments \u003d assignReader-\u003egetAllAssigns();"},{"lineNumber":85,"author":{"gitId":"winson8222"},"content":"                combineResults(assignments, result);"},{"lineNumber":86,"author":{"gitId":"winson8222"},"content":"                return;"},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"            return;"},{"lineNumber":89,"author":{"gitId":"winson8222"},"content":"            // no need to do anything if the set is not empty as the intersection will be LHS only"},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":"        //extract the quoted expression from the token"},{"lineNumber":93,"author":{"gitId":"MSI\\vegit"},"content":"        regex pattern(R\"([\"](.*?)[\"])\");"},{"lineNumber":94,"author":{"gitId":"MSI\\vegit"},"content":"        smatch matches;"},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":"        string secondParamValue \u003d secondParam.getValue();"},{"lineNumber":96,"author":{"gitId":"MSI\\vegit"},"content":"        std::regex_search(secondParamValue, matches, pattern);"},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"        string expressionValue \u003d matches[1].str();"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":"        if (partialMatch) {"},{"lineNumber":100,"author":{"gitId":"MSI\\vegit"},"content":"\t\t\tconst unordered_set\u003cint\u003e\u0026 assignments \u003d patternReader-\u003egetStatementNumbersWithPartialRHS(expressionValue); //dummy function"},{"lineNumber":101,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":102,"author":{"gitId":"MSI\\vegit"},"content":"            combineResults(assignments, result);"},{"lineNumber":103,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"MSI\\vegit"},"content":"        else {"},{"lineNumber":105,"author":{"gitId":"MSI\\vegit"},"content":"            const unordered_set\u003cint\u003e\u0026 assignments \u003d patternReader-\u003egetStatementNumbersWithRHS(expressionValue); //dummy function"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":107,"author":{"gitId":"MSI\\vegit"},"content":"            combineResults(assignments, result);"},{"lineNumber":108,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"MSI\\vegit"},"content":"        "},{"lineNumber":110,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":112,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":113,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":114,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":115,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":116,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":117,"author":{"gitId":"MSI\\vegit"},"content":"/**"},{"lineNumber":118,"author":{"gitId":"MSI\\vegit"},"content":" * Combines the results of LHS and RHS processing."},{"lineNumber":119,"author":{"gitId":"MSI\\vegit"},"content":" * @param newResult - The new results to be combined."},{"lineNumber":120,"author":{"gitId":"MSI\\vegit"},"content":" * @param result - The existing set of results to be updated."},{"lineNumber":121,"author":{"gitId":"MSI\\vegit"},"content":" */"},{"lineNumber":122,"author":{"gitId":"MSI\\vegit"},"content":"void PatternStrategy::combineResults(const unordered_set\u003cint\u003e\u0026 newResult, unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":123,"author":{"gitId":"MSI\\vegit"},"content":"    for (auto it \u003d result.begin(); it !\u003d result.end(); ) {"},{"lineNumber":124,"author":{"gitId":"MSI\\vegit"},"content":"        if (newResult.find(stoi(*it)) \u003d\u003d newResult.end()) {"},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"            it \u003d result.erase(it);"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":"        else {"},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":"            ++it;"},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":132,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":133,"author":{"gitId":"MSI\\vegit"},"content":"void PatternStrategy::fillResult(const unordered_set\u003cint\u003e\u0026 follows, unordered_set\u003cstd::string\u003e\u0026 result) {"},{"lineNumber":134,"author":{"gitId":"MSI\\vegit"},"content":"    for (int statement : follows) {"},{"lineNumber":135,"author":{"gitId":"MSI\\vegit"},"content":"        result.insert(to_string(statement));"},{"lineNumber":136,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":138,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":139,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":""}],"authorContributionMap":{"winson8222":15,"MSI\\vegit":125}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/PatternStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#pragma"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#define PATTERNSTRATEGY_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \"qps/evaluator/suchThatStrategies/StmtStmtStrategy.h\""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"class PatternStrategy : public QueryEvaluationStrategy {"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cAssignPatternReader\u003e patternReader;"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cAssignReader\u003e assignReader;"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) override;"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"    void processLHS(const Token\u0026 firstParam, unordered_set\u003cstring\u003e\u0026 result);"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    void processRHS(const Token\u0026 secondParam, unordered_set\u003cstring\u003e\u0026 result, bool partialMatch);"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    void combineResults(const unordered_set\u003cint\u003e\u0026 newResult, unordered_set\u003cstring\u003e\u0026 result);"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    void fillResult(const unordered_set\u003cint\u003e\u0026 follows, unordered_set\u003cstd::string\u003e\u0026 result);"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""}],"authorContributionMap":{"MSI\\vegit":25}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/QueryEvaluationStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"// QueryEvaluationStrategy.h"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef QUERYEVALUATIONSTRATEGY_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#define QUERYEVALUATIONSTRATEGY_H"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":7,"author":{"gitId":"Winson Zheng"},"content":"#include \"../Parser/ParsingResult.h\" // Include your ParsingResult header"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"#include \"../../pkb/PKBReaderManager.h\" // Include your PKBReader header"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"class QueryEvaluationStrategy {"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    virtual std::unordered_set\u003cstd::string\u003e evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) \u003d 0;"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"    virtual ~QueryEvaluationStrategy() \u003d default;"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"#endif //QUERYEVALUATIONSTRATEGY_H"}],"authorContributionMap":{"Winson Zheng":1,"MSI\\vegit":13,"jianoway":2}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/QueryEvaluator.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#include \"QueryEvaluator.h\""},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/suchThatStrategies/FollowsStrategy.h\" // Include FollowsStrategy"},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/suchThatStrategies/ParentStrategy.h\" // Include ParentStrategy"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \"PatternStrategy.h\""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"QueryEvaluator::QueryEvaluator(std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager, ParsingResult\u0026 parsingResult)"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    : pkbReaderManager(pkbReaderManager), parsingResult(parsingResult) {}"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"void QueryEvaluator::addStrategy(std::unique_ptr\u003cQueryEvaluationStrategy\u003e strategy) {"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"    strategies.push_back(std::move(strategy));"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"std::vector\u003cstring\u003e QueryEvaluator::evaluateQuery() {"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    // if query is not valid, return error message and stop evaluation"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    if (!parsingResult.isQueryValid()) {"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"        // convert error message to vector\u003cstring\u003e"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"        vector\u003cstring\u003e error;"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"        error.push_back(parsingResult.getErrorMessage());"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"        return error;"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    std::string requiredSynonym \u003d parsingResult.getRequiredSynonym();"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    std::string requiredType \u003d parsingResult.getRequiredSynonymType();"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    if (requiredType \u003d\u003d \"stmt\") {"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"        // For \u0027Follows\u0027 type, add FollowsStrategy"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"        if (parsingResult.getSuchThatClauseRelationship().getValue() \u003d\u003d \"Follows\" || parsingResult.getSuchThatClauseRelationship().getValue() \u003d\u003d \"Follows*\") {"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"            addStrategy(std::make_unique\u003cFollowsStrategy\u003e());"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"        else if (parsingResult.getSuchThatClauseRelationship().getValue() \u003d\u003d \"Parent\" || parsingResult.getSuchThatClauseRelationship().getValue() \u003d\u003d \"ParentT\") {"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":"            addStrategy(std::make_unique\u003cParentStrategy\u003e());"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"        else {"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":"            // if there is no clause, return all statements"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"            unordered_set\u003cint\u003e allStmts \u003d pkbReaderManager-\u003egetStatementReader()-\u003egetAllStatements();"},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":"            for (int stmt : allStmts) {"},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":"                result.insert(to_string(stmt));"},{"lineNumber":39,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"        // Add other strategies based on requiredType"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"        // ..."},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"    if (requiredType \u003d\u003d \"variable\") {"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"        // now we are only supporting getting all variables"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        std::shared_ptr\u003cVariableReader\u003e variableReader \u003d pkbReaderManager-\u003egetVariableReader();"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        result \u003d variableReader-\u003egetAllVariables();"},{"lineNumber":49,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"    if (requiredType \u003d\u003d \"assign\") {"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"        if (parsingResult.getPatternClauseRelationship().getValue() !\u003d \"\") {"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"            addStrategy(std::make_unique\u003cPatternStrategy\u003e());"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"    bool isFirstStrategy \u003d true;"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    for (auto\u0026 strategy : strategies) {"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"        if (isFirstStrategy) {"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"            result \u003d strategy-\u003eevaluateQuery(*pkbReaderManager, parsingResult);"},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":"            isFirstStrategy \u003d false;"},{"lineNumber":62,"author":{"gitId":"winson8222"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":"            combineResults(strategy-\u003eevaluateQuery(*pkbReaderManager, parsingResult));"},{"lineNumber":64,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":"    return std::vector\u003cstd::string\u003e(result.begin(), result.end());"},{"lineNumber":69,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"/**"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"* Modifies the \u0027result\u0027 set to contain only elements that are also present in \u0027newResult\u0027."},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"* This function effectively computes the intersection of \u0027result\u0027 and \u0027newResult\u0027."},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"*"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"* @param newResult The set with which the intersection is to be found."},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"*/"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"void QueryEvaluator::combineResults(const std::unordered_set\u003cstd::string\u003e\u0026 newResult) {"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"    for (auto it \u003d result.begin(); it !\u003d result.end(); ) {"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":"        if (newResult.find(*it) \u003d\u003d newResult.end()) {"},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"            it \u003d result.erase(it);"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"        else {"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":"            ++it;"},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":""}],"authorContributionMap":{"winson8222":32,"MSI\\vegit":56,"jianoway":4}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/QueryEvaluator.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#pragma"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cvector\u003e // For storing multiple strategies"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#include \"QueryEvaluationStrategy.h\" // Include the strategy interface"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cmemory\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"class QueryEvaluator {"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager;"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult\u0026 parsingResult;"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"    std::unordered_set\u003cstd::string\u003e result;"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstd::unique_ptr\u003cQueryEvaluationStrategy\u003e\u003e strategies; // Store multiple strategies"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    QueryEvaluator(std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager, ParsingResult\u0026 parsingResult);"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e evaluateQuery();"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"    void addStrategy(std::unique_ptr\u003cQueryEvaluationStrategy\u003e strategy); // Method to add strategies"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"    void combineResults(const std::unordered_set\u003cstd::string\u003e\u0026 newResult); // Combine results from multiple strategies"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"};"}],"authorContributionMap":{"winson8222":2,"MSI\\vegit":15,"jianoway":2}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/FollowsStrategy.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#include \"FollowsStrategy.h\""},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"qps/parser/Token.h\" // Include the Token header"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"// The FollowsStrategy class evaluates queries to find follows relationships in a program."},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"// A follows relationship is defined between two statements (stmtRef, stmtRef), "},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"// where a stmtRef can be a wildcard, an integer, or a synonym."},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"unordered_set\u003cstring\u003e FollowsStrategy::evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) {"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"    string requiredSynonym \u003d parsingResult.getRequiredSynonym();"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"    string variant \u003d parsingResult.getSuchThatClauseRelationship().getValue();"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e result;"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    // Obtain readers from PKBReaderManager"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    this-\u003efollowsReader \u003d pkbReaderManager.getFollowsReader();"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    this-\u003efollowsTReader \u003d pkbReaderManager.getFollowsTReader();"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    this-\u003estatementReader \u003d pkbReaderManager.getStatementReader();"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 suchThatFirstParam \u003d parsingResult.getSuchThatClauseFirstParam();"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 suchThatSecondParam \u003d parsingResult.getSuchThatClauseSecondParam();"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    if (suchThatFirstParam.getValue() \u003d\u003d requiredSynonym) {"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"        processFirstParam(suchThatSecondParam, variant, result);"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    else if (suchThatSecondParam.getValue() \u003d\u003d requiredSynonym) {"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"        processSecondParam(suchThatFirstParam, variant, result);"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    else if (isBothParamsWildcard(suchThatFirstParam, suchThatSecondParam)) {"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"    else if (isBothParamsInteger(suchThatFirstParam, suchThatSecondParam)) {"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"        processIntegerParams(suchThatFirstParam, suchThatSecondParam, result);"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"    return result;"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":40,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"// Additional helper methods for readability"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"void FollowsStrategy::processFirstParam(const Token\u0026 secondParam, const string\u0026 variant,"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"    // Implementation of processing when the first parameter matches the required synonym"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    if (secondParam.getType() \u003d\u003d TokenType::INTEGER) {"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"        int stmtNum \u003d stoi(secondParam.getValue());"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d (variant \u003d\u003d \"Follows\") ?"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"            followsReader-\u003egetPreFollows(stmtNum) :"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"            followsTReader-\u003egetPreFollowsT(stmtNum);"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"    else if (secondParam.getType() \u003d\u003d TokenType::Wildcard) {"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d (variant \u003d\u003d \"Follows\") ?"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"            followsReader-\u003egetAllPreFollows() :"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"            followsTReader-\u003egetAllPreFollowsT();"},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"void FollowsStrategy::processSecondParam(const Token\u0026 firstParam, const string\u0026 variant,"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"    // Implementation of processing when the second parameter matches the required synonym"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"    if (firstParam.getType() \u003d\u003d TokenType::INTEGER) {"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"        int stmtNum \u003d stoi(firstParam.getValue());"},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d (variant \u003d\u003d \"Follows\") ?"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"            followsReader-\u003egetPostFollows(stmtNum) :"},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":"            followsTReader-\u003egetPostFollowsT(stmtNum);"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":"    else if (firstParam.getType() \u003d\u003d TokenType::Wildcard) {"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d (variant \u003d\u003d \"Follows\") ?"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"            followsReader-\u003egetAllPostFollows() :"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"            followsTReader-\u003egetAllPostFollowsT();"},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"void FollowsStrategy::processIntegerParams(const Token\u0026 firstParam, const Token\u0026 secondParam,"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"    // Implementation for processing when both parameters are integers"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":"    int firstStmtNum \u003d stoi(firstParam.getValue());"},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"    int secondStmtNum \u003d stoi(secondParam.getValue());"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"    if (followsReader-\u003ehasFollows(firstStmtNum, secondStmtNum)) {"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":"        const unordered_set\u003cint\u003e\u0026 follows \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":"        fillResult(follows, result);"},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"}"}],"authorContributionMap":{"winson8222":8,"MSI\\vegit":82,"jianoway":1}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/FollowsStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#pragma"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"// FollowsStrategy.h"},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"#define FOLLOWSSTRATEGY_H"},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/suchThatStrategies/StmtStmtStrategy.h\""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"class FollowsStrategy : public StmtStmtStrategy {"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"private:"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cFollowsReader\u003e followsReader;"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cFollowsTReader\u003e followsTReader;"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementReader\u003e statementReader;"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"public:"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    unordered_set\u003cstring\u003e evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) override;"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"        void processFirstParam(const Token\u0026 secondParam, const string\u0026 variant,"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"        unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"        void processSecondParam(const Token\u0026 firstParam, const string\u0026 variant,"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"        unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"        void processIntegerParams(const Token\u0026 firstParam, const Token\u0026 secondParam,"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"        unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"};"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":""}],"authorContributionMap":{"winson8222":26}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/ParentStrategy.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"ParentStrategy.h\""},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"qps/parser/Token.h\" // Include the Token header"},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"// The ParentStrategy class evaluates queries to find parents relationships in a program."},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"// A parents relationship is defined between two statements (stmtRef, stmtRef),"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":"// where a stmtRef can be a wildcard, an integer, or a synonym."},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"unordered_set\u003cstring\u003e ParentStrategy::evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) {"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"    string requiredSynonym \u003d parsingResult.getRequiredSynonym();"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"    string variant \u003d parsingResult.getSuchThatClauseRelationship().getValue();"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"    unordered_set\u003cstring\u003e result;"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"    // Obtain readers from PKBReaderManager"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    this-\u003eparentReader \u003d pkbReaderManager.getParentReader();"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    this-\u003eparentTTReader \u003d pkbReaderManager.getParentTReader();"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    this-\u003estatementReader \u003d pkbReaderManager.getStatementReader();"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"    const Token\u0026 suchThatFirstParam \u003d parsingResult.getSuchThatClauseFirstParam();"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"    const Token\u0026 suchThatSecondParam \u003d parsingResult.getSuchThatClauseSecondParam();"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"    if (suchThatFirstParam.getValue() \u003d\u003d requiredSynonym) {"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"        processFirstParam(suchThatSecondParam, variant, result);"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"    else if (suchThatSecondParam.getValue() \u003d\u003d requiredSynonym) {"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"        processSecondParam(suchThatFirstParam, variant, result);"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"winson8222"},"content":"    else if (isBothParamsWildcard(suchThatFirstParam, suchThatSecondParam)) {"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":"    else if (isBothParamsInteger(suchThatFirstParam, suchThatSecondParam)) {"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"        processIntegerParams(suchThatFirstParam, suchThatSecondParam, result);"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":"    return result;"},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":39,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":40,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":41,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":42,"author":{"gitId":"winson8222"},"content":"// Additional helper methods for readability"},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":"void ParentStrategy::processFirstParam(const Token\u0026 secondParam, const string\u0026 variant,"},{"lineNumber":44,"author":{"gitId":"winson8222"},"content":"                                        unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"    // Implementation of processing when the first parameter matches the required synonym"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"    if (secondParam.getType() \u003d\u003d TokenType::INTEGER) {"},{"lineNumber":47,"author":{"gitId":"winson8222"},"content":"        int stmtNum \u003d stoi(secondParam.getValue());"},{"lineNumber":48,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d (variant \u003d\u003d \"Parent\") ?"},{"lineNumber":49,"author":{"gitId":"winson8222"},"content":"                                            parentReader-\u003egetParent(stmtNum) :"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"                                            parentTTReader-\u003egetParentT(stmtNum);"},{"lineNumber":51,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":"    else if (secondParam.getType() \u003d\u003d TokenType::Wildcard) {"},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d (variant \u003d\u003d \"ParentT\") ?"},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"                                            parentReader-\u003egetAllParents() :"},{"lineNumber":56,"author":{"gitId":"winson8222"},"content":"                                            parentTTReader-\u003egetAllParentTs();"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":"void ParentStrategy::processSecondParam(const Token\u0026 firstParam, const string\u0026 variant,"},{"lineNumber":62,"author":{"gitId":"winson8222"},"content":"                                         unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":"    // Implementation of processing when the second parameter matches the required synonym"},{"lineNumber":64,"author":{"gitId":"winson8222"},"content":"    if (firstParam.getType() \u003d\u003d TokenType::INTEGER) {"},{"lineNumber":65,"author":{"gitId":"winson8222"},"content":"        int stmtNum \u003d stoi(firstParam.getValue());"},{"lineNumber":66,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d (variant \u003d\u003d \"Parent\") ?"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":"                                            parentReader-\u003egetChild(stmtNum) :"},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":"                                            parentTTReader-\u003egetChildT(stmtNum);"},{"lineNumber":69,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":70,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"winson8222"},"content":"    else if (firstParam.getType() \u003d\u003d TokenType::Wildcard) {"},{"lineNumber":72,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d (variant \u003d\u003d \"ParentT\") ?"},{"lineNumber":73,"author":{"gitId":"winson8222"},"content":"                                            parentReader-\u003egetAllChildren() :"},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"                                            parentTTReader-\u003egetAllChildrenT();"},{"lineNumber":75,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":76,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":78,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":79,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":80,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":"void ParentStrategy::processIntegerParams(const Token\u0026 firstParam, const Token\u0026 secondParam,"},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":"                                           unordered_set\u003cstring\u003e\u0026 result) {"},{"lineNumber":83,"author":{"gitId":"winson8222"},"content":"    // Implementation for processing when both parameters are integers"},{"lineNumber":84,"author":{"gitId":"winson8222"},"content":"    int firstStmtNum \u003d stoi(firstParam.getValue());"},{"lineNumber":85,"author":{"gitId":"winson8222"},"content":"    int secondStmtNum \u003d stoi(secondParam.getValue());"},{"lineNumber":86,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":"    if (parentReader-\u003ehasParent(firstStmtNum, secondStmtNum)) {"},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"        const unordered_set\u003cint\u003e\u0026 parents \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":89,"author":{"gitId":"winson8222"},"content":"        fillResult(parents, result);"},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"winson8222"},"content":"}"}],"authorContributionMap":{"winson8222":91}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/ParentStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#pragma"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"// FollowsStrategy.h"},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"#define FOLLOWSSTRATEGY_H"},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/suchThatStrategies/StmtStmtStrategy.h\""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"class ParentStrategy : public StmtStmtStrategy {"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"private:"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cParentReader\u003e parentReader;"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cParentTReader\u003e parentTTReader;"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementReader\u003e statementReader;"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"public:"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    unordered_set\u003cstring\u003e evaluateQuery(PKBReaderManager\u0026 pkbReaderManager, const ParsingResult\u0026 parsingResult) override;"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    void processFirstParam(const Token\u0026 secondParam, const string\u0026 variant,"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"                           unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"    void processSecondParam(const Token\u0026 firstParam, const string\u0026 variant,"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"                            unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"    void processIntegerParams(const Token\u0026 firstParam, const Token\u0026 secondParam,"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"                              unordered_set\u003cstring\u003e\u0026 result) override;"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"};"}],"authorContributionMap":{"winson8222":25}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/StmtStmtStrategy.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"//"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"// Created by Winson Zheng on 15/2/24."},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"//"},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"#include \"StmtStmtStrategy.h\""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"bool StmtStmtStrategy::isBothParamsWildcard(const Token\u0026 firstParam, const Token\u0026 secondParam) {"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"    // Implementation to check if both parameters are wildcards"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"    return firstParam.getType() \u003d\u003d TokenType::Wildcard \u0026\u0026 secondParam.getType() \u003d\u003d TokenType::Wildcard;"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"bool StmtStmtStrategy::isBothParamsInteger(const Token\u0026 firstParam, const Token\u0026 secondParam) {"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    // Implementation to check if both parameters are integers"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    return firstParam.getType() \u003d\u003d TokenType::INTEGER \u0026\u0026 secondParam.getType() \u003d\u003d TokenType::INTEGER;"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"void StmtStmtStrategy::fillResult(const unordered_set\u003cint\u003e \u0026follows, unordered_set\u003cstd::string\u003e \u0026result) {"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"    for (int statement : follows) {"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"        result.insert(to_string(statement));"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"}"}],"authorContributionMap":{"winson8222":24}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/StmtStmtStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/suchThatStrategies/SuchThatStrategy.h\""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":" * @brief Strategy class for evaluating \"such that\" clauses involving relationships between statements."},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":" *"},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":" * This class extends the SuchThatStrategy to provide a specialized interface for"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":" * \"such that\" clauses that involve relationships between two statements."},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":" *"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"class StmtStmtStrategy : public SuchThatStrategy {"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"public:"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    ~StmtStmtStrategy() override \u003d default;"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    virtual void processIntegerParams(const Token\u0026 firstParam, const Token\u0026 secondParam,"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"                              unordered_set\u003cstring\u003e\u0026 result) \u003d 0;"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"    virtual void processFirstParam(const Token\u0026 secondParam, const string\u0026 variant,"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"                                   unordered_set\u003cstring\u003e\u0026 result) \u003d 0;"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"    virtual void processSecondParam(const Token\u0026 firstParam, const string\u0026 variant,"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"                            unordered_set\u003cstring\u003e\u0026 result) \u003d 0;"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"protected:"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    static bool isBothParamsWildcard(const Token\u0026 firstParam, const Token\u0026 secondParam);"},{"lineNumber":29,"author":{"gitId":"winson8222"},"content":"    static bool isBothParamsInteger(const Token\u0026 firstParam, const Token\u0026 secondParam);"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"    static void fillResult(const unordered_set\u003cint\u003e\u0026 follows, unordered_set\u003cstring\u003e\u0026 result);"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":"};"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":""}],"authorContributionMap":{"winson8222":34}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/SuchThatStrategy.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"//"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"// Created by Winson Zheng on 15/2/24."},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"//"},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"#include \"SuchThatStrategy.h\""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"// sketeon code for the SuchThatStrategy class can add more once uses and modifies are added"}],"authorContributionMap":{"winson8222":6}},{"path":"Team19/Code19/src/spa/src/qps/evaluator/suchThatStrategies/SuchThatStrategy.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"#include \"qps/evaluator/QueryEvaluationStrategy.h\""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":" * @brief Base class for implementing evaluation strategies for \"such that\" clauses in queries."},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":" *"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":" * This class provides a common interface and foundational behavior for all \"such that\""},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":" * clauses within the query processing system. Derived classes should implement specific"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":" * evaluation strategies for different types of \"such that\" clauses, providing the logic"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":" * necessary to evaluate those clauses against the program knowledge base."},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":" *"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":" */"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"class SuchThatStrategy : public QueryEvaluationStrategy {"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"public:"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    SuchThatStrategy() \u003d default;"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"};"}],"authorContributionMap":{"winson8222":22}},{"path":"Team19/Code19/src/spa/src/qps/parser/ParsingResult.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#include \"ParsingResult.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \"Token.h\""},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"// Constructor"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"ParsingResult::ParsingResult() {"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"    // Initialize members if needed"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"// Adds a single synonym to the declaredSynonyms map"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::addDeclaredSynonym(const std::string\u0026 key, const std::string\u0026 value) {"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"    declaredSynonyms[key] \u003d value;"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setRequiredSynonym(const string\u0026 synonym) {"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    requiredSynonym \u003d synonym;"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"// Implementations for setting individual parts of SuchThatClause"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setSuchThatClauseRelationship(const Token\u0026 relationship) {"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    suchThatClauseRelationship \u003d relationship;"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setSuchThatClauseFirstParam(const Token\u0026 firstParam) {"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    suchThatClauseFirstParam \u003d firstParam;"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setSuchThatClauseSecondParam(const Token\u0026 secondParam) {"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    suchThatClauseSecondParam \u003d secondParam;"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"// Implementations for setting individual parts of PatternClause"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setPatternClauseRelationship(const Token\u0026 relationship) {"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"    patternRelationship \u003d relationship;"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setPatternClauseFirstParam(const Token\u0026 firstParam) {"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    patternFirstParam \u003d firstParam;"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"void ParsingResult::setPatternClauseSecondParam(const Token\u0026 secondParam) {"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    patternSecondParam \u003d secondParam;"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"// Getters"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"const unordered_map\u003cstring, string\u003e\u0026 ParsingResult::getDeclaredSynonyms() const {"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"    return declaredSynonyms;"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"const string\u0026 ParsingResult::getDeclaredSynonym(const string\u0026 key) const {"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"    auto it \u003d declaredSynonyms.find(key);"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"    if (it !\u003d declaredSynonyms.end()) {"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"        return it-\u003esecond;"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"    return \"\"; "},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"const string\u0026 ParsingResult::getRequiredSynonym() const {"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"    return requiredSynonym;"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":65,"author":{"gitId":"winson8222"},"content":"const string\u0026 ParsingResult::getRequiredSynonymType() const {"},{"lineNumber":66,"author":{"gitId":"winson8222"},"content":"    return getDeclaredSynonym(requiredSynonym);"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getSuchThatClauseRelationship() const {"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"    return suchThatClauseRelationship;"},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getSuchThatClauseFirstParam() const {"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"    return suchThatClauseFirstParam;"},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getSuchThatClauseSecondParam() const {"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"    return suchThatClauseSecondParam;"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getPatternClauseRelationship() const {"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"    return patternRelationship;"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getPatternClauseFirstParam() const {"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"    return patternFirstParam;"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 ParsingResult::getPatternClauseSecondParam() const {"},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"    return patternSecondParam;"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":92,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":93,"author":{"gitId":"winson8222"},"content":"// check if the query is valid"},{"lineNumber":94,"author":{"gitId":"winson8222"},"content":"bool ParsingResult::isQueryValid() {"},{"lineNumber":95,"author":{"gitId":"winson8222"},"content":"    return errorMessage.empty();"},{"lineNumber":96,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":97,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":98,"author":{"gitId":"winson8222"},"content":"// get the error message"},{"lineNumber":99,"author":{"gitId":"winson8222"},"content":"string ParsingResult::getErrorMessage() {"},{"lineNumber":100,"author":{"gitId":"winson8222"},"content":"    return errorMessage;"},{"lineNumber":101,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":102,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":103,"author":{"gitId":"winson8222"},"content":"// set the error message"},{"lineNumber":104,"author":{"gitId":"winson8222"},"content":"void ParsingResult::setErrorMessage(const string\u0026 message) {"},{"lineNumber":105,"author":{"gitId":"winson8222"},"content":"    if (errorMessage.empty()) {"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":"        errorMessage \u003d message;"},{"lineNumber":107,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":""}],"authorContributionMap":{"winson8222":26,"MSI\\vegit":84}},{"path":"Team19/Code19/src/spa/src/qps/parser/ParsingResult.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef PARSINGRESULT_H"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#define PARSINGRESULT_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cutility\u003e"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"#include \"Token.h\""},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"class ParsingResult {"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"    // Constructor"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult();"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    bool isQueryValid();"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    string getErrorMessage();"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    void setErrorMessage(const string\u0026 errorMessage);"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    // Setters"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"    // Method to add a single synonym"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    void addDeclaredSynonym(const std::string\u0026 key, const std::string\u0026 value);"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    void setRequiredSynonym(const string\u0026 synonym);"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"    // Methods for setting individual parts of SuchThatClause"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    void setSuchThatClauseRelationship(const Token\u0026 relationship);"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"    void setSuchThatClauseFirstParam(const Token\u0026 firstParam);"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"    void setSuchThatClauseSecondParam(const Token\u0026 secondParam);"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    // Methods for setting individual parts of PatternClause"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"    void setPatternClauseRelationship(const Token\u0026 relationship);"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"    void setPatternClauseFirstParam(const Token\u0026 firstParam);"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"    void setPatternClauseSecondParam(const Token\u0026 secondParam);;"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"    // Getters"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"    const unordered_map\u003cstring, string\u003e\u0026 getDeclaredSynonyms() const;"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"    const string\u0026 getDeclaredSynonym(const string\u0026 key) const;"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    const string\u0026 getRequiredSynonym() const;"},{"lineNumber":40,"author":{"gitId":"winson8222"},"content":"    const string\u0026 getRequiredSynonymType() const;"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getSuchThatClauseRelationship() const;"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getSuchThatClauseFirstParam() const;"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getSuchThatClauseSecondParam() const;"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getPatternClauseRelationship() const;"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getPatternClauseFirstParam() const;"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 getPatternClauseSecondParam() const;"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"    unordered_map\u003cstring, string\u003e declaredSynonyms;"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"    string requiredSynonym;"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"    Token suchThatClauseRelationship;"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"    Token suchThatClauseFirstParam;"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"    Token suchThatClauseSecondParam;"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"    Token patternRelationship;"},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"    Token patternFirstParam;"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    Token patternSecondParam;"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"    string errorMessage;"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"#endif "}],"authorContributionMap":{"winson8222":7,"MSI\\vegit":56}},{"path":"Team19/Code19/src/spa/src/qps/parser/QueryParser.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"// Include the parser class header."},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/QueryParser.h\""},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"// Constructor of the QueryParser class."},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"// Initializes the QueryParser with a vector of Token objects to be parsed."},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"QueryParser::QueryParser(const vector\u003cToken\u003e\u0026 tokens) : tokens(tokens), currentTokenIndex(0), parsingResult() {}"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"// Parses the entire query and validate the syntax and semantics, stop parsing when there is an error."},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"// Processes declarations, select clause, and optional such that and pattern clauses."},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"ParsingResult QueryParser::parse() {"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    if(!parseDeclarations()) {"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"        return parsingResult;"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"    if(!parseSelectClause()) {"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"        return parsingResult;"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"    if (currentTokenIndex \u003d\u003d tokens.size() - 1) {"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"        return parsingResult;"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"        return parsingResult;"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":"    // check if there is a such that or pattern clause with such that coming first"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"    if (match(TokenType::SuchKeyword)) {"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":"        if(!parseSuchThatClause()) {"},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":"            return parsingResult;"},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":39,"author":{"gitId":"winson8222"},"content":"        if (currentTokenIndex \u003d\u003d tokens.size() - 1) {"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"            return parsingResult;"},{"lineNumber":41,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":44,"author":{"gitId":"winson8222"},"content":"            return parsingResult;"},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"        if(!parsePatternClause()) {"},{"lineNumber":47,"author":{"gitId":"winson8222"},"content":"            return parsingResult;"},{"lineNumber":48,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"        "},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":51,"author":{"gitId":"winson8222"},"content":"        if(!parsePatternClause()) {"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":"            return parsingResult;"},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"    if (currentTokenIndex \u003d\u003d tokens.size() - 1) {"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"        return parsingResult;"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    return parsingResult;"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"// Parses declarations in the query."},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"// Processes design entities and their synonyms, and ensures correct syntax with semicolons."},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseDeclarations() {"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"    int numberOfDeclarations \u003d 0;"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"    while (!match(TokenType::SelectKeyword)) {"},{"lineNumber":66,"author":{"gitId":"winson8222"},"content":"        if(!parseDesignEntity()) {"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"        string assignmentType \u003d currentToken().getValue();"},{"lineNumber":70,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":71,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"        if(!parseSynonym()) {"},{"lineNumber":75,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":76,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"        parsingResult.addDeclaredSynonym(currentToken().getValue(), assignmentType);"},{"lineNumber":79,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":80,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"        while (match(TokenType::Comma)) {"},{"lineNumber":84,"author":{"gitId":"winson8222"},"content":"            if (!advanceToken()) {"},{"lineNumber":85,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":86,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":"            if(!parseSynonym()){"},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"                parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":89,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"            parsingResult.addDeclaredSynonym(currentToken().getValue(), assignmentType);"},{"lineNumber":92,"author":{"gitId":"winson8222"},"content":"            if (!advanceToken()) {"},{"lineNumber":93,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":94,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":97,"author":{"gitId":"winson8222"},"content":"        if(!ensureToken(TokenType::Semicolon)){"},{"lineNumber":98,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":101,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":102,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":104,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":105,"author":{"gitId":"MSI\\vegit"},"content":"        numberOfDeclarations++;"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":108,"author":{"gitId":"MSI\\vegit"},"content":"    if (numberOfDeclarations \u003d\u003d 0) {"},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":111,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":113,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":114,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":115,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":116,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a design entity in the query."},{"lineNumber":117,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures the current token is a design entity and advances the token."},{"lineNumber":118,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseDesignEntity() {"},{"lineNumber":119,"author":{"gitId":"winson8222"},"content":"    if (currentToken().getType() \u003d\u003d TokenType::DesignEntity) {"},{"lineNumber":120,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":121,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"MSI\\vegit"},"content":"    else {"},{"lineNumber":123,"author":{"gitId":"winson8222"},"content":"\t\tparsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":124,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a synonym in the query."},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures the current token is an identifier and advances the token."},{"lineNumber":131,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseSynonym() {"},{"lineNumber":132,"author":{"gitId":"winson8222"},"content":"    // check if it is an ident and if the synonym is already declared"},{"lineNumber":133,"author":{"gitId":"winson8222"},"content":"    if (!ensureToken(TokenType::IDENT)) {"},{"lineNumber":134,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":135,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"winson8222"},"content":"    // check if the token value is declared as synonyms in any of the set"},{"lineNumber":137,"author":{"gitId":"winson8222"},"content":"    if (!parsingResult.getDeclaredSynonym(currentToken().getValue()).empty()) {"},{"lineNumber":138,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getSemanticError());"},{"lineNumber":139,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":142,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":143,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":144,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":145,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":146,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":147,"author":{"gitId":"MSI\\vegit"},"content":"// Parses the select clause in the query."},{"lineNumber":148,"author":{"gitId":"MSI\\vegit"},"content":"// Checks for the \u0027Select\u0027 keyword and ensures the following token is a valid identifier."},{"lineNumber":149,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseSelectClause() {"},{"lineNumber":150,"author":{"gitId":"MSI\\vegit"},"content":"    if (currentToken().getValue() !\u003d \"Select\") {"},{"lineNumber":151,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":152,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":153,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"winson8222"},"content":"    if(!advanceToken()) {"},{"lineNumber":155,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":156,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"MSI\\vegit"},"content":"    // check after select if it is a synonym"},{"lineNumber":158,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::IDENT)) {"},{"lineNumber":159,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":160,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"winson8222"},"content":"    //check if the token value is declared as synonyms in any of the set"},{"lineNumber":162,"author":{"gitId":"winson8222"},"content":"    if (parsingResult.getDeclaredSynonym(currentToken().getValue()).empty()) {"},{"lineNumber":163,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getSemanticError());"},{"lineNumber":164,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":165,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":167,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":168,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setRequiredSynonym(currentToken().getValue());"},{"lineNumber":169,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":170,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":171,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":172,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":173,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":174,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":175,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"// Parses the \u0027such that\u0027 clause in the query."},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures the correct syntax and calls the function to process relation references."},{"lineNumber":178,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseSuchThatClause() {"},{"lineNumber":179,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":180,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":181,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::ThatKeyword)) {"},{"lineNumber":183,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":184,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":186,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":187,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":189,"author":{"gitId":"MSI\\vegit"},"content":"    return parseRelRef();"},{"lineNumber":190,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":191,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":192,"author":{"gitId":"MSI\\vegit"},"content":"// Parses relation references in a \u0027such that\u0027 clause."},{"lineNumber":193,"author":{"gitId":"MSI\\vegit"},"content":"// Determines the type of relation and calls the appropriate parsing function."},{"lineNumber":194,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseRelRef() {"},{"lineNumber":195,"author":{"gitId":"MSI\\vegit"},"content":"    if (isStmtRefStmtRef()) {"},{"lineNumber":196,"author":{"gitId":"MSI\\vegit"},"content":"        parsingResult.setSuchThatClauseRelationship(currentToken());"},{"lineNumber":197,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":198,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":199,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"winson8222"},"content":"        if(!parsestmtRefstmtRef()) {"},{"lineNumber":201,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":202,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":204,"author":{"gitId":"winson8222"},"content":"    } else if (isUsesOrModifies()) {"},{"lineNumber":205,"author":{"gitId":"MSI\\vegit"},"content":"        parsingResult.setSuchThatClauseRelationship(currentToken());"},{"lineNumber":206,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":207,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":208,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"winson8222"},"content":"        if(!parseUsesOrModifies()) {"},{"lineNumber":210,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":211,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":213,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":214,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":215,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":216,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":218,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":219,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":220,"author":{"gitId":"MSI\\vegit"},"content":"// Checks if the current context is a statement reference to statement reference relation."},{"lineNumber":221,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::isStmtRefStmtRef() {"},{"lineNumber":222,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Parent) || match(TokenType::ParentT) ||"},{"lineNumber":223,"author":{"gitId":"MSI\\vegit"},"content":"        match(TokenType::Follows) || match(TokenType::FollowsT)) {"},{"lineNumber":224,"author":{"gitId":"MSI\\vegit"},"content":"        return true;"},{"lineNumber":225,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":226,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"MSI\\vegit"},"content":"    return false;"},{"lineNumber":228,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":229,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":230,"author":{"gitId":"MSI\\vegit"},"content":"// Checks if the current context is a \u0027Uses\u0027 or \u0027Modifies\u0027 relation."},{"lineNumber":231,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::isUsesOrModifies() {"},{"lineNumber":232,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Uses) || match(TokenType::Modifies)) {"},{"lineNumber":233,"author":{"gitId":"MSI\\vegit"},"content":"        return true;"},{"lineNumber":234,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"MSI\\vegit"},"content":"    return false;"},{"lineNumber":236,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":237,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":238,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a \u0027Uses\u0027 or \u0027Modifies\u0027 relation in the query."},{"lineNumber":239,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures correct syntax and processes statement and entity references."},{"lineNumber":240,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseUsesOrModifies() {"},{"lineNumber":241,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Lparenthesis)) {"},{"lineNumber":242,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":243,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":244,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"MSI\\vegit"},"content":"    else {"},{"lineNumber":247,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":248,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":249,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":251,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":252,"author":{"gitId":"winson8222"},"content":"    if (parseStmtRef()) {"},{"lineNumber":253,"author":{"gitId":"MSI\\vegit"},"content":"        parsingResult.setSuchThatClauseFirstParam(currentToken());"},{"lineNumber":254,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":255,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":256,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":258,"author":{"gitId":"winson8222"},"content":"    } else if (parseEntRef()) {"},{"lineNumber":259,"author":{"gitId":"MSI\\vegit"},"content":"        parsingResult.setSuchThatClauseFirstParam(currentToken());"},{"lineNumber":260,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":261,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":262,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":264,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":265,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":266,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":268,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":269,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":270,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":271,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Comma)) {"},{"lineNumber":272,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":273,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":274,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"MSI\\vegit"},"content":"    else {"},{"lineNumber":277,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":278,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":279,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":281,"author":{"gitId":"winson8222"},"content":"    if(!parseEntRef()) {"},{"lineNumber":282,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":283,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":285,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setSuchThatClauseSecondParam(currentToken());"},{"lineNumber":286,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":287,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":288,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::Rparenthesis)) {"},{"lineNumber":290,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":291,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":293,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":294,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":295,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a statement reference to statement reference relation."},{"lineNumber":296,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures correct syntax and processes multiple statement references."},{"lineNumber":297,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parsestmtRefstmtRef() {"},{"lineNumber":298,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Lparenthesis)) {"},{"lineNumber":299,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":300,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":301,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":303,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":304,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":305,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":307,"author":{"gitId":"MSI\\vegit"},"content":"    // stmtRef"},{"lineNumber":308,"author":{"gitId":"winson8222"},"content":"    if(!parseStmtRef()){"},{"lineNumber":309,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":310,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setSuchThatClauseFirstParam(currentToken());"},{"lineNumber":312,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":313,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":314,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":316,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":317,"author":{"gitId":"MSI\\vegit"},"content":"    //\u0027,\u0027"},{"lineNumber":318,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::Comma)) {"},{"lineNumber":319,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":320,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":321,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"MSI\\vegit"},"content":"    else {"},{"lineNumber":324,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":325,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":326,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":328,"author":{"gitId":"winson8222"},"content":"    if(!parseStmtRef()) {"},{"lineNumber":329,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":330,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setSuchThatClauseSecondParam(currentToken());"},{"lineNumber":332,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":333,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":334,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":336,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::Rparenthesis)) {"},{"lineNumber":337,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":338,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":340,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":341,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":342,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a statement reference in the query."},{"lineNumber":343,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseStmtRef() {"},{"lineNumber":344,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::INTEGER) || match(TokenType::Wildcard)) {"},{"lineNumber":345,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":346,"author":{"gitId":"MSI\\vegit"},"content":"    } else {"},{"lineNumber":347,"author":{"gitId":"winson8222"},"content":"        if(!parseStmtSynonyms()) {"},{"lineNumber":348,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":349,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":350,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":351,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":352,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":354,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":355,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":356,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":357,"author":{"gitId":"MSI\\vegit"},"content":"// Parses an entity reference in the query."},{"lineNumber":358,"author":{"gitId":"MSI\\vegit"},"content":"// Handles different types of entity references like quoted identifier, wildcard, or synonym."},{"lineNumber":359,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseEntRef() {"},{"lineNumber":360,"author":{"gitId":"MSI\\vegit"},"content":"    if (match(TokenType::QuoutIDENT) || match(TokenType::Wildcard)) {"},{"lineNumber":361,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":362,"author":{"gitId":"MSI\\vegit"},"content":"    } else {"},{"lineNumber":363,"author":{"gitId":"winson8222"},"content":"        if(!parseVarSynonyms()){"},{"lineNumber":364,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":365,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":366,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":367,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":368,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":370,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":371,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":372,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":373,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":374,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":375,"author":{"gitId":"MSI\\vegit"},"content":"// Parses the pattern clause in the query."},{"lineNumber":376,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures the correct syntax and processes entity references and expression specifications."},{"lineNumber":377,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parsePatternClause() {"},{"lineNumber":378,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":379,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::PatternKeyword)) {"},{"lineNumber":380,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":381,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":383,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":384,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"MSI\\vegit"},"content":"    // check if it is a syn-assign"},{"lineNumber":386,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::IDENT)) {"},{"lineNumber":387,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":388,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setPatternClauseRelationship(currentToken());"},{"lineNumber":390,"author":{"gitId":"winson8222"},"content":"    if(!parseAssignSynonyms()){"},{"lineNumber":391,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":392,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":394,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":395,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::Lparenthesis)) {"},{"lineNumber":396,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":397,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":398,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":399,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":400,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":401,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"winson8222"},"content":"    if(!parseEntRef()) {"},{"lineNumber":403,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":404,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setPatternClauseFirstParam(currentToken());"},{"lineNumber":406,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":407,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":408,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":409,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":410,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::Comma)) {"},{"lineNumber":411,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":412,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":414,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":415,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":416,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"MSI\\vegit"},"content":"    // This is a rudimentary approach to tokenize ExpressionSpec, probably change later"},{"lineNumber":418,"author":{"gitId":"MSI\\vegit"},"content":"    // Store the current token index before parsing the expression spec"},{"lineNumber":419,"author":{"gitId":"MSI\\vegit"},"content":"    size_t startIndex \u003d currentTokenIndex;"},{"lineNumber":420,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":421,"author":{"gitId":"winson8222"},"content":"    if(!parseExpressionSpec()) {"},{"lineNumber":422,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":423,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":424,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":426,"author":{"gitId":"MSI\\vegit"},"content":"    // Concatenate all token values from startIndex to the current index"},{"lineNumber":427,"author":{"gitId":"MSI\\vegit"},"content":"    string concatenatedTokens;"},{"lineNumber":428,"author":{"gitId":"MSI\\vegit"},"content":"    for (size_t i \u003d startIndex; i \u003c\u003d currentTokenIndex; ++i) {"},{"lineNumber":429,"author":{"gitId":"MSI\\vegit"},"content":"        concatenatedTokens +\u003d tokens[i].getValue();"},{"lineNumber":430,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"MSI\\vegit"},"content":"    parsingResult.setPatternClauseSecondParam(Token(TokenType::ExpressionSpec, concatenatedTokens));"},{"lineNumber":432,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":433,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":434,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":435,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::Rparenthesis)){"},{"lineNumber":437,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":438,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":440,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":441,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":442,"author":{"gitId":"MSI\\vegit"},"content":"// Parses the expression specification in the query."},{"lineNumber":443,"author":{"gitId":"MSI\\vegit"},"content":"// Handles different forms of expressions like quoted constants, wildcards, or quoted expressions."},{"lineNumber":444,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseExpressionSpec() {"},{"lineNumber":445,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":446,"author":{"gitId":"winson8222"},"content":"    if (match(TokenType::QuoutConst) || match(TokenType::QuoutIDENT)) {"},{"lineNumber":447,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":448,"author":{"gitId":"MSI\\vegit"},"content":"    } else if (match(TokenType::Wildcard)) {"},{"lineNumber":449,"author":{"gitId":"winson8222"},"content":"        if (!peekNextToken(TokenType::DoubleQuote)) {"},{"lineNumber":450,"author":{"gitId":"winson8222"},"content":"            return true;"},{"lineNumber":451,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":452,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":453,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":454,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":455,"author":{"gitId":"winson8222"},"content":"        if (match(TokenType::DoubleQuote)) {"},{"lineNumber":456,"author":{"gitId":"winson8222"},"content":"            if(!parseQuotedExpression()){"},{"lineNumber":457,"author":{"gitId":"winson8222"},"content":"                parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":458,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":459,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":460,"author":{"gitId":"winson8222"},"content":"            if (!advanceToken()) {"},{"lineNumber":461,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":462,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":463,"author":{"gitId":"winson8222"},"content":"            if(!ensureToken(TokenType::Wildcard)){"},{"lineNumber":464,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":465,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":466,"author":{"gitId":"winson8222"},"content":"            return true;"},{"lineNumber":467,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":468,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":469,"author":{"gitId":"MSI\\vegit"},"content":"        "},{"lineNumber":470,"author":{"gitId":"winson8222"},"content":"    } else if (match(TokenType::DoubleQuote)) {"},{"lineNumber":471,"author":{"gitId":"winson8222"},"content":"        if(!parseQuotedExpression()) {"},{"lineNumber":472,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":473,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":474,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":475,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":476,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":477,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":478,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":479,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":480,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":481,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":482,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":483,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":484,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a quoted expression in the query."},{"lineNumber":485,"author":{"gitId":"MSI\\vegit"},"content":"// Processes the expression enclosed in double quotes."},{"lineNumber":486,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseQuotedExpression() {"},{"lineNumber":487,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":488,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":489,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":490,"author":{"gitId":"winson8222"},"content":"    if(!parseExpression()) {"},{"lineNumber":491,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":492,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":493,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":494,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::DoubleQuote)) {"},{"lineNumber":495,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":496,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":497,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":498,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":499,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":500,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":501,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":502,"author":{"gitId":"MSI\\vegit"},"content":"// Parses an expression in the query."},{"lineNumber":503,"author":{"gitId":"MSI\\vegit"},"content":"// Processes terms and operators within the expression."},{"lineNumber":504,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseExpression() {"},{"lineNumber":505,"author":{"gitId":"winson8222"},"content":"    if(!parseTerm()) {"},{"lineNumber":506,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":507,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":508,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":509,"author":{"gitId":"winson8222"},"content":"    while (match(TokenType::Operator)) {"},{"lineNumber":510,"author":{"gitId":"winson8222"},"content":"        if (currentToken().getValue() \u003d\u003d \"+\" || currentToken().getValue() \u003d\u003d \"-\") {"},{"lineNumber":511,"author":{"gitId":"winson8222"},"content":"            if (!advanceToken()) {"},{"lineNumber":512,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":513,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":514,"author":{"gitId":"winson8222"},"content":"        } else {"},{"lineNumber":515,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":516,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":517,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":518,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":519,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":520,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":521,"author":{"gitId":"winson8222"},"content":"        if(!parseTerm()) {"},{"lineNumber":522,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":523,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":524,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":525,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":526,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":527,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":528,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a term in an expression."},{"lineNumber":529,"author":{"gitId":"MSI\\vegit"},"content":"// Processes factors and operators within the term."},{"lineNumber":530,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseTerm() {"},{"lineNumber":531,"author":{"gitId":"winson8222"},"content":"    if(!parseFactor()) {"},{"lineNumber":532,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":533,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":534,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":535,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":536,"author":{"gitId":"winson8222"},"content":"    while (match(TokenType::Operator)) {"},{"lineNumber":537,"author":{"gitId":"winson8222"},"content":"        if (currentToken().getValue() \u003d\u003d \"*\" || currentToken().getValue() \u003d\u003d \"/\""},{"lineNumber":538,"author":{"gitId":"winson8222"},"content":"        || currentToken().getValue() \u003d\u003d \"%\") {"},{"lineNumber":539,"author":{"gitId":"winson8222"},"content":"            if (!advanceToken()) {"},{"lineNumber":540,"author":{"gitId":"winson8222"},"content":"                return false;"},{"lineNumber":541,"author":{"gitId":"winson8222"},"content":"            }"},{"lineNumber":542,"author":{"gitId":"winson8222"},"content":"        } "},{"lineNumber":543,"author":{"gitId":"winson8222"},"content":"        if(!parseFactor()) {"},{"lineNumber":544,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":545,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":546,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":547,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":548,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":549,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":550,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":551,"author":{"gitId":"MSI\\vegit"},"content":"// Parses a factor in a term."},{"lineNumber":552,"author":{"gitId":"MSI\\vegit"},"content":"// Handles parentheses, variable names, and constant values."},{"lineNumber":553,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseFactor() {"},{"lineNumber":554,"author":{"gitId":"winson8222"},"content":"    if (match(TokenType::Lparenthesis)) {"},{"lineNumber":555,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":556,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":557,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":558,"author":{"gitId":"winson8222"},"content":"        if(!parseExpression()) {"},{"lineNumber":559,"author":{"gitId":"winson8222"},"content":"            parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":560,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":561,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":562,"author":{"gitId":"winson8222"},"content":"        if (!ensureToken(TokenType::Rparenthesis)) {"},{"lineNumber":563,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":564,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":565,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":566,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":567,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":568,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":569,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":570,"author":{"gitId":"MSI\\vegit"},"content":"    } else if (isVarName()) {"},{"lineNumber":571,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":572,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":573,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":574,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":575,"author":{"gitId":"MSI\\vegit"},"content":"    } else if (isConstValue()) {"},{"lineNumber":576,"author":{"gitId":"winson8222"},"content":"        if (!advanceToken()) {"},{"lineNumber":577,"author":{"gitId":"winson8222"},"content":"            return false;"},{"lineNumber":578,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":579,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":580,"author":{"gitId":"winson8222"},"content":"    } else {"},{"lineNumber":581,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":582,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":583,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":584,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":585,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":586,"author":{"gitId":"MSI\\vegit"},"content":"// Checks if the current token is a constant value."},{"lineNumber":587,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::isConstValue() {"},{"lineNumber":588,"author":{"gitId":"MSI\\vegit"},"content":"    return match(TokenType::INTEGER);"},{"lineNumber":589,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":590,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":591,"author":{"gitId":"MSI\\vegit"},"content":"// Checks if the current token is a variable name."},{"lineNumber":592,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::isVarName() {"},{"lineNumber":593,"author":{"gitId":"MSI\\vegit"},"content":"    return match(TokenType::IDENT);"},{"lineNumber":594,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":595,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":596,"author":{"gitId":"MSI\\vegit"},"content":"// Returns a constant reference to the current Token being parsed."},{"lineNumber":597,"author":{"gitId":"MSI\\vegit"},"content":"const Token\u0026 QueryParser::currentToken() const {"},{"lineNumber":598,"author":{"gitId":"MSI\\vegit"},"content":"    return tokens[currentTokenIndex];"},{"lineNumber":599,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":600,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":601,"author":{"gitId":"MSI\\vegit"},"content":"// Advances to the next token in the token sequence."},{"lineNumber":602,"author":{"gitId":"MSI\\vegit"},"content":"// Returns true if advancement is successful, false if it reaches the end of the token sequence."},{"lineNumber":603,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::advanceToken() {"},{"lineNumber":604,"author":{"gitId":"MSI\\vegit"},"content":"    if (currentTokenIndex \u003c tokens.size() - 1) {"},{"lineNumber":605,"author":{"gitId":"MSI\\vegit"},"content":"        ++currentTokenIndex;"},{"lineNumber":606,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":607,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":608,"author":{"gitId":"winson8222"},"content":"    parsingResult.setErrorMessage(\"Incomplete Query\");"},{"lineNumber":609,"author":{"gitId":"winson8222"},"content":"    return false;"},{"lineNumber":610,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":611,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":612,"author":{"gitId":"MSI\\vegit"},"content":"// Checks if the current token matches a given TokenType."},{"lineNumber":613,"author":{"gitId":"MSI\\vegit"},"content":"// Advances to the next token and returns true if it matches."},{"lineNumber":614,"author":{"gitId":"MSI\\vegit"},"content":"// Returns false if there is no match."},{"lineNumber":615,"author":{"gitId":"MSI\\vegit"},"content":"bool QueryParser::match(TokenType type) {"},{"lineNumber":616,"author":{"gitId":"MSI\\vegit"},"content":"    if (currentToken().getType() \u003d\u003d type) {"},{"lineNumber":617,"author":{"gitId":"winson8222"},"content":"        return true;"},{"lineNumber":618,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":619,"author":{"gitId":"winson8222"},"content":"    return false;"},{"lineNumber":620,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":621,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":622,"author":{"gitId":"MSI\\vegit"},"content":"// Ensures the next token matches the expected TokenType."},{"lineNumber":623,"author":{"gitId":"MSI\\vegit"},"content":"// Throws an error if the token does not match the expected type."},{"lineNumber":624,"author":{"gitId":"winson8222"},"content":"bool QueryParser::ensureToken(TokenType expected) {"},{"lineNumber":625,"author":{"gitId":"MSI\\vegit"},"content":"    if (!match(expected)) {"},{"lineNumber":626,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getGrammarError());"},{"lineNumber":627,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":628,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":629,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":630,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":631,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":632,"author":{"gitId":"winson8222"},"content":"// Throws a standard invalid_argument exception with a custom error message for grammar error."},{"lineNumber":633,"author":{"gitId":"winson8222"},"content":"string QueryParser::getGrammarError() {"},{"lineNumber":634,"author":{"gitId":"winson8222"},"content":"    return \"incorrect grammar at: \" + currentToken().getValue();"},{"lineNumber":635,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":636,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":637,"author":{"gitId":"winson8222"},"content":"// Throws a standard invalid_argument exception with a custom error message for semantic error."},{"lineNumber":638,"author":{"gitId":"winson8222"},"content":"string QueryParser::getSemanticError() {"},{"lineNumber":639,"author":{"gitId":"winson8222"},"content":"    return \"semantic error at: \" + currentToken().getValue();"},{"lineNumber":640,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":641,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":642,"author":{"gitId":"winson8222"},"content":"// Parses a variable synonym in the query."},{"lineNumber":643,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseVarSynonyms() {"},{"lineNumber":644,"author":{"gitId":"winson8222"},"content":"    if (!ensureToken(TokenType::IDENT)) {"},{"lineNumber":645,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":646,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":647,"author":{"gitId":"winson8222"},"content":"    // check if the token value is declared as variable synonyms in any of the set"},{"lineNumber":648,"author":{"gitId":"winson8222"},"content":"    if (parsingResult.getDeclaredSynonym(currentToken().getValue()) !\u003d \"variable\") {"},{"lineNumber":649,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getSemanticError());"},{"lineNumber":650,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":651,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":652,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":653,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":654,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":655,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":656,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":657,"author":{"gitId":"winson8222"},"content":"// Parses a statement synonym in the query."},{"lineNumber":658,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseStmtSynonyms() {"},{"lineNumber":659,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::IDENT)){"},{"lineNumber":660,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":661,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":662,"author":{"gitId":"winson8222"},"content":"    if (parsingResult.getDeclaredSynonym(currentToken().getValue()) !\u003d \"stmt\") {"},{"lineNumber":663,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getSemanticError());"},{"lineNumber":664,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":665,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":666,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":667,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":668,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":669,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":670,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":671,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":672,"author":{"gitId":"winson8222"},"content":"// Parses an assignment synonym in the query."},{"lineNumber":673,"author":{"gitId":"winson8222"},"content":"bool QueryParser::parseAssignSynonyms() {"},{"lineNumber":674,"author":{"gitId":"winson8222"},"content":"    if(!ensureToken(TokenType::IDENT)) {"},{"lineNumber":675,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":676,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":677,"author":{"gitId":"winson8222"},"content":"    if (parsingResult.getDeclaredSynonym(currentToken().getValue()) !\u003d \"assign\") {"},{"lineNumber":678,"author":{"gitId":"winson8222"},"content":"        parsingResult.setErrorMessage(getSemanticError());"},{"lineNumber":679,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":680,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":681,"author":{"gitId":"winson8222"},"content":"    if (!advanceToken()) {"},{"lineNumber":682,"author":{"gitId":"winson8222"},"content":"        return false;"},{"lineNumber":683,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":684,"author":{"gitId":"winson8222"},"content":"    return true;"},{"lineNumber":685,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":686,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":687,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":688,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":689,"author":{"gitId":"MSI\\vegit"},"content":"ParsingResult QueryParser::getParsingResult() const {"},{"lineNumber":690,"author":{"gitId":"MSI\\vegit"},"content":"    return parsingResult;"},{"lineNumber":691,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":692,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":693,"author":{"gitId":"winson8222"},"content":"// peek the next token"},{"lineNumber":694,"author":{"gitId":"winson8222"},"content":"bool QueryParser::peekNextToken(TokenType type) {"},{"lineNumber":695,"author":{"gitId":"winson8222"},"content":"    if (currentTokenIndex \u003c tokens.size() - 1) {"},{"lineNumber":696,"author":{"gitId":"winson8222"},"content":"        return tokens[currentTokenIndex + 1].getType() \u003d\u003d type;"},{"lineNumber":697,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":698,"author":{"gitId":"winson8222"},"content":"    return false;"},{"lineNumber":699,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":700,"author":{"gitId":"winson8222"},"content":""}],"authorContributionMap":{"winson8222":499,"MSI\\vegit":201}},{"path":"Team19/Code19/src/spa/src/qps/parser/QueryParser.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"// Include guard to prevent multiple inclusions of this header."},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef QUERYPARSER_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#define QUERYPARSER_H"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"// Include necessary headers."},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/Token.h\""},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cvector\u003e"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/Tokenizer.h\""},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/ParsingResult.h\""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"// The parser class is used for parsing a sequence of tokens."},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"class QueryParser {"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    // Initializes the parser with a vector of tokens to be parsed."},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    // The \u0027explicit\u0027 keyword prevents implicit conversions from vector\u003cToken\u003e to parser."},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    explicit QueryParser(const vector\u003cToken\u003e\u0026 tokens);"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"    // The parse method initiates the parsing process."},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    // Returns true if parsing is successful, false otherwise."},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult parse();"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult getParsingResult() const;  // Method to retrieve the result"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"    // Vector of tokens to be parsed."},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens;"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"    // Current index in the tokens vector."},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"    size_t currentTokenIndex;"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    ParsingResult parsingResult;"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":41,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    // Private methods for parsing different parts of the input."},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":"    bool parseDeclarations();"},{"lineNumber":44,"author":{"gitId":"winson8222"},"content":"    bool parseSelectClause();"},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"    bool parseSuchThatClause();"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"    bool parsePatternClause();"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":48,"author":{"gitId":"winson8222"},"content":"    bool isUsesOrModifies();"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"    bool isStmtRefStmtRef();"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"    bool isVarName();"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"    bool isConstValue();"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":"    bool parseSynonym();"},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":"    bool parseEntRef();"},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"    bool parseExpressionSpec();"},{"lineNumber":56,"author":{"gitId":"winson8222"},"content":"    bool parseQuotedExpression();"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"    bool parseRelRef();"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":"    bool parseStmtRef();"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"    bool parseDesignEntity();"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"    bool parseUsesOrModifies();"},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":"    bool parsestmtRefstmtRef();"},{"lineNumber":62,"author":{"gitId":"winson8222"},"content":"    bool parseExpression();"},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":"    bool parseTerm();"},{"lineNumber":64,"author":{"gitId":"winson8222"},"content":"    bool parseFactor();"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"    // Method to get the current token."},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"    // Returns a constant reference to the current Token object."},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":"    const Token\u0026 currentToken() const;"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"    // Method to advance to the next token in the sequence."},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":"    bool advanceToken();"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":73,"author":{"gitId":"winson8222"},"content":"    // Method to check if the next token matches a given TokenType."},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"    bool peekNextToken(TokenType type);"},{"lineNumber":75,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    // Method to check if the current token matches a given TokenType."},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"    // Returns true if it matches, false otherwise."},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"    bool match(TokenType type);"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":80,"author":{"gitId":"winson8222"},"content":"    bool parseVarSynonyms();"},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":"    bool parseStmtSynonyms();"},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":"    bool parseAssignSynonyms();"},{"lineNumber":83,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"    bool ensureToken(TokenType expected);"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"    string getGrammarError();"},{"lineNumber":91,"author":{"gitId":"winson8222"},"content":"    string getSemanticError();"},{"lineNumber":92,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":93,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":94,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":96,"author":{"gitId":"winson8222"},"content":"    "},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":"#endif // QUERYPARSER_H"}],"authorContributionMap":{"winson8222":45,"MSI\\vegit":54}},{"path":"Team19/Code19/src/spa/src/qps/parser/Token.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#include \"../../spa/src/qps/Parser/Token.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"// Initializes a Token object with a given type and value."},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"// @param type: The type of the token, from the TokenType enum."},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"// @param value: The string value of the token."},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"Token::Token(TokenType type, string value)"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":": type(type), value(std::move(value)) {}  // Initializer list used for efficiency."},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"// Returns the type of the token."},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"// @return TokenType: The type of this token."},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"TokenType Token::getType() const {"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    return type; "},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"// Returns the string value of the token."},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"// @return string: The value of this token."},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"string Token::getValue() const {"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    return value; "},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"// Implementations for subclasses would go here..."}],"authorContributionMap":{"MSI\\vegit":25}},{"path":"Team19/Code19/src/spa/src/qps/parser/Token.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"// Header guards to prevent multiple inclusions of this header file."},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef TOKEN_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"#define TOKEN_H"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cvector\u003e"},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"// Define an enumeration class TokenType."},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"// This enum class lists different types of tokens that can be recognized."},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"enum class TokenType {"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    IDENT,    "},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    INTEGER,  "},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    Wildcard,   "},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"    QuoutIDENT,"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    Operator,"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    DoubleQuote,"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    Lparenthesis,"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"    Rparenthesis,"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    Semicolon,"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    Comma,"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    DesignEntity,"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"    SelectKeyword,"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"    PatternKeyword,"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"    SuchKeyword,"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    ThatKeyword,"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    QuoutConst,"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"    Follows,"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"    FollowsT,"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":"    Parent,"},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":"    ParentT,"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"    Uses,"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":"    Modifies,"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"    ExpressionSpec,"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":41,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":42,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"// The Token class represents a token with a type and a string value."},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"class Token {"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    Token() \u003d default;  // Default constructor"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"    // Constructor: creates a Token with a given type and value."},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"    Token(TokenType type, string value);"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"    // Virtual Destructor: properly destroys Token objects."},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"    virtual ~Token() \u003d default;"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"    // getType: returns the type of the token."},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"    TokenType getType() const;"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"    // getValue: returns the string value of the token."},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    string getValue() const;"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"    TokenType type;    // Stores the type of the token"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"    string value; // Stores the string value of the token"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"// Subclasses for different token types can be defined here..."},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"#endif"}],"authorContributionMap":{"winson8222":16,"MSI\\vegit":53}},{"path":"Team19/Code19/src/spa/src/qps/parser/Tokenizer.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/Tokenizer.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"// Initializes the Tokenizer with a given query string."},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"Tokenizer::Tokenizer(const string\u0026 query) : query(query) {"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"    // Regex to split based on quouted text, whitespaces, parentheses, commas, semicolons"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"    tokenRegex \u003d std::regex(R\"(\"[^\"]*\"|[\\w.`~@#$%^\u0026*+\u003d{}:\u003c\u003e-]+|_|[,;()\\\"\\\u0027])\");"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"// This method tokenizes the stored query and returns a vector of Token objects."},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"vector\u003cToken\u003e Tokenizer::tokenize() {"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    splitQuery();  // Call the splitQuery method to get tokens."},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    return tokens;"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"// This method splits the query into tokens based on the regular expression."},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"// It returns a vector of Token objects representing the individual tokens."},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"void Tokenizer::splitQuery() {"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"    // Iterator to go through each token found by the regex."},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    std::sregex_token_iterator iter(query.begin(), query.end(), tokenRegex);"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    std::sregex_token_iterator end;  // End iterator."},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    for (; iter !\u003d end; ++iter) {  // Loop through all tokens."},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"        auto tokenType \u003d determineTokenType(*iter);  // Determine the type of each token."},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"        tokens.emplace_back(tokenType, *iter);  // Add the token to the vector."},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"     "},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"// Determines the type of a token based on its string representation."},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"// Returns the TokenType of the token."},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"TokenType Tokenizer::determineTokenType(const string\u0026 tokenStr) {"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"    // Logic to determine the type of the token."},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    // Wildcard: A single underscore."},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    if (tokenStr \u003d\u003d \"_\") {"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::Wildcard;"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    // ClauseKeyword: Specific clause keywords."},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^(Select|pattern|such|that)$\"))) {"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"        // The first case check if there is unconventional naming "},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"        // and avoids assigning wrong token type"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"        if (!tokens.empty() \u0026\u0026 (tokens.back().getType() \u003d\u003d TokenType::SelectKeyword || checkIfDeclaration())) {"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"            return TokenType::IDENT;"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"        if (tokenStr \u003d\u003d \"Select\") {"},{"lineNumber":51,"author":{"gitId":"winson8222"},"content":"            return TokenType::SelectKeyword;"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"pattern\") {"},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":"            return TokenType::PatternKeyword;"},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"such\") {"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"            return TokenType::SuchKeyword;"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"that\") {"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"            return TokenType::ThatKeyword;"},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"    // QuoutIDENT: An IDENT enclosed in double quotes."},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^\\\"[a-zA-Z][a-zA-Z0-9]*\\\"$\"))) {"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::QuoutIDENT;"},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"    // QuoutConst: A constant enclosed in double quotes (for pattern matching)."},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^\\\"[1-9]*\\\"$\"))) {"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::QuoutConst;"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"winson8222"},"content":"    //"},{"lineNumber":72,"author":{"gitId":"winson8222"},"content":"    else if (regex_match(tokenStr, regex(\"\\\".*\\\"\"))) {"},{"lineNumber":73,"author":{"gitId":"winson8222"},"content":"        return TokenType::DoubleQuote;"},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"    // Lparenthesis: \u0027(\u0027"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    else if (tokenStr \u003d\u003d \"(\") {"},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::Lparenthesis;"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"    // Rparenthesis: \u0027)\u0027"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":"    else if (tokenStr \u003d\u003d \")\") {"},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::Rparenthesis;"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"    // Semicolon: \u0027;\u0027"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":"    else if (tokenStr \u003d\u003d \";\") {"},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::Semicolon;"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"    // Comma: \u0027,\u0027"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":"    else if (tokenStr \u003d\u003d \",\") {"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::Comma;"},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"    // DesignEntity: Specific keywords."},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^(stmt|read|print|while|if|assign|variable|constant|procedure)$\"))) {"},{"lineNumber":93,"author":{"gitId":"MSI\\vegit"},"content":"        if (!tokens.empty() \u0026\u0026 (tokens.back().getType() \u003d\u003d TokenType::SelectKeyword || checkIfDeclaration())) {"},{"lineNumber":94,"author":{"gitId":"MSI\\vegit"},"content":"            return TokenType::IDENT;"},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"MSI\\vegit"},"content":"        else {"},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"            return TokenType::DesignEntity;"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"MSI\\vegit"},"content":"    // RelRef: Specific keywords."},{"lineNumber":101,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^(Follows|Follows\\\\*|Parent|Parent\\\\*|Uses|Modifies)$\"))) {"},{"lineNumber":102,"author":{"gitId":"MSI\\vegit"},"content":"        if (!tokens.empty() \u0026\u0026 (tokens.back().getType() \u003d\u003d TokenType::SelectKeyword || checkIfDeclaration())) {"},{"lineNumber":103,"author":{"gitId":"MSI\\vegit"},"content":"            return TokenType::IDENT;"},{"lineNumber":104,"author":{"gitId":"MSI\\vegit"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"MSI\\vegit"},"content":"        else if (tokenStr \u003d\u003d \"Follows\") {"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":"            return TokenType::Follows;"},{"lineNumber":107,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"Follows*\") {"},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"            return TokenType::FollowsT;"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"Parent\") {"},{"lineNumber":112,"author":{"gitId":"winson8222"},"content":"            return TokenType::Parent;"},{"lineNumber":113,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"Parent*\") {"},{"lineNumber":115,"author":{"gitId":"winson8222"},"content":"            return TokenType::ParentT;"},{"lineNumber":116,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"Uses\") {"},{"lineNumber":118,"author":{"gitId":"winson8222"},"content":"            return TokenType::Uses;"},{"lineNumber":119,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"winson8222"},"content":"        else if (tokenStr \u003d\u003d \"Modifies\") {"},{"lineNumber":121,"author":{"gitId":"winson8222"},"content":"            return TokenType::Modifies;"},{"lineNumber":122,"author":{"gitId":"winson8222"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"MSI\\vegit"},"content":"    // IDENT: Starts with a letter and may continue with letters or digits."},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^[a-zA-Z][a-zA-Z0-9]*$\"))) {"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::IDENT;"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":"    // INTEGER: Either 0 or a sequence of digits with no leading zero."},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"    else if (regex_match(tokenStr, regex(\"^(0|[1-9][0-9]*)$\"))) {"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"        return TokenType::INTEGER;"},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"winson8222"},"content":"    // OPERATOR\" \"+-*/%\u0026|\u003c\u003e\u003d!~^\""},{"lineNumber":133,"author":{"gitId":"winson8222"},"content":"    else if (regex_match(tokenStr, regex(\"^[+\\\\-*/%\u0026|\u003c\u003e\u003d!~^]$\"))) {"},{"lineNumber":134,"author":{"gitId":"winson8222"},"content":"        return TokenType::Operator;"},{"lineNumber":135,"author":{"gitId":"winson8222"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":137,"author":{"gitId":"MSI\\vegit"},"content":"    // If no pattern matches, throw an error."},{"lineNumber":138,"author":{"gitId":"MSI\\vegit"},"content":"    throw std::invalid_argument(\"Unrecognized token: \" + tokenStr);"},{"lineNumber":139,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":141,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":142,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":143,"author":{"gitId":"MSI\\vegit"},"content":"// Check if the current token is a declaration token"},{"lineNumber":144,"author":{"gitId":"MSI\\vegit"},"content":"bool Tokenizer::checkIfDeclaration() {"},{"lineNumber":145,"author":{"gitId":"MSI\\vegit"},"content":"    int i \u003d tokens.size() - 1;"},{"lineNumber":146,"author":{"gitId":"MSI\\vegit"},"content":"    while(i \u003e\u003d 0) {"},{"lineNumber":147,"author":{"gitId":"MSI\\vegit"},"content":"\t\tif (tokens[i].getType() \u003d\u003d TokenType::DesignEntity) {"},{"lineNumber":148,"author":{"gitId":"MSI\\vegit"},"content":"\t\t\treturn true;"},{"lineNumber":149,"author":{"gitId":"MSI\\vegit"},"content":"\t\t}"},{"lineNumber":150,"author":{"gitId":"MSI\\vegit"},"content":"        if (tokens[i].getType() \u003d\u003d TokenType::Semicolon) {"},{"lineNumber":151,"author":{"gitId":"MSI\\vegit"},"content":"\t\t\treturn false;"},{"lineNumber":152,"author":{"gitId":"MSI\\vegit"},"content":"\t\t}"},{"lineNumber":153,"author":{"gitId":"MSI\\vegit"},"content":"\t\ti--;"},{"lineNumber":154,"author":{"gitId":"MSI\\vegit"},"content":"\t}"},{"lineNumber":155,"author":{"gitId":"MSI\\vegit"},"content":"    return false;"},{"lineNumber":156,"author":{"gitId":"MSI\\vegit"},"content":"}"}],"authorContributionMap":{"winson8222":38,"MSI\\vegit":118}},{"path":"Team19/Code19/src/spa/src/qps/parser/Tokenizer.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"#ifndef TOKENIZER_H"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#define TOKENIZER_H"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/Token.h\""},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cstring\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cvector\u003e"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"#include \u003cregex\u003e"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"// The Tokenizer class is used for converting a string query into tokens."},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"class Tokenizer {"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"public:"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    // Constructor for the Tokenizer class."},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"    // It takes a constant reference to a string as input, representing the query to be tokenized."},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    // The \u0027explicit\u0027 keyword prevents implicit conversions from string to Tokenizer."},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"    explicit Tokenizer(const string\u0026 query);"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    // This method tokenizes the stored query and returns a vector of Token objects."},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokenize();"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"private:"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"    // Private member variable to store the query string."},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    string query;"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"    // A regular expression object used to identify tokens in the query string."},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"    regex tokenRegex;"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"    // A private method that splits the query into tokens based on the regular expression."},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    // Returns a vector of Token objects."},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"    void splitQuery();"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens;"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"    // A private method to determine the type of a token given its string representation."},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"    // Returns the TokenType of the token which is usefull in the QueryParser."},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"    TokenType determineTokenType(const string\u0026 tokenStr);"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"    bool checkIfDeclaration();"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"};"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"#endif // TOKENIZER_H"}],"authorContributionMap":{"winson8222":1,"MSI\\vegit":41}},{"path":"Team19/Code19/src/spa/src/sp/AST/AST.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"AST.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 2, e)"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"AST::AST(std::shared_ptr\u003cASTNode\u003e root) : root(std::move(root)) {}"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"const ASTNode* AST::getRoot() const {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    return root.get();"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/AST/AST.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"ASTNode.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cmap\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003csstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstring\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cutility\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"class AST {"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    AST(std::shared_ptr\u003cASTNode\u003e root);"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    const ASTNode* getRoot() const;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":19}},{"path":"Team19/Code19/src/spa/src/sp/AST/ASTNode.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"ASTNode.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"AST.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003csstream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 2, e)"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"ASTNode::ASTNode() {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003etype \u003d ASTNodeType::PROGRAMS;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003elineNumber \u003d 0;"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003evalue \u003d \"default\";"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"ASTNode::ASTNode(ASTNodeType type, int lineNumber, std::string value) {"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003etype \u003d type;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003elineNumber \u003d lineNumber;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003evalue \u003d value;"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"void ASTNode::addChild(std::shared_ptr\u003cASTNode\u003e child) {"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003echildren.push_back(std::move(child));"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"void ASTNode::setValue(std::string value) {"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003evalue \u003d value;"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"// Implementation of hash function for ASTNode"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"std::size_t ASTNode::hash() const {"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    // Concatenate the properties of ASTNode"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    std::stringstream ss;"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    ss \u003c\u003c Utility::getASTNodeType(type) \u003c\u003c lineNumber \u003c\u003c value;"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    // Hash the concatenated string"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    std::hash\u003cstd::string\u003e hasher;"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    return hasher(ss.str());"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"// Method to convert AST node to a string"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"std::string ASTNode::toString() const {"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    return \"String representations: \\n\" + recursiveString(0);"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"// Helper method to convert AST node to a string recursively"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"std::string ASTNode::recursiveString(int tabs) const {"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    std::ostringstream stringStream;"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    // to tab a tree representing the children"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"    for (int i \u003d 0; i \u003c tabs; ++i)"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"        stringStream \u003c\u003c \"  \";"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    stringStream \u003c\u003c \"Type: \" \u003c\u003c Utility::getASTNodeType(type) \u003c\u003c \", Line Number: \" \u003c\u003c lineNumber \u003c\u003c \", Value: \" \u003c\u003c value \u003c\u003c \"\\n\";"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 child : children) {"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"        stringStream \u003c\u003c child-\u003erecursiveString(tabs + 1);"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    return stringStream.str();"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"bool ASTNode::operator\u003d\u003d(const ASTNode\u0026 other) const {"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"    return type \u003d\u003d other.type \u0026\u0026"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"        lineNumber \u003d\u003d other.lineNumber \u0026\u0026"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"        value \u003d\u003d other.value;"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":63}},{"path":"Team19/Code19/src/spa/src/sp/AST/ASTNode.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cmemory\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstring\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 2, e)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"enum class ASTNodeType {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    PROGRAMS, PROCEDURE, STATEMENT_LIST,"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    // Statements"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    READ, PRINT, CALL, WHILE, IF_ELSE_THEN, ASSIGN,"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    // Expressions and operators"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    NOT, AND, OR, GREATER, GREATER_OR_EQUAL, LESSER, LESSER_OR_EQUAL,EQUAL, NOT_EQUAL,"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO,"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    // Entities"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    VARIABLE, CONSTANT,"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    OTHER,"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    ERROR,"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"};"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":" * @brief Represents a node in the Abstract Syntax Tree (AST)."},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":" */"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"class ASTNode {"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Default constructor for ASTNode."},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode();"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Constructor for creating an ASTNode with specified type, line number, and value."},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"     * @param type The type of the AST node."},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"     * @param lineNumber The line number associated with the AST node."},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"     * @param value The value associated with the AST node."},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode(ASTNodeType type, int lineNumber, std::string value);"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Adds a child node to the current AST node."},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"     * @param child A shared pointer to the child AST node to be added."},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    void addChild(std::shared_ptr\u003cASTNode\u003e child);"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Sets the value of the current AST node."},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"     * @param value The value to be set for the current AST node."},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    void setValue(std::string value);"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Computes the hash value of the current AST node."},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"    *"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    * @return The hash value of the current AST node."},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"    std::size_t hash() const;"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Checks if two AST nodes are equal."},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"     * @param other The AST node to compare with."},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"     * @return True if the two AST nodes are equal, otherwise false."},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"    bool operator\u003d\u003d(const ASTNode\u0026 other) const;"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Converts the AST node to a string representation."},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"     * @return A string representation of the AST node."},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":"    std::string toString() const;"},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"    // To be set as private in future"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNodeType type;"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cstd::shared_ptr\u003cASTNode\u003e\u003e children;"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"    int lineNumber;"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"    std::string value;"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"     * @brief Generates a string representation of the AST node and its children recursively."},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"     * @param tabs The number of tabs to indent the string representation."},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"     * @return A string representation of the AST node and its children."},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"    std::string recursiveString(int tabs) const;"},{"lineNumber":98,"author":{"gitId":"hmanhduc2k"},"content":"};"},{"lineNumber":99,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":100,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":101,"author":{"gitId":"hmanhduc2k"},"content":"namespace std {"},{"lineNumber":102,"author":{"gitId":"hmanhduc2k"},"content":"    template\u003c\u003e struct hash\u003cASTNode\u003e {"},{"lineNumber":103,"author":{"gitId":"hmanhduc2k"},"content":"        std::size_t operator()(const ASTNode\u0026 node) const {"},{"lineNumber":104,"author":{"gitId":"hmanhduc2k"},"content":"            // Combine hash values of type, lineNumber, and value"},{"lineNumber":105,"author":{"gitId":"hmanhduc2k"},"content":"            return std::hash\u003clong long\u003e{}(node.hash());"},{"lineNumber":106,"author":{"gitId":"hmanhduc2k"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"hmanhduc2k"},"content":"    };"},{"lineNumber":108,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":109,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":110,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen end"}],"authorContributionMap":{"hmanhduc2k":110}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/DesignExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 0, e)"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"// prompt https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"DesignExtractor.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"DesignExtractor::DesignExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    : root(std::move(root)), pkbWriterManager(std::move(pkbWriterManager)) {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    // No need to assign them in the constructor body"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::populatePKB() {"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"  std::shared_ptr\u003cConstantWriter\u003e constantWriter \u003d pkbWriterManager-\u003egetConstantWriter();"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cVariableWriter\u003e variableWriter \u003d pkbWriterManager-\u003egetVariableWriter();"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cProcedureWriter\u003e procedureWriter \u003d pkbWriterManager-\u003egetProcedureWriter();"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cCallWriter\u003e callWriter \u003d pkbWriterManager-\u003egetCallWriter();"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPrintWriter\u003e printWriter \u003d pkbWriterManager-\u003egetPrintWriter();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cReadWriter\u003e readWriter \u003d pkbWriterManager-\u003egetReadWriter();"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cAssignWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignWriter();"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cIfWriter\u003e ifWriter \u003d pkbWriterManager-\u003egetIfWriter();"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cWhileWriter\u003e whileWriter \u003d pkbWriterManager-\u003egetWhileWriter();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 pair : stringInformation) {"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"        for (auto value : pair.second) {"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"            if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::CONSTANT)) {"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tint intValue \u003d std::stoi(value);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"\t\t\t\tconstantWriter-\u003einsertConstant(intValue);"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::VARIABLE)) {"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"                variableWriter-\u003einsertVariable(value);"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROCEDURE)) {"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"\t\t\t\tprocedureWriter-\u003einsertProcedure(value);"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 pair : intInformation) {"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"        for (auto value : pair.second) {"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"            if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::CALL)) {"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"\t\t\t\tcallWriter-\u003einsertCall(value);"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::PRINT)) {"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"\t\t\t\tprintWriter-\u003einsertPrint(value);"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::READ)) {"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"\t\t\t\treadWriter-\u003einsertRead(value);"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::ASSIGN)) {"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"\t\t\t\tassignWriter-\u003einsertAssign(value);"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::IF_ELSE_THEN)) {"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"\t\t\t\tifWriter-\u003einsertIf(value);"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::WHILE)) {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"\t\t\t\twhileWriter-\u003einsertWhile(value);"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"            else if (pair.first \u003d\u003d Utility::getASTNodeType(ASTNodeType::STATEMENT_LIST)) {"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"                statementWriter-\u003einsertStatement(value);"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractAll() {"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"\t// Implementation of extractAll method goes here"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"\textractFollows();"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"\textractFollowsStar();"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"\textractParents();"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"\textractParentsStar();"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"\textractUses();"},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"\textractModifies();"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003estringInformation[Utility::getDesignType(ASTNodeType::PROCEDURE)] \u003d extractProcedures();"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::ASSIGN)] \u003d extractAssigns();"},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::IF_ELSE_THEN)] \u003d extractIf();"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::WHILE)] \u003d extractWhiles();"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::CALL)] \u003d extractCall();"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::READ)] \u003d extractRead();"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::PRINT)] \u003d extractPrint();"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003eintInformation[Utility::getDesignType(ASTNodeType::STATEMENT_LIST)] \u003d extractStatements();"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003estringInformation[Utility::getDesignType(ASTNodeType::CONSTANT)] \u003d extractConstants();"},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003estringInformation[Utility::getDesignType(ASTNodeType::VARIABLE)] \u003d extractVariables();"},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::printContent() {"},{"lineNumber":98,"author":{"gitId":"hmanhduc2k"},"content":"    // Print contents of stringInformation"},{"lineNumber":99,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Contents of stringInformation:\" \u003c\u003c std::endl;"},{"lineNumber":100,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 pair : stringInformation) {"},{"lineNumber":101,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c pair.first \u003c\u003c \": {\";"},{"lineNumber":102,"author":{"gitId":"hmanhduc2k"},"content":"        const auto\u0026 set \u003d pair.second;"},{"lineNumber":103,"author":{"gitId":"hmanhduc2k"},"content":"        for (const auto\u0026 str : set) {"},{"lineNumber":104,"author":{"gitId":"hmanhduc2k"},"content":"            std::cout \u003c\u003c str \u003c\u003c \", \";"},{"lineNumber":105,"author":{"gitId":"hmanhduc2k"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c \"}\" \u003c\u003c std::endl;"},{"lineNumber":107,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":109,"author":{"gitId":"hmanhduc2k"},"content":"    // Print contents of intInformation"},{"lineNumber":110,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Contents of intInformation:\" \u003c\u003c std::endl;"},{"lineNumber":111,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 pair : intInformation) {"},{"lineNumber":112,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c pair.first \u003c\u003c \": {\";"},{"lineNumber":113,"author":{"gitId":"hmanhduc2k"},"content":"        const auto\u0026 set \u003d pair.second;"},{"lineNumber":114,"author":{"gitId":"hmanhduc2k"},"content":"        for (const auto\u0026 num : set) {"},{"lineNumber":115,"author":{"gitId":"hmanhduc2k"},"content":"            std::cout \u003c\u003c num \u003c\u003c \", \";"},{"lineNumber":116,"author":{"gitId":"hmanhduc2k"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c \"}\" \u003c\u003c std::endl;"},{"lineNumber":118,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":120,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":121,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::entityRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 entities, ASTNodeType type) {"},{"lineNumber":122,"author":{"gitId":"hmanhduc2k"},"content":"    if (node-\u003etype \u003d\u003d type) {"},{"lineNumber":123,"author":{"gitId":"hmanhduc2k"},"content":"        // If it\u0027s a variable node, add it to the set"},{"lineNumber":124,"author":{"gitId":"hmanhduc2k"},"content":"        entities.push_back(*node);"},{"lineNumber":125,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"hmanhduc2k"},"content":"    // Recursively traverse children"},{"lineNumber":127,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 child : node-\u003echildren) {"},{"lineNumber":128,"author":{"gitId":"hmanhduc2k"},"content":"        entityRecursiveExtractor(child, entities, type);"},{"lineNumber":129,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":131,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":132,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":133,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::statementRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 statements, ASTNodeType type) {"},{"lineNumber":134,"author":{"gitId":"hmanhduc2k"},"content":"    if (node-\u003etype \u003d\u003d type) {"},{"lineNumber":135,"author":{"gitId":"hmanhduc2k"},"content":"        // If it\u0027s a variable node, add it to the set"},{"lineNumber":136,"author":{"gitId":"hmanhduc2k"},"content":"        statements.push_back(*node);"},{"lineNumber":137,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"hmanhduc2k"},"content":"    // Recursively traverse children"},{"lineNumber":139,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 child : node-\u003echildren) {"},{"lineNumber":140,"author":{"gitId":"hmanhduc2k"},"content":"        entityRecursiveExtractor(child, statements, type);"},{"lineNumber":141,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":143,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":144,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::procedureRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 procedures) {"},{"lineNumber":145,"author":{"gitId":"hmanhduc2k"},"content":"    if (node-\u003etype \u003d\u003d ASTNodeType::PROCEDURE) {"},{"lineNumber":146,"author":{"gitId":"hmanhduc2k"},"content":"        // If it\u0027s a variable node, add it to the set"},{"lineNumber":147,"author":{"gitId":"hmanhduc2k"},"content":"        procedures.push_back(*node);"},{"lineNumber":148,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"hmanhduc2k"},"content":"    // Recursively traverse children"},{"lineNumber":150,"author":{"gitId":"hmanhduc2k"},"content":"    for (const auto\u0026 child : node-\u003echildren) {"},{"lineNumber":151,"author":{"gitId":"hmanhduc2k"},"content":"        procedureRecursiveExtractor(child, procedures);"},{"lineNumber":152,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":154,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":155,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":156,"author":{"gitId":"hmanhduc2k"},"content":"// Relations"},{"lineNumber":157,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":158,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractFollows() {"},{"lineNumber":159,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractFollows method goes here"},{"lineNumber":160,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":161,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":162,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractFollowsStar() {"},{"lineNumber":163,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractFollowsStar method goes here"},{"lineNumber":164,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":165,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":166,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractParents() {"},{"lineNumber":167,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractParents method goes here"},{"lineNumber":168,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":169,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":170,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractParentsStar() {"},{"lineNumber":171,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractParentsStar method goes here"},{"lineNumber":172,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":173,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":174,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractUses() {"},{"lineNumber":175,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractUses method goes here"},{"lineNumber":176,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":177,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":178,"author":{"gitId":"hmanhduc2k"},"content":"void DesignExtractor::extractModifies() {"},{"lineNumber":179,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractModifies method goes here"},{"lineNumber":180,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":181,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":182,"author":{"gitId":"hmanhduc2k"},"content":"// Programs"},{"lineNumber":183,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":184,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cstd::string\u003e DesignExtractor::extractProcedures() {"},{"lineNumber":185,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractProcedures method goes here"},{"lineNumber":186,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e variables;"},{"lineNumber":187,"author":{"gitId":"hmanhduc2k"},"content":"    procedureRecursiveExtractor(root, variables);"},{"lineNumber":188,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":189,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e procedureNames;"},{"lineNumber":190,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : variables) {"},{"lineNumber":191,"author":{"gitId":"hmanhduc2k"},"content":"        procedureNames.insert(node.value);"},{"lineNumber":192,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":194,"author":{"gitId":"hmanhduc2k"},"content":"    return procedureNames;"},{"lineNumber":195,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":196,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":197,"author":{"gitId":"hmanhduc2k"},"content":"// Statements"},{"lineNumber":198,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":199,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractAssigns() {"},{"lineNumber":200,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractAssigns method goes here"},{"lineNumber":201,"author":{"gitId":"hmanhduc2k"},"content":"    return std::unordered_set\u003cint\u003e();"},{"lineNumber":202,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":203,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":204,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractStatements() {"},{"lineNumber":205,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractStatements method goes here"},{"lineNumber":206,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e allStatements;"},{"lineNumber":207,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":208,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e assigns \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::ASSIGN)];"},{"lineNumber":209,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e ifs \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::IF_ELSE_THEN)];"},{"lineNumber":210,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e whiles \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::WHILE)];"},{"lineNumber":211,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e calls \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::CALL)];"},{"lineNumber":212,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e reads \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::READ)];"},{"lineNumber":213,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e prints \u003d this-\u003eintInformation[Utility::getDesignType(ASTNodeType::PRINT)];"},{"lineNumber":214,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":215,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(assigns.begin(), assigns.end());"},{"lineNumber":216,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(ifs.begin(), ifs.end());"},{"lineNumber":217,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(whiles.begin(), whiles.end());"},{"lineNumber":218,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(calls.begin(), calls.end());"},{"lineNumber":219,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(reads.begin(), reads.end());"},{"lineNumber":220,"author":{"gitId":"hmanhduc2k"},"content":"    allStatements.insert(prints.begin(), prints.end());"},{"lineNumber":221,"author":{"gitId":"hmanhduc2k"},"content":"    return allStatements;"},{"lineNumber":222,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":223,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":224,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractIf() {"},{"lineNumber":225,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractIf method goes here"},{"lineNumber":226,"author":{"gitId":"hmanhduc2k"},"content":"    return std::unordered_set\u003cint\u003e();"},{"lineNumber":227,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":228,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":229,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractWhiles() {"},{"lineNumber":230,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractWhiles method goes here"},{"lineNumber":231,"author":{"gitId":"hmanhduc2k"},"content":"    return std::unordered_set\u003cint\u003e();"},{"lineNumber":232,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":233,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":234,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractCall() {"},{"lineNumber":235,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractCall method goes here"},{"lineNumber":236,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e callStatements;"},{"lineNumber":237,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":238,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e prints;"},{"lineNumber":239,"author":{"gitId":"hmanhduc2k"},"content":"    statementRecursiveExtractor(root, prints, ASTNodeType::CALL);"},{"lineNumber":240,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":241,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : prints) {"},{"lineNumber":242,"author":{"gitId":"hmanhduc2k"},"content":"        callStatements.insert(node.lineNumber);"},{"lineNumber":243,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":245,"author":{"gitId":"hmanhduc2k"},"content":"    return callStatements;"},{"lineNumber":246,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":247,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":248,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractRead() {"},{"lineNumber":249,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractRead method goes here"},{"lineNumber":250,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e readStatements;"},{"lineNumber":251,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":252,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e prints;"},{"lineNumber":253,"author":{"gitId":"hmanhduc2k"},"content":"    statementRecursiveExtractor(root, prints, ASTNodeType::READ);"},{"lineNumber":254,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":255,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : prints) {"},{"lineNumber":256,"author":{"gitId":"hmanhduc2k"},"content":"        readStatements.insert(node.lineNumber);"},{"lineNumber":257,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":259,"author":{"gitId":"hmanhduc2k"},"content":"    return readStatements;"},{"lineNumber":260,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":261,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":262,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cint\u003e DesignExtractor::extractPrint() {"},{"lineNumber":263,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractPrint method goes here"},{"lineNumber":264,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e printStatements;"},{"lineNumber":265,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":266,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e prints;"},{"lineNumber":267,"author":{"gitId":"hmanhduc2k"},"content":"    statementRecursiveExtractor(root, prints, ASTNodeType::PRINT);"},{"lineNumber":268,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":269,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : prints) {"},{"lineNumber":270,"author":{"gitId":"hmanhduc2k"},"content":"        printStatements.insert(node.lineNumber);"},{"lineNumber":271,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":273,"author":{"gitId":"hmanhduc2k"},"content":"    return printStatements;"},{"lineNumber":274,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":275,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":276,"author":{"gitId":"hmanhduc2k"},"content":"// Entities"},{"lineNumber":277,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":278,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cstd::string\u003e DesignExtractor::extractVariables() {"},{"lineNumber":279,"author":{"gitId":"hmanhduc2k"},"content":"    // Recursive function to traverse the AST and extract variables"},{"lineNumber":280,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractVariablesRecursive method goes here"},{"lineNumber":281,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e variables;"},{"lineNumber":282,"author":{"gitId":"hmanhduc2k"},"content":"    entityRecursiveExtractor(root, variables, ASTNodeType::VARIABLE);"},{"lineNumber":283,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":284,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e variableNames;"},{"lineNumber":285,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : variables) {"},{"lineNumber":286,"author":{"gitId":"hmanhduc2k"},"content":"\t\tvariableNames.insert(node.value);"},{"lineNumber":287,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":288,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":289,"author":{"gitId":"hmanhduc2k"},"content":"\treturn variableNames;"},{"lineNumber":290,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":291,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":292,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":293,"author":{"gitId":"hmanhduc2k"},"content":"std::unordered_set\u003cstd::string\u003e DesignExtractor::extractConstants() {"},{"lineNumber":294,"author":{"gitId":"hmanhduc2k"},"content":"    // Implementation of extractConstants method goes here"},{"lineNumber":295,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cASTNode\u003e constants;"},{"lineNumber":296,"author":{"gitId":"hmanhduc2k"},"content":"    entityRecursiveExtractor(root, constants, ASTNodeType::CONSTANT);"},{"lineNumber":297,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":298,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e constantValues;"},{"lineNumber":299,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto node : constants) {"},{"lineNumber":300,"author":{"gitId":"hmanhduc2k"},"content":"        constantValues.insert(node.value);"},{"lineNumber":301,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":303,"author":{"gitId":"hmanhduc2k"},"content":"    return constantValues;"},{"lineNumber":304,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":280,"jianoway":24}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/DesignExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 0, e)"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"// prompt https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"#include \"pkb/PKBWriterManager.h\""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\" // Assuming you have ASTNode defined in ASTNode.h"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/FacadeDesignExtractor.h\""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"class DesignExtractor {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    // Constructor taking in the root node of the AST"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    DesignExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager);"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    const ASTNode\u0026 getRoot() const {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"        return *root;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cstd::string\u003e\u003e stringInformation;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_map\u003cstd::string, std::unordered_set\u003cint\u003e\u003e intInformation;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    void extractAll();"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    void populatePKB();"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"    // all the method below should be private in the future"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    // Method to extract all variables from the AST"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    void extractFollows();"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"    void extractFollowsStar();"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    void extractParents();"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    void extractParentsStar();"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    void extractUses();"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    void extractModifies();"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractAssigns();"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e extractConstants();"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e extractProcedures();"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractStatements();"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractIf();"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractWhiles();"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractCall();"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractRead();"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractPrint();"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e extractVariables();"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    void printContent();"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    void entityRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 entities, ASTNodeType type);"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    void statementRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 statements, ASTNodeType type);"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"    void procedureRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 procedures);"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    // To be implemented later"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"    // void relationRecursiveExtractor(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 relations, ASTNodeType type);"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    // void recursivelyExtractVariables(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 variables);"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"\t// void recursivelyExtractConstants(const std::shared_ptr\u003cASTNode\u003e\u0026 node, std::vector\u003cASTNode\u003e\u0026 constants);"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":58,"jianoway":3}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/AssignExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/AssignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void AssignExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// Extract all the assign statements"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/AssignExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class AssignExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit AssignExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/CallExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/CallExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void CallExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// Extract all the assign statements"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/CallExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class CallExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit CallExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ConstantExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ConstantExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void ConstantExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// Extract all the assign statements"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ConstantExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"class ConstantExtractor : public IExtractor {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit ConstantExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (root-\u003etype !\u003d ASTNodeType::CONSTANT) {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::invalid_argument(\"VariableExtractor: root is not of type VARIABLE\");"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":16}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/FollowsExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class FollowsExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit FollowsExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/IExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class IExtractor {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    explicit IExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: root(root), pkbWriterManager(pkbWriterManager) {}"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tvirtual void extract() \u003d 0;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":17}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/IfElseThenExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class IfThenElseExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit IfThenElseExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ModifiesExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class ModifiesExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit ModifiesExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ParentExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class ParentExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit ParentExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/PrintExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/PrintExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void PrintExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003epkbWriterManager-\u003egetPrintWriter()-\u003einsertPrint(this-\u003eroot-\u003elineNumber);"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/PrintExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class PrintExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit PrintExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\t"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":13}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ProcedureExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ProcedureExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void ProcedureExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003epkbWriterManager-\u003egetProcedureWriter()-\u003einsertProcedure(root-\u003evalue);"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ProcedureExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"class ProcedureExtractor : public IExtractor {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit ProcedureExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":12}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ReadExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ReadExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void ReadExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003epkbWriterManager-\u003egetReadWriter()-\u003einsertRead(this-\u003eroot-\u003elineNumber);"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/ReadExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"class ReadExtractor : public IExtractor {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit ReadExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":12}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/UsesExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class UsesExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit UsesExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/VariableExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/VariableExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void VariableExtractor::extract() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003epkbWriterManager-\u003egetVariableWriter()-\u003eaddEntity(this-\u003eroot-\u003evalue);"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/VariableExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"class VariableExtractor : public IExtractor {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit VariableExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (root-\u003etype !\u003d ASTNodeType::VARIABLE) {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::invalid_argument(\"VariableExtractor: root is not of type VARIABLE\");"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":16}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Extractor/WhileExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IExtractor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class WhileExtractor : public IExtractor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\texplicit WhileExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IExtractor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extract() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/FacadeDesignExtractor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"FacadeDesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void FDesignExtractor::extractAll() {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\tif (root-\u003etype !\u003d ASTNodeType::PROGRAMS) {"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"ERROR: This is not the start node!\");"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tfor (auto\u0026 procs : root-\u003echildren) {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (procs-\u003etype !\u003d ASTNodeType::PROCEDURE) {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::runtime_error(\"ERROR: This is not a procedure node!\");"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\tProcedureVisitor procedureVisitor(procs, pkbWriterManager);"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t\tprocedureVisitor.visit();"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":15}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/FacadeDesignExtractor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBWriterManager.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/AssignVisitor.h\""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/CallVisitor.h\""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IfElseThenVisitor.h\""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/PrintVisitor.h\""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ReadVisitor.h\""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/WhileVisitor.h\""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ProcedureVisitor.h\""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/AssignExtractor.h\""},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/CallExtractor.h\""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/IfElseThenExtractor.h\""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/PrintExtractor.h\""},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ReadExtractor.h\""},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/WhileExtractor.h\""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ProcedureExtractor.h\""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ParentExtractor.h\""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ModifiesExtractor.h\""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ModifiesExtractor.h\""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/UsesExtractor.h\""},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ConstantExtractor.h\""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/VariableExtractor.h\""},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"class FDesignExtractor {"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"    FDesignExtractor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"        : root(root), pkbWriterManager(pkbWriterManager) {}"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    void extractAll();"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":42}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/AssignVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/AssignVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void AssignVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"  // TODO: Implement this"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"void AssignVisitor::visit() {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t// TODO"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":9}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/AssignVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 2, e)"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://platform.openai.com/playground/p/WEPuYktjSFWSXYtIjbHMb5KZ?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"class AssignVisitor : public IVisitor {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tAssignVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t: IVisitor(root, pkbWriterManager) {}"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"};"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen end"}],"authorContributionMap":{"hmanhduc2k":18}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/CallVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/CallVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void CallVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing for now"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"void CallVisitor::visit() {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t// TODO"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":9}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/CallVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen starts"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://platform.openai.com/playground/p/WEPuYktjSFWSXYtIjbHMb5KZ?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class CallVisitor : public IVisitor {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tCallVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t: IVisitor(root, pkbWriterManager) {}"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"};"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen ends"}],"authorContributionMap":{"hmanhduc2k":17}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ExpressionVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ExpressionVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"ExpressionVisitor::ExpressionVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t: IVisitor(root, pkbWriterManager) {"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\t"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"void ExpressionVisitor::visit() {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"void ExpressionVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":14}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ExpressionVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class ExpressionVisitor : public IVisitor {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tExpressionVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager);"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":14}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/IVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\" // Assuming you have ASTNode defined in ASTNode.h"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"class AssignNode;"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class ReadNode;"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"class PrintNode;"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"class CallNode;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"class WhileNode;"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"class IfNode;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"class VariableNode;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"class ConstantNode;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"class ProcedureNode;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"class StatementListNode;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"// Forward declarations for other node types..."},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"// https://chat.openai.com/share/7d5c29d9-43f6-4c36-b04e-0fca3b0e96ff"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"class IVisitor {"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    virtual void visit(std::shared_ptr\u003cASTNode\u003e node) \u003d 0;"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    virtual void visit() \u003d 0;"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    // Add more visit methods for other specific node types"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    virtual ~IVisitor() {}"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    explicit IVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: root(root), pkbWriterManager(pkbWriterManager) {}"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager;"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":33}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/IfElseThenVIsitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IfElseThenVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void IfElseThenVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing for now"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"void IfElseThenVisitor::visit() {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t// TODO"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":10}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/IfElseThenVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"class IfElseThenVisitor : public IVisitor {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\tIfElseThenVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IVisitor(root, pkbWriterManager) {}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/PrintVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/PrintVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"PrintVisitor::PrintVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t: IVisitor(root, pkbWriterManager) {"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\tif (root-\u003etype !\u003d ASTNodeType::PRINT) {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::invalid_argument(\"PrintVisitor - root is not of type PRINT\");"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tif (root-\u003echildren.size() !\u003d 1) {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::invalid_argument(\"PrintVisitor - root does not have 1 child\");"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"void PrintVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing for now"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"void PrintVisitor::visit() {"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t// TODO"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\tif (this-\u003eroot-\u003etype !\u003d ASTNodeType::PRINT) {"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"This is not a print node!\");"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\t// I\u0027m here in the Print Visitor - now my purpose is"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\t// to populate print statements and the variable (and the uses relationships)"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\tPrintExtractor printExtractor(this-\u003eroot, this-\u003epkbWriterManager);"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\tprintExtractor.extract();"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tVariableExtractor variableExtractor(this-\u003eroot-\u003echildren[0], this-\u003epkbWriterManager);"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\tvariableExtractor.extract();"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":30}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/PrintVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/PrintExtractor.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/VariableExtractor.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"class PrintVisitor : public IVisitor {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tPrintVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager);"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":16}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ProcedureVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ProcedureVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void ProcedureVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing for now"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\tProcedureExtractor extractor(node, pkbWriterManager);"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\textractor.extract();"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"void ProcedureVisitor::visit() {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tProcedureExtractor extractor(this-\u003eroot, this-\u003epkbWriterManager);"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\textractor.extract();"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t// extract information of the procedure nodes: Done"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tif (this-\u003eroot-\u003echildren.size() \u003d\u003d 0) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t\treturn;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t// TODO: Recursively visit the statement list node, then later recursively visit all statements"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\tif (this-\u003eroot-\u003echildren[0]-\u003etype !\u003d ASTNodeType::STATEMENT_LIST) {"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"Procedure node does not have a statement list node\");"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tif (this-\u003eroot-\u003echildren.size() !\u003d 1) {"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"Procedure node has more than 1 child\");"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\tStatementListVisitor statementListVisitor(this-\u003eroot-\u003echildren[0], this-\u003epkbWriterManager);"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\tstatementListVisitor.visit();"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":25}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ProcedureVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ProcedureExtractor.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/StatementListVisitor.h\""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"class ProcedureVisitor : public IVisitor {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tProcedureVisitor(std::shared_ptr\u003cASTNode\u003e node, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IVisitor(node, pkbWriterManager) {"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (node-\u003etype !\u003d ASTNodeType::PROCEDURE) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::invalid_argument(\"ProcedureVisitor - input node type must be of type PROCEDURE\");"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t// Purpose: From this node, extract information from the current node"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t// then recursively call other visitor to visit children nodes"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":22}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ReadVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ReadVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void ReadVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// std::string readVar \u003d node.getReadVar();"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\t// pkbWriterManager-\u003einsertReadStmt(node.getStatementNumber(), readVar);"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"void ReadVisitor::visit() {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\tReadExtractor readExtractor(this-\u003eroot, this-\u003epkbWriterManager);"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\treadExtractor.extract();"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tVariableExtractor variableExtractor(this-\u003eroot-\u003echildren[0], this-\u003epkbWriterManager);"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tvariableExtractor.extract();"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":14}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/ReadVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/ReadExtractor.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Extractor/VariableExtractor.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"class ReadVisitor : public IVisitor {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tReadVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IVisitor(root, pkbWriterManager) {"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (root-\u003etype !\u003d ASTNodeType::READ) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::invalid_argument(\"ReadVisitor - root is not of type PRINT\");"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (root-\u003echildren.size() !\u003d 1) {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::invalid_argument(\"ReadVisitor - root does not have 1 child\");"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":23}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/StatementListVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/StatementListVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"void StatementListVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"void StatementListVisitor::visit() {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tauto statementLists \u003d this-\u003eroot-\u003echildren;"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\tfor (auto statement : statementLists) {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t\tstd::cout \u003c\u003c Utility::getASTNodeType(statement-\u003etype) \u003c\u003c std::endl;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (!Utility::nodeIsStatement(statement-\u003etype)) {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::runtime_error(\"ERROR: Not a statement!\");"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (statement-\u003etype \u003d\u003d ASTNodeType::ASSIGN) {"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tAssignVisitor assignVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tassignVisitor.visit();"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse if (statement-\u003etype \u003d\u003d ASTNodeType::PRINT) {"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tPrintVisitor printVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tprintVisitor.visit();"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse if (statement-\u003etype \u003d\u003d ASTNodeType::READ) {"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tReadVisitor readVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\treadVisitor.visit();"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse if (statement-\u003etype \u003d\u003d ASTNodeType::CALL) {"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tCallVisitor callVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tcallVisitor.visit();"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse if (statement-\u003etype \u003d\u003d ASTNodeType::IF_ELSE_THEN) {"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tIfElseThenVisitor ifElseThenVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tifElseThenVisitor.visit();"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse if (statement-\u003etype \u003d\u003d ASTNodeType::WHILE) {"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tWhileVisitor whileVisitor(statement, this-\u003epkbWriterManager);"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\twhileVisitor.visit();"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\t\telse {"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tthrow std::runtime_error(\"ERROR: Not a statement!\");"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":43}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/StatementListVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/AssignVisitor.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/WhileVisitor.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IfElseThenVisitor.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/CallVisitor.h\""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/ReadVisitor.h\""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/PrintVisitor.h\""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"class StatementListVisitor : public IVisitor {"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\tStatementListVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\t: IVisitor(root, pkbWriterManager) {}"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":22}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/WhileVisitor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/WhileVisitor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"WhileVisitor::WhileVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager)"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"\t: IVisitor(root, pkbWriterManager) {"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\tif (root-\u003etype !\u003d ASTNodeType::WHILE) {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"ERROR: Cannot initialized a non-WHILE node\");"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"void WhileVisitor::visit(std::shared_ptr\u003cASTNode\u003e node) {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"void WhileVisitor::visit() {"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t// do nothing"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\tif (root-\u003echildren.size() !\u003d 2) {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"ERROR: While node is not correct\");"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\tauto statementList \u003d root-\u003echildren[0];"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tStatementListVisitor statementListVisitor(statementList, pkbWriterManager);"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tstatementListVisitor.visit();"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":22}},{"path":"Team19/Code19/src/spa/src/sp/DesignExtractor/Visitor/WhileVisitor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/IVisitor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/Visitor/StatementListVisitor.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cmemory\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class WhileVisitor : public IVisitor {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tWhileVisitor(std::shared_ptr\u003cASTNode\u003e root, std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager);"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit(std::shared_ptr\u003cASTNode\u003e node) override;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid visit() override;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":14}},{"path":"Team19/Code19/src/spa/src/sp/Parser/SimpleParser.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"SimpleParser.h\""},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003ciostream\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt,2,e)"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/cJLjmmneCEs4z6ms7ZkBSxJB?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"SimpleParser::SimpleParser(std::string filename) {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003etokenStream \u003d SPTokenizer::tokenize(FileProcessor::readFileToString(filename));"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003etokenIndex \u003d 0;"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseProgram() {"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"\tstd::vector\u003cstd::shared_ptr\u003cASTNode\u003e\u003e procedures;"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":15,"author":{"gitId":"Guan Wei"},"content":"\twhile (this-\u003ehasTokensLeft()) {"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"\t\tprocedures.push_back(this-\u003eparseProcedure());"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::PROGRAMS, 1, Utility::getASTNodeType(ASTNodeType::PROGRAMS)"},{"lineNumber":21,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":22,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":23,"author":{"gitId":"GWphua"},"content":"\tfor (auto\u0026 procedure : procedures) {"},{"lineNumber":24,"author":{"gitId":"GWphua"},"content":"\t\troot-\u003eaddChild(procedure);"},{"lineNumber":25,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":27,"author":{"gitId":"GWphua"},"content":"\treturn root;"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":30,"author":{"gitId":"GWphua"},"content":"void SimpleParser::assertToken(LexicalToken token, LexicalTokenType type) const {"},{"lineNumber":31,"author":{"gitId":"GWphua"},"content":"\tif (!token.isType(type)) {"},{"lineNumber":32,"author":{"gitId":"GWphua"},"content":"\t\tthrow std::runtime_error(\"Error: Expected \" + LexicalTokenTypeMapper::printType(type) + \" but got \" + LexicalTokenTypeMapper::printType(token.getTokenType()));"},{"lineNumber":33,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"bool SimpleParser::hasTokensLeft() const {"},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"\treturn this-\u003etokenIndex \u003c this-\u003etokenStream.size();"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":"// Gets token, without advancing the index."},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":"LexicalToken SimpleParser::peekNextToken() {"},{"lineNumber":42,"author":{"gitId":"Guan Wei"},"content":"\tif (this-\u003ehasTokensLeft()) {"},{"lineNumber":43,"author":{"gitId":"Guan Wei"},"content":"\t\tLexicalToken token \u003d this-\u003etokenStream[this-\u003etokenIndex];"},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":45,"author":{"gitId":"GWphua"},"content":"\t\tif (token.isType(LexicalTokenType::WHITESPACE)) {"},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":"\t\t\tthis-\u003etokenIndex++;"},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"\t\t\treturn peekNextToken();"},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":50,"author":{"gitId":"Guan Wei"},"content":"\t\treturn token;"},{"lineNumber":51,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":52,"author":{"gitId":"Guan Wei"},"content":"\telse {"},{"lineNumber":53,"author":{"gitId":"Guan Wei"},"content":"\t\treturn LexicalToken(LexicalTokenType::NULL_TOKEN);"},{"lineNumber":54,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":56,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":57,"author":{"gitId":"Guan Wei"},"content":"// Gets token, and advance the index to look for the next token."},{"lineNumber":58,"author":{"gitId":"Guan Wei"},"content":"LexicalToken SimpleParser::getNextToken() {"},{"lineNumber":59,"author":{"gitId":"Guan Wei"},"content":"\tif (this-\u003ehasTokensLeft()) {"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":"\t\tLexicalToken token \u003d this-\u003etokenStream[this-\u003etokenIndex];"},{"lineNumber":61,"author":{"gitId":"Guan Wei"},"content":"\t\tthis-\u003etokenIndex++;"},{"lineNumber":62,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":63,"author":{"gitId":"GWphua"},"content":"\t\tif (token.isType(LexicalTokenType::WHITESPACE)) {"},{"lineNumber":64,"author":{"gitId":"Guan Wei"},"content":"\t\t\treturn getNextToken();"},{"lineNumber":65,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":66,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":67,"author":{"gitId":"Guan Wei"},"content":"\t\treturn token;"},{"lineNumber":68,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":69,"author":{"gitId":"Guan Wei"},"content":"\telse {"},{"lineNumber":70,"author":{"gitId":"Guan Wei"},"content":"\t\treturn LexicalToken(LexicalTokenType::NULL_TOKEN);"},{"lineNumber":71,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":72,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":73,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":74,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt, 1, e)"},{"lineNumber":75,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/qA4gXcRsT0cbjv8cZDNsfqSW?mode\u003dchat"},{"lineNumber":76,"author":{"gitId":"Guan Wei"},"content":"LexicalToken SimpleParser::peekNextNextToken() {"},{"lineNumber":77,"author":{"gitId":"Guan Wei"},"content":"\t// Store the current index"},{"lineNumber":78,"author":{"gitId":"Guan Wei"},"content":"\tint originalIndex \u003d this-\u003etokenIndex;"},{"lineNumber":79,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":80,"author":{"gitId":"Guan Wei"},"content":"\t// Skip potential whitespace and get the token"},{"lineNumber":81,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003egetNextToken();"},{"lineNumber":82,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":83,"author":{"gitId":"Guan Wei"},"content":"\t// Check the token after the one just returned by getNextToken()"},{"lineNumber":84,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken nextToken \u003d this-\u003epeekNextToken();"},{"lineNumber":85,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":86,"author":{"gitId":"Guan Wei"},"content":"\t// Reset the token index to its original value"},{"lineNumber":87,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003etokenIndex \u003d originalIndex;"},{"lineNumber":88,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":89,"author":{"gitId":"Guan Wei"},"content":"\t// Return the peeked token"},{"lineNumber":90,"author":{"gitId":"Guan Wei"},"content":"\treturn nextToken;"},{"lineNumber":91,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":92,"author":{"gitId":"Guan Wei"},"content":"// ai-gen end"},{"lineNumber":93,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":94,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseProcedure() {"},{"lineNumber":95,"author":{"gitId":"Guan Wei"},"content":"\tif (!this-\u003ehasTokensLeft()) {"},{"lineNumber":96,"author":{"gitId":"Guan Wei"},"content":"\t\tthrow std::runtime_error(\"Error: SimpleParser::parseProcedure encounter empty statement.\");"},{"lineNumber":97,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":98,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":99,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken procedureKeyword \u003d this-\u003egetNextToken();"},{"lineNumber":100,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003eassertToken(procedureKeyword, LexicalTokenType::KEYWORD_PROCEDURE);"},{"lineNumber":101,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":102,"author":{"gitId":"GWphua"},"content":"\t// Future iterations: To add procedure name into the tree. Currently not added due to how test cases are structured."},{"lineNumber":103,"author":{"gitId":"GWphua"},"content":"\t// Also, Maybe can consider adding procedure name as a variable value instead."},{"lineNumber":104,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e procedureName \u003d this-\u003eparseProcName();"},{"lineNumber":105,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":106,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_BRACE);"},{"lineNumber":107,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e statementList \u003d this-\u003eparseStmtLst();"},{"lineNumber":108,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_BRACE);"},{"lineNumber":109,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":110,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e procedureTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":111,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::PROCEDURE, procedureKeyword.getLine(), Utility::getASTNodeType(ASTNodeType::PROCEDURE)"},{"lineNumber":112,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":113,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":114,"author":{"gitId":"GWphua"},"content":"\tprocedureTree-\u003eaddChild(statementList);"},{"lineNumber":115,"author":{"gitId":"GWphua"},"content":"\treturn procedureTree;"},{"lineNumber":116,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":117,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":118,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":119,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseStmtLst() {"},{"lineNumber":120,"author":{"gitId":"Guan Wei"},"content":"\tstd::vector\u003cstd::shared_ptr\u003cASTNode\u003e\u003e statements;"},{"lineNumber":121,"author":{"gitId":"Guan Wei"},"content":"\tint firstLine \u003d this-\u003epeekNextToken().getLine();"},{"lineNumber":122,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":123,"author":{"gitId":"GWphua"},"content":"\t// Parse every statement until we see a closing bracket."},{"lineNumber":124,"author":{"gitId":"GWphua"},"content":"\twhile (!this-\u003epeekNextToken().isType(LexicalTokenType::SYMBOL_CLOSE_BRACE)) {"},{"lineNumber":125,"author":{"gitId":"Guan Wei"},"content":"\t\tstatements.push_back(this-\u003eparseStmt());"},{"lineNumber":126,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":127,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":128,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e statementListTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":129,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::STATEMENT_LIST, firstLine, Utility::getASTNodeType(ASTNodeType::STATEMENT_LIST)"},{"lineNumber":130,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":131,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":132,"author":{"gitId":"GWphua"},"content":"\tfor (auto\u0026 statement : statements) {"},{"lineNumber":133,"author":{"gitId":"GWphua"},"content":"\t\tstatementListTree-\u003eaddChild(statement);"},{"lineNumber":134,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":135,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":136,"author":{"gitId":"GWphua"},"content":"\treturn statementListTree;"},{"lineNumber":137,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":138,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":139,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseStmt() {"},{"lineNumber":140,"author":{"gitId":"Guan Wei"},"content":"\tif (!this-\u003ehasTokensLeft()) {"},{"lineNumber":141,"author":{"gitId":"Guan Wei"},"content":"\t\tthrow std::runtime_error(\"Error: SimpleParser::parseStmt encounter empty statement.\");"},{"lineNumber":142,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":143,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":144,"author":{"gitId":"GWphua"},"content":"\t// If next next token is \u0027\u003d\u0027, we are assigning. Call assign."},{"lineNumber":145,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken secondToken \u003d this-\u003epeekNextNextToken();"},{"lineNumber":146,"author":{"gitId":"GWphua"},"content":"\tif (secondToken.isType(LexicalTokenType::OPERATOR_ASSIGN)) {"},{"lineNumber":147,"author":{"gitId":"Guan Wei"},"content":"\t\treturn this-\u003eparseAssign();"},{"lineNumber":148,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":149,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":150,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken firstToken \u003d this-\u003epeekNextToken();"},{"lineNumber":151,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":152,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":153,"author":{"gitId":"GWphua"},"content":"\t// Then, Check keywords read/print/call."},{"lineNumber":154,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::KEYWORD_CALL)) {"},{"lineNumber":155,"author":{"gitId":"Guan Wei"},"content":"\t\treturn this-\u003eparseCall();"},{"lineNumber":156,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":157,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":158,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::KEYWORD_PRINT)) {"},{"lineNumber":159,"author":{"gitId":"Guan Wei"},"content":"\t\treturn this-\u003eparsePrint();"},{"lineNumber":160,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":161,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":162,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::KEYWORD_READ)) {"},{"lineNumber":163,"author":{"gitId":"Guan Wei"},"content":"\t\treturn this-\u003eparseRead();"},{"lineNumber":164,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":165,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":166,"author":{"gitId":"GWphua"},"content":"\t// Then, check keywords while/if."},{"lineNumber":167,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::KEYWORD_IF)) {"},{"lineNumber":168,"author":{"gitId":"GWphua"},"content":"\t\treturn this-\u003eparseIf();"},{"lineNumber":169,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":170,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":171,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::KEYWORD_WHILE)) {"},{"lineNumber":172,"author":{"gitId":"GWphua"},"content":"\t\treturn this-\u003eparseWhile();"},{"lineNumber":173,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":174,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":175,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":176,"author":{"gitId":"GWphua"},"content":"\t// If dont have keyword, this is an invalid statement."},{"lineNumber":177,"author":{"gitId":"GWphua"},"content":"\tthrow std::runtime_error(\"Error: Invalid Statement.\");"},{"lineNumber":178,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":179,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":180,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseRead() {"},{"lineNumber":181,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken keyword \u003d this-\u003egetNextToken();"},{"lineNumber":182,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003eassertToken(keyword, LexicalTokenType::KEYWORD_READ);"},{"lineNumber":183,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":184,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e variable \u003d this-\u003eparseVarName();"},{"lineNumber":185,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":186,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_SEMICOLON);"},{"lineNumber":187,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":188,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e readTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":189,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::READ, keyword.getLine(), Utility::getASTNodeType(ASTNodeType::READ)"},{"lineNumber":190,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":191,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":192,"author":{"gitId":"GWphua"},"content":"\treadTree-\u003eaddChild(variable);"},{"lineNumber":193,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":194,"author":{"gitId":"GWphua"},"content":"\treturn readTree;"},{"lineNumber":195,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":196,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":197,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parsePrint() {"},{"lineNumber":198,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken keyword \u003d this-\u003egetNextToken();"},{"lineNumber":199,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003eassertToken(keyword, LexicalTokenType::KEYWORD_PRINT);"},{"lineNumber":200,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":201,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e variable \u003d this-\u003eparseVarName();"},{"lineNumber":202,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":203,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_SEMICOLON);"},{"lineNumber":204,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":205,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e printTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":206,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::PRINT, keyword.getLine(), Utility::getASTNodeType(ASTNodeType::PRINT)"},{"lineNumber":207,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":208,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":209,"author":{"gitId":"GWphua"},"content":"\tprintTree-\u003eaddChild(variable);"},{"lineNumber":210,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":211,"author":{"gitId":"GWphua"},"content":"\treturn printTree;"},{"lineNumber":212,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":213,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":214,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseCall() {"},{"lineNumber":215,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken keyword \u003d this-\u003egetNextToken();"},{"lineNumber":216,"author":{"gitId":"Guan Wei"},"content":"\tthis-\u003eassertToken(keyword, LexicalTokenType::KEYWORD_CALL);"},{"lineNumber":217,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":218,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e variable \u003d this-\u003eparseVarName();"},{"lineNumber":219,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":220,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_SEMICOLON);"},{"lineNumber":221,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":222,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e callTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":223,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::CALL, keyword.getLine(), Utility::getASTNodeType(ASTNodeType::CALL)"},{"lineNumber":224,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":225,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":226,"author":{"gitId":"GWphua"},"content":"\tcallTree-\u003eaddChild(variable);"},{"lineNumber":227,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":228,"author":{"gitId":"GWphua"},"content":"\treturn callTree;"},{"lineNumber":229,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":230,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":231,"author":{"gitId":"GWphua"},"content":"// �while� �(� cond_expr �)�  �{� stmtLst �}�"},{"lineNumber":232,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseWhile() {"},{"lineNumber":233,"author":{"gitId":"GWphua"},"content":"\tLexicalToken keyword \u003d this-\u003egetNextToken();"},{"lineNumber":234,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(keyword, LexicalTokenType::KEYWORD_WHILE);"},{"lineNumber":235,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":236,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":237,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e condExpr \u003d this-\u003eparseCondExpr();"},{"lineNumber":238,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":239,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":240,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_BRACE);"},{"lineNumber":241,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e stmtLst \u003d this-\u003eparseStmtLst();"},{"lineNumber":242,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_BRACE);"},{"lineNumber":243,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":244,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e whileTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":245,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::WHILE, keyword.getLine(), Utility::getASTNodeType(ASTNodeType::WHILE)"},{"lineNumber":246,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":247,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":248,"author":{"gitId":"GWphua"},"content":"\twhileTree-\u003eaddChild(condExpr);"},{"lineNumber":249,"author":{"gitId":"GWphua"},"content":"\twhileTree-\u003eaddChild(stmtLst);"},{"lineNumber":250,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":251,"author":{"gitId":"GWphua"},"content":"\treturn whileTree;"},{"lineNumber":252,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":253,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":254,"author":{"gitId":"GWphua"},"content":"// �if� �(� cond_expr�)� �then� �{� stmtLst �}� �else� �{ � stmtLst � }�"},{"lineNumber":255,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseIf() {"},{"lineNumber":256,"author":{"gitId":"GWphua"},"content":"\tLexicalToken keyword \u003d this-\u003egetNextToken();"},{"lineNumber":257,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(keyword, LexicalTokenType::KEYWORD_IF);"},{"lineNumber":258,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":259,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":260,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e condExpr \u003d this-\u003eparseCondExpr();"},{"lineNumber":261,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":262,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":263,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::KEYWORD_THEN);"},{"lineNumber":264,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":265,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_BRACE);"},{"lineNumber":266,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e thenStmtLst \u003d this-\u003eparseStmtLst();"},{"lineNumber":267,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_BRACE);"},{"lineNumber":268,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":269,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::KEYWORD_ELSE);"},{"lineNumber":270,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":271,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_BRACE);"},{"lineNumber":272,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e elseStmtLst \u003d this-\u003eparseStmtLst();"},{"lineNumber":273,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_BRACE);"},{"lineNumber":274,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":275,"author":{"gitId":"GWphua"},"content":"\t// Warning: If_ELSE_THEN ASTNodeType encountered. May need to seperate into IF, ELSE, THEN keywords."},{"lineNumber":276,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e ifTree \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":277,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::IF_ELSE_THEN, keyword.getLine(), Utility::getASTNodeType(ASTNodeType::IF_ELSE_THEN)"},{"lineNumber":278,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":279,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":280,"author":{"gitId":"GWphua"},"content":"\tifTree-\u003eaddChild(condExpr);"},{"lineNumber":281,"author":{"gitId":"GWphua"},"content":"\tifTree-\u003eaddChild(thenStmtLst);"},{"lineNumber":282,"author":{"gitId":"GWphua"},"content":"\tifTree-\u003eaddChild(elseStmtLst);"},{"lineNumber":283,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":284,"author":{"gitId":"GWphua"},"content":"\treturn ifTree;"},{"lineNumber":285,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":286,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":287,"author":{"gitId":"Guan Wei"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseAssign() {"},{"lineNumber":288,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e variable \u003d this-\u003eparseVarName();"},{"lineNumber":289,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":290,"author":{"gitId":"GWphua"},"content":"\tLexicalToken assign \u003d this-\u003egetNextToken();"},{"lineNumber":291,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(assign, LexicalTokenType::OPERATOR_ASSIGN);"},{"lineNumber":292,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e assignNode \u003d std::make_shared\u003cASTNode\u003e("},{"lineNumber":293,"author":{"gitId":"GWphua"},"content":"\t\tASTNodeType::ASSIGN, assign.getLine(), Utility::getASTNodeType(ASTNodeType::ASSIGN)"},{"lineNumber":294,"author":{"gitId":"GWphua"},"content":"\t);"},{"lineNumber":295,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":296,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e expr \u003d this-\u003eparseExpr();"},{"lineNumber":297,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_SEMICOLON);"},{"lineNumber":298,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":299,"author":{"gitId":"GWphua"},"content":"\tassignNode-\u003eaddChild(variable);"},{"lineNumber":300,"author":{"gitId":"GWphua"},"content":"\tassignNode-\u003eaddChild(expr);"},{"lineNumber":301,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":302,"author":{"gitId":"GWphua"},"content":"\treturn assignNode;"},{"lineNumber":303,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":304,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":305,"author":{"gitId":"GWphua"},"content":"// cond_expr: rel_expr"},{"lineNumber":306,"author":{"gitId":"GWphua"},"content":"//          | �!� �(� cond_expr �)�"},{"lineNumber":307,"author":{"gitId":"GWphua"},"content":"//          | �(� cond_expr �)� �\u0026\u0026� �(� cond_expr �)�"},{"lineNumber":308,"author":{"gitId":"GWphua"},"content":"//          | �(� cond_expr �)� �||� �(� cond_expr �)�"},{"lineNumber":309,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseCondExpr() {"},{"lineNumber":310,"author":{"gitId":"GWphua"},"content":"\tLexicalToken firstToken \u003d this-\u003epeekNextToken();"},{"lineNumber":311,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":312,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::NAME)) {"},{"lineNumber":313,"author":{"gitId":"GWphua"},"content":"\t\treturn this-\u003eparseRelExpr();"},{"lineNumber":314,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":315,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":316,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e operationNode;"},{"lineNumber":317,"author":{"gitId":"GWphua"},"content":"\t// If of form �!� �(� cond_expr �)�."},{"lineNumber":318,"author":{"gitId":"GWphua"},"content":"\tif (firstToken.isType(LexicalTokenType::OPERATOR_NOT)) {"},{"lineNumber":319,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::OPERATOR_NOT);"},{"lineNumber":320,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":321,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":322,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e condExpr \u003d this-\u003eparseCondExpr(); // Recursive parsing of cond_expr"},{"lineNumber":323,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":324,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":325,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":326,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::NOT, firstToken.getLine(), Utility::getASTNodeType(ASTNodeType::NOT));"},{"lineNumber":327,"author":{"gitId":"GWphua"},"content":"\t\toperationNode-\u003eaddChild(condExpr);"},{"lineNumber":328,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":329,"author":{"gitId":"GWphua"},"content":"\t\treturn operationNode;"},{"lineNumber":330,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":331,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":332,"author":{"gitId":"GWphua"},"content":"\t// If of form  �(� cond_expr �)� �\u0026\u0026� �(� cond_expr �)� OR �(� cond_expr �)� �||� �(� cond_expr �)�"},{"lineNumber":333,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":334,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e left \u003d this-\u003eparseCondExpr();"},{"lineNumber":335,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":336,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":337,"author":{"gitId":"GWphua"},"content":"\t// Retrieve logical operator (AND, OR)"},{"lineNumber":338,"author":{"gitId":"GWphua"},"content":"\tLexicalToken logicalOperator \u003d this-\u003egetNextToken();"},{"lineNumber":339,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(logicalOperator, LexicalTokenType::OPERATOR_CONDITIONAL);"},{"lineNumber":340,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":341,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":342,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e right \u003d this-\u003eparseCondExpr();"},{"lineNumber":343,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":344,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":345,"author":{"gitId":"GWphua"},"content":"\tif (logicalOperator.isType(LexicalTokenType::OPERATOR_AND)) {"},{"lineNumber":346,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::AND, logicalOperator.getLine(), Utility::getASTNodeType(ASTNodeType::AND));"},{"lineNumber":347,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":348,"author":{"gitId":"GWphua"},"content":"\telse if (logicalOperator.isType(LexicalTokenType::OPERATOR_OR)) {"},{"lineNumber":349,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::OR, logicalOperator.getLine(), Utility::getASTNodeType(ASTNodeType::OR));"},{"lineNumber":350,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":351,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":352,"author":{"gitId":"GWphua"},"content":"\toperationNode-\u003eaddChild(left);"},{"lineNumber":353,"author":{"gitId":"GWphua"},"content":"\toperationNode-\u003eaddChild(right);"},{"lineNumber":354,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":355,"author":{"gitId":"GWphua"},"content":"\treturn operationNode;"},{"lineNumber":356,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":357,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":358,"author":{"gitId":"GWphua"},"content":"//  rel_factor : var_name | const_value | expr"},{"lineNumber":359,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseRelExpr() {"},{"lineNumber":360,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e left \u003d this-\u003eparseRelFactor();"},{"lineNumber":361,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":362,"author":{"gitId":"GWphua"},"content":"\tLexicalToken operatorToken \u003d this-\u003egetNextToken();"},{"lineNumber":363,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(operatorToken, LexicalTokenType::OPERATOR_RELATIONAL);"},{"lineNumber":364,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":365,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e right \u003d this-\u003eparseRelFactor();"},{"lineNumber":366,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":367,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e operationNode;"},{"lineNumber":368,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":369,"author":{"gitId":"GWphua"},"content":"\tif (operatorToken.isType(LexicalTokenType::OPERATOR_GREATER)) {"},{"lineNumber":370,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::GREATER, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::GREATER));"},{"lineNumber":371,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":372,"author":{"gitId":"GWphua"},"content":"\telse if (operatorToken.isType(LexicalTokenType::OPERATOR_GREATER_EQUAL)) {"},{"lineNumber":373,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::GREATER_OR_EQUAL, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::GREATER_OR_EQUAL));"},{"lineNumber":374,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":375,"author":{"gitId":"GWphua"},"content":"\telse if (operatorToken.isType(LexicalTokenType::OPERATOR_LESS)) {"},{"lineNumber":376,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::LESSER, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::LESSER));"},{"lineNumber":377,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":378,"author":{"gitId":"GWphua"},"content":"\telse if (operatorToken.isType(LexicalTokenType::OPERATOR_LESS_EQUAL)) {"},{"lineNumber":379,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::LESSER_OR_EQUAL, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::LESSER_OR_EQUAL));"},{"lineNumber":380,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":381,"author":{"gitId":"GWphua"},"content":"\telse if (operatorToken.isType(LexicalTokenType::OPERATOR_IS_EQUAL)) {"},{"lineNumber":382,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::EQUAL, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::EQUAL));"},{"lineNumber":383,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":384,"author":{"gitId":"GWphua"},"content":"\telse if (operatorToken.isType(LexicalTokenType::OPERATOR_NOT_EQUAL)) {"},{"lineNumber":385,"author":{"gitId":"GWphua"},"content":"\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::NOT_EQUAL, operatorToken.getLine(), Utility::getASTNodeType(ASTNodeType::NOT_EQUAL));"},{"lineNumber":386,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":387,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":388,"author":{"gitId":"GWphua"},"content":"\toperationNode-\u003eaddChild(left);"},{"lineNumber":389,"author":{"gitId":"GWphua"},"content":"\toperationNode-\u003eaddChild(right);"},{"lineNumber":390,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":391,"author":{"gitId":"GWphua"},"content":"\treturn operationNode;"},{"lineNumber":392,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":393,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":394,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseRelFactor() {"},{"lineNumber":395,"author":{"gitId":"GWphua"},"content":"\treturn parseExpr();"},{"lineNumber":396,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":397,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":398,"author":{"gitId":"GWphua"},"content":"// ai-gen start(gpt,1,e)"},{"lineNumber":399,"author":{"gitId":"GWphua"},"content":"// Prompt: https://platform.openai.com/playground/p/NGm3fHHy62WWafdKCc95vHpD?mode\u003dchat"},{"lineNumber":400,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseExpr() {"},{"lineNumber":401,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e left \u003d parseTerm();"},{"lineNumber":402,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":403,"author":{"gitId":"GWphua"},"content":"\tLexicalToken operation \u003d peekNextToken();"},{"lineNumber":404,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":405,"author":{"gitId":"GWphua"},"content":"\twhile (operation.isType(LexicalTokenType::OPERATOR_EXPR)) {"},{"lineNumber":406,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003egetNextToken(); //consume operation token\t\t"},{"lineNumber":407,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":408,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e operationNode;"},{"lineNumber":409,"author":{"gitId":"GWphua"},"content":"\t\tif (operation.isType(LexicalTokenType::OPERATOR_PLUS)) {"},{"lineNumber":410,"author":{"gitId":"GWphua"},"content":"\t\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, operation.getLine(), Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":411,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":412,"author":{"gitId":"GWphua"},"content":"\t\telse if (operation.isType(LexicalTokenType::OPERATOR_MINUS)) {"},{"lineNumber":413,"author":{"gitId":"GWphua"},"content":"\t\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::SUBTRACT, operation.getLine(), Utility::getASTNodeType(ASTNodeType::SUBTRACT));"},{"lineNumber":414,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":415,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":416,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e right \u003d parseTerm();"},{"lineNumber":417,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":418,"author":{"gitId":"GWphua"},"content":"\t\t// Create a new AST node to combine the expr and term and add it under current operation"},{"lineNumber":419,"author":{"gitId":"GWphua"},"content":"\t\toperationNode-\u003eaddChild(left);"},{"lineNumber":420,"author":{"gitId":"GWphua"},"content":"\t\toperationNode-\u003eaddChild(right);"},{"lineNumber":421,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":422,"author":{"gitId":"GWphua"},"content":"\t\t// Swap left operand and operation for next iteration"},{"lineNumber":423,"author":{"gitId":"GWphua"},"content":"\t\tleft \u003d operationNode;"},{"lineNumber":424,"author":{"gitId":"GWphua"},"content":"\t\toperation \u003d peekNextToken();"},{"lineNumber":425,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":426,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":427,"author":{"gitId":"GWphua"},"content":"\treturn left;"},{"lineNumber":428,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":429,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":430,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseTerm() {"},{"lineNumber":431,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e left \u003d parseFactor();"},{"lineNumber":432,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":433,"author":{"gitId":"GWphua"},"content":"\tLexicalToken operation \u003d peekNextToken();"},{"lineNumber":434,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":435,"author":{"gitId":"GWphua"},"content":"\twhile (operation.isType(LexicalTokenType::OPERATOR_TERM)) {"},{"lineNumber":436,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003egetNextToken(); //consume operation token"},{"lineNumber":437,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":438,"author":{"gitId":"GWphua"},"content":"\t\treturn std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, operation.getLine(), Utility::getASTNodeType(ASTNodeType::CONSTANT));"},{"lineNumber":439,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e operationNode;"},{"lineNumber":440,"author":{"gitId":"GWphua"},"content":"\t\tif (operation.isType(LexicalTokenType::OPERATOR_MULTIPLY)) {"},{"lineNumber":441,"author":{"gitId":"GWphua"},"content":"\t\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::MULTIPLY, operation.getLine(), Utility::getASTNodeType(ASTNodeType::MULTIPLY));"},{"lineNumber":442,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":443,"author":{"gitId":"GWphua"},"content":"\t\telse if (operation.isType(LexicalTokenType::OPERATOR_DIVIDE)) {"},{"lineNumber":444,"author":{"gitId":"GWphua"},"content":"\t\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::DIVIDE, operation.getLine(), Utility::getASTNodeType(ASTNodeType::DIVIDE));"},{"lineNumber":445,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":446,"author":{"gitId":"GWphua"},"content":"\t\telse if (operation.isType(LexicalTokenType::OPERATOR_MODULO)) {"},{"lineNumber":447,"author":{"gitId":"GWphua"},"content":"\t\t\toperationNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::MODULO, operation.getLine(), Utility::getASTNodeType(ASTNodeType::MODULO));"},{"lineNumber":448,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":449,"author":{"gitId":"GWphua"},"content":"\t\telse {"},{"lineNumber":450,"author":{"gitId":"GWphua"},"content":"\t\t\tthrow std::runtime_error(\"Parsing Term but operator is not of the following: *, /, %\");"},{"lineNumber":451,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":452,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":453,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e right \u003d parseFactor();"},{"lineNumber":454,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":455,"author":{"gitId":"GWphua"},"content":"\t\t// Create a new AST node to combine the factor and term and add it under current operation"},{"lineNumber":456,"author":{"gitId":"GWphua"},"content":"\t\toperationNode-\u003eaddChild(left);"},{"lineNumber":457,"author":{"gitId":"GWphua"},"content":"\t\toperationNode-\u003eaddChild(right);"},{"lineNumber":458,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":459,"author":{"gitId":"GWphua"},"content":"\t\t// Swap left operand and operation for next iteration"},{"lineNumber":460,"author":{"gitId":"GWphua"},"content":"\t\tleft \u003d operationNode;"},{"lineNumber":461,"author":{"gitId":"GWphua"},"content":"\t\toperation \u003d peekNextToken();"},{"lineNumber":462,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":463,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":464,"author":{"gitId":"GWphua"},"content":"\treturn left;"},{"lineNumber":465,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":466,"author":{"gitId":"GWphua"},"content":"// ai-gen end"},{"lineNumber":467,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":468,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseFactor() {"},{"lineNumber":469,"author":{"gitId":"GWphua"},"content":"\tLexicalToken nextToken \u003d peekNextToken();"},{"lineNumber":470,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":471,"author":{"gitId":"GWphua"},"content":"\tif (nextToken.isType(LexicalTokenType::SYMBOL_OPEN_PAREN)) {"},{"lineNumber":472,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003egetNextToken();"},{"lineNumber":473,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e expr \u003d parseExpr();"},{"lineNumber":474,"author":{"gitId":"GWphua"},"content":"\t\tthis-\u003eassertToken(this-\u003egetNextToken(), LexicalTokenType::SYMBOL_CLOSE_PAREN);"},{"lineNumber":475,"author":{"gitId":"GWphua"},"content":"\t\treturn expr;"},{"lineNumber":476,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":477,"author":{"gitId":"GWphua"},"content":"\telse if (nextToken.isType(LexicalTokenType::NAME)) {"},{"lineNumber":478,"author":{"gitId":"GWphua"},"content":"\t\treturn this-\u003eparseVarName();"},{"lineNumber":479,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":480,"author":{"gitId":"GWphua"},"content":"\telse if (nextToken.isType(LexicalTokenType::INTEGER)) {"},{"lineNumber":481,"author":{"gitId":"GWphua"},"content":"\t\treturn this-\u003eparseConstValue();"},{"lineNumber":482,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":483,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":484,"author":{"gitId":"GWphua"},"content":"\t// Should not come to this code."},{"lineNumber":485,"author":{"gitId":"GWphua"},"content":"\tthrow std::runtime_error(\"Error: SimpleParser tries to parse factor, but does not see parenthesis, name nor integer\");"},{"lineNumber":486,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":487,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":488,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseVarName() {"},{"lineNumber":489,"author":{"gitId":"GWphua"},"content":"\tLexicalToken variable \u003d this-\u003egetNextToken();"},{"lineNumber":490,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(variable, LexicalTokenType::NAME);"},{"lineNumber":491,"author":{"gitId":"GWphua"},"content":"\treturn std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, variable.getLine(), variable.getValue());"},{"lineNumber":492,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":493,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":494,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseProcName() {"},{"lineNumber":495,"author":{"gitId":"GWphua"},"content":"\tLexicalToken procedureName \u003d this-\u003egetNextToken();"},{"lineNumber":496,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(procedureName, LexicalTokenType::NAME);"},{"lineNumber":497,"author":{"gitId":"GWphua"},"content":"\treturn std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, procedureName.getLine(), procedureName.getValue());"},{"lineNumber":498,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":499,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":500,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParser::parseConstValue() {"},{"lineNumber":501,"author":{"gitId":"GWphua"},"content":"\tLexicalToken constant \u003d this-\u003egetNextToken();"},{"lineNumber":502,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eassertToken(constant, LexicalTokenType::INTEGER);"},{"lineNumber":503,"author":{"gitId":"GWphua"},"content":"\treturn std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, constant.getLine(), constant.getValue());"},{"lineNumber":504,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":505,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":506,"author":{"gitId":"Guan Wei"},"content":"// ai-gen end"}],"authorContributionMap":{"Guan Wei":178,"GWphua":327,"hmanhduc2k":1}},{"path":"Team19/Code19/src/spa/src/sp/Parser/SimpleParser.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"#include \u003cmemory\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"#include \"sp/AST/ast.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/FileProcessor.h\""},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"#include \"sp/Utility.h\""},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt,2,e)"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/cJLjmmneCEs4z6ms7ZkBSxJB?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"class SimpleParser {"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":"public:"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tSimpleParser(std::string filename);"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseProgram();"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"private:"},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":"\tstd::vector\u003cLexicalToken\u003e tokenStream;"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":"\tint tokenIndex;"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\tvoid assertToken(LexicalToken token, LexicalTokenType type) const;"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"\tbool hasTokensLeft() const;"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken peekNextToken();"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken getNextToken();"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken peekNextNextToken();"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseProcedure();"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseStmtLst();"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseStmt();"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseRead();"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parsePrint();"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseCall();"},{"lineNumber":32,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseWhile();"},{"lineNumber":33,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseIf();"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseAssign();"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseCondExpr();"},{"lineNumber":36,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseRelExpr();"},{"lineNumber":37,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseRelFactor();"},{"lineNumber":38,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseExpr();"},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseTerm();"},{"lineNumber":40,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseFactor();"},{"lineNumber":41,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseVarName();"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseProcName();"},{"lineNumber":43,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e parseConstValue();"},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":"};"},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"// ai-gen end"}],"authorContributionMap":{"Guan Wei":25,"GWphua":15,"hmanhduc2k":5}},{"path":"Team19/Code19/src/spa/src/sp/Parser/SimpleParserFacade.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"// ai-gen start(gpt,0,e)"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"// Prompt: https://platform.openai.com/playground/p/TSrBejqZDhzJU0nYh4NsepD0"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"#include \"SimpleParserFacade.h\""},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"SimpleParserFacade::SimpleParserFacade(const std::string\u0026 filename) : parser(filename) {}"},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":"std::shared_ptr\u003cASTNode\u003e SimpleParserFacade::parse() {"},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":"    return parser.parseProgram();"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":10,"author":{"gitId":"GWphua"},"content":"// ai-gen end"}],"authorContributionMap":{"GWphua":10}},{"path":"Team19/Code19/src/spa/src/sp/Parser/SimpleParserFacade.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"// ai-gen start(gpt,1,e)"},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":"// Prompt: https://platform.openai.com/playground/p/TSrBejqZDhzJU0nYh4NsepD0"},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"#include \"SimpleParser.h\""},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":"#include \u003cmemory\u003e"},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":"class SimpleParserFacade {"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"private:"},{"lineNumber":10,"author":{"gitId":"GWphua"},"content":"    SimpleParser parser;"},{"lineNumber":11,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":12,"author":{"gitId":"GWphua"},"content":"public:"},{"lineNumber":13,"author":{"gitId":"GWphua"},"content":"    SimpleParserFacade(const std::string\u0026 filename);"},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"    std::shared_ptr\u003cASTNode\u003e parse();"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":"};"},{"lineNumber":16,"author":{"gitId":"GWphua"},"content":"// ai-gen end"}],"authorContributionMap":{"GWphua":16}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/FileProcessor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/FileProcessor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003csstream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"std::string FileProcessor::readFileToString(const std::string\u0026 filename) {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"\t// Create an input file stream to read the file"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tassertFileExists(filename);"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::ifstream inputFile(filename);"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::stringstream buffer;"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\tbuffer \u003c\u003c inputFile.rdbuf();"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\tinputFile.close();"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\treturn buffer.str();"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"void FileProcessor::assertFileExists(const std::string\u0026 filename) {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t// Create an input file stream to read the file"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\tbool exist \u003d std::filesystem ::exists(filename) \u0026\u0026 std::filesystem::is_regular_file(filename);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\tif (!exist) {"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"Error: File either does not exist, or is corrupted!\");"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":22}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/FileProcessor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstring\u003e"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":" * @brief Represents a file processor which takes in file names as string and processes them."},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"class FileProcessor {"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t/**"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"\t* @brief Reads the content of a file and returns it as a string."},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"\t*"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"\t* @param filename The name of the file to be read."},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t* @return The content of the file as a string."},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tstatic std::string readFileToString(const std::string\u0026 filename);"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t/**"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t* @brief Assert that a file exists."},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\tstatic void assertFileExists(const std::string\u0026 filename);"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":20}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/LexicalToken.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"LexicalToken.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"LexicalToken::LexicalToken(LexicalTokenType type) {"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"    this-\u003etype \u003d type;"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"    this-\u003elineNumber \u003d -1;"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"    this-\u003elinePosition \u003d -1;"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"    this-\u003evalue \u003d \"\";"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"LexicalToken::LexicalToken(LexicalTokenType t, int lineNumber, int linePosition, std::string value) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003etype \u003d t;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003elineNumber \u003d lineNumber;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003elinePosition \u003d linePosition;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    this-\u003evalue \u003d value;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":"const LexicalToken\u0026 LexicalToken::getNullToken() {"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"    static const LexicalToken nullToken(LexicalTokenType::NULL_TOKEN);"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"    return nullToken;"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":"std::string LexicalToken::getValue() const {"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"    return this-\u003evalue;"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"int LexicalToken::getLinePosition() {"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"    return this-\u003elinePosition;"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"LexicalTokenType LexicalToken::getTokenType() {"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"    return this-\u003etype;"},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"int LexicalToken::getLine() {"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"    return this-\u003elineNumber;"},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"bool LexicalToken::isType(LexicalTokenType type) {"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":"    return LexicalTokenTypeMapper::isType(this-\u003egetTokenType(), type);"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"void LexicalToken::print() {"},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":"    std::cout \u003c\u003c \"Token Type: \" \u003c\u003c LexicalTokenTypeMapper::tokenToStringMap.find(type)-\u003esecond \u003c\u003c \" \";"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Line Number: \" \u003c\u003c lineNumber \u003c\u003c \" \";"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Line Position: \" \u003c\u003c linePosition \u003c\u003c \" \";"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":"    std::cout \u003c\u003c \"Value: \" \u003c\u003c std::endl;"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"Guan Wei":35,"GWphua":1,"hmanhduc2k":14}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/LexicalToken.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"#include \"LexicalTokenType.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":" * @brief Represents a lexical token."},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":" * "},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":" * A lexical token is a sequence of characters that can be treated as a single unit in a program."},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"class LexicalToken {"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"\tLexicalTokenType type;"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"\tint lineNumber;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tint linePosition;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string value;"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t/**"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t* @brief Constructor for creating a lexical token with specified type, line number, line position, and value."},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t* "},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\t* @param t The type of the lexical token."},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\t* @param lineNumber The line number associated with the lexical token (VERTICAL)"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\t* @param linePosition The line position associated with the lexical token (HORIZONTAL)"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\t* @param value The value associated with the lexical token."},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken(LexicalTokenType t, int lineNumber, int linePosition, std::string value);"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\t/**"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\t* @brief Constructor for creating a lexical token with specified type, setting vertical/horizontal line values"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\t* to -1 for all, and value \u003d \"\""},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken(LexicalTokenType type);"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"\tLexicalToken() \u003d default;"},{"lineNumber":34,"author":{"gitId":"Virushade"},"content":"\tbool isType(LexicalTokenType type);"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\tconst LexicalToken\u0026 getNullToken();"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"\tLexicalTokenType getTokenType();"},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"\tint getLinePosition();"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"\tint getLine();"},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":"\tstd::string getValue() const;"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid print();"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"Guan Wei":11,"hmanhduc2k":29,"Virushade":1}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/LexicalTokenType.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"LexicalTokenType.h\""},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"#include \u003cregex\u003e"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"const std::unordered_map\u003cstd::string, LexicalTokenType\u003e LexicalTokenTypeMapper::stringToTokenMap \u003d {"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"\t// Symbols"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"\t{\"{\", LexicalTokenType::SYMBOL_OPEN_BRACE},"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"\t{\"}\", LexicalTokenType::SYMBOL_CLOSE_BRACE},"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\t{\"(\", LexicalTokenType::SYMBOL_OPEN_PAREN},"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"\t{\")\", LexicalTokenType::SYMBOL_CLOSE_PAREN},"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\t{\";\", LexicalTokenType::SYMBOL_SEMICOLON},"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"\t// Operators"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003d\", LexicalTokenType::OPERATOR_ASSIGN},"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":"\t{\"!\", LexicalTokenType::OPERATOR_NOT},"},{"lineNumber":15,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u0026\u0026\", LexicalTokenType::OPERATOR_AND},"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"\t{\"||\", LexicalTokenType::OPERATOR_OR},"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003e\", LexicalTokenType::OPERATOR_GREATER},"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003e\u003d\", LexicalTokenType::OPERATOR_GREATER_EQUAL},"},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003c\", LexicalTokenType::OPERATOR_LESS},"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003c\u003d\", LexicalTokenType::OPERATOR_LESS_EQUAL},"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\t{\"\u003d\u003d\", LexicalTokenType::OPERATOR_IS_EQUAL},"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"\t{\"!\u003d\", LexicalTokenType::OPERATOR_NOT_EQUAL},"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\t{\"+\", LexicalTokenType::OPERATOR_PLUS},"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\t{\"-\", LexicalTokenType::OPERATOR_MINUS},"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":"\t{\"*\", LexicalTokenType::OPERATOR_MULTIPLY},"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\t{\"/\", LexicalTokenType::OPERATOR_DIVIDE},"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\t{\"%\", LexicalTokenType::OPERATOR_MODULO},"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"\t// Keywords"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\t{\"if\", LexicalTokenType::KEYWORD_IF},"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"\t{\"then\", LexicalTokenType::KEYWORD_THEN},"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":"\t{\"else\", LexicalTokenType::KEYWORD_ELSE},"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"\t{\"read\", LexicalTokenType::KEYWORD_READ},"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"\t{\"call\", LexicalTokenType::KEYWORD_CALL},"},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":"\t{\"print\", LexicalTokenType::KEYWORD_PRINT},"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"\t{\"procedure\", LexicalTokenType::KEYWORD_PROCEDURE},"},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"\t{\"while\", LexicalTokenType::KEYWORD_WHILE},"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":"\t{\" \", LexicalTokenType::WHITESPACE},"},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":"\t{\"\\n\", LexicalTokenType::NEW_LINE}"},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":"\t// Add more keywords as needed"},{"lineNumber":42,"author":{"gitId":"Guan Wei"},"content":"};"},{"lineNumber":43,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":"const std::unordered_map\u003cLexicalTokenType, std::string\u003e LexicalTokenTypeMapper::tokenToStringMap \u003d {"},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"\t// Symbols"},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_OPEN_BRACE, \"LEFT_BRACE\"},"},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_CLOSE_BRACE, \"RIGHT_BRACE\"},"},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_OPEN_PAREN, \"LEFT_PARENTHESIS\"},"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_CLOSE_PAREN, \"RIGHT_PARENTHESIS\"},"},{"lineNumber":50,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_SEMICOLON, \"SEMICOLON\"},"},{"lineNumber":51,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":52,"author":{"gitId":"Guan Wei"},"content":"\t// Operators"},{"lineNumber":53,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_ASSIGN, \"EQUAL_ASSIGNMENT\"},"},{"lineNumber":54,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_NOT, \"NOT_EQUAL\"},"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_AND, \"LOGICAL_AND\"},"},{"lineNumber":56,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_OR, \"LOGICAL_OR\"},"},{"lineNumber":57,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_GREATER, \"GREATER_THAN\"},"},{"lineNumber":58,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_GREATER_EQUAL, \"GREATER_THAN_OR_EQUAL\"},"},{"lineNumber":59,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_LESS, \"LESS_THAN\"},"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_LESS_EQUAL, \"LESS_THAN_OR_EQUAL\"},"},{"lineNumber":61,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_IS_EQUAL, \"EQUAL_TO\"},"},{"lineNumber":62,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_NOT_EQUAL, \"NOT_EQUAL_TO\"},"},{"lineNumber":63,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_PLUS, \"ADDITION\"},"},{"lineNumber":64,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MINUS, \"SUBTRACTION\"},"},{"lineNumber":65,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MULTIPLY, \"MULTIPLICATION\"},"},{"lineNumber":66,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_DIVIDE, \"DIVISION\"},"},{"lineNumber":67,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MODULO, \"MODULO\"},"},{"lineNumber":68,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":69,"author":{"gitId":"Guan Wei"},"content":"\t// Keywords"},{"lineNumber":70,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_IF, \"IF\"},"},{"lineNumber":71,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_THEN, \"THEN\"},"},{"lineNumber":72,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_ELSE, \"ELSE\"},"},{"lineNumber":73,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_READ, \"READ\"},"},{"lineNumber":74,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_CALL, \"CALL\"},"},{"lineNumber":75,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_PRINT, \"PRINT\"},"},{"lineNumber":76,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_PROCEDURE, \"PROCEDURE\"},"},{"lineNumber":77,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_WHILE, \"WHILE\"},"},{"lineNumber":78,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":79,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::NAME, \"NAMES\"},"},{"lineNumber":80,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::INTEGER, \"INTEGERS\"},"},{"lineNumber":81,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::WHITESPACE, \"WHITESPACES\"},"},{"lineNumber":82,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::NEW_LINE, \"NEWLINES\"}"},{"lineNumber":83,"author":{"gitId":"Guan Wei"},"content":"};"},{"lineNumber":84,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":85,"author":{"gitId":"Guan Wei"},"content":"const std::vector\u003cstd::pair\u003cLexicalTokenType, std::string\u003e\u003e LexicalTokenTypeMapper::tokenToRegexPairs \u003d {"},{"lineNumber":86,"author":{"gitId":"Guan Wei"},"content":"\t// Keywords"},{"lineNumber":87,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_IF, \"^(if\\\\b)\"},"},{"lineNumber":88,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_THEN, \"^(then\\\\b)\"},"},{"lineNumber":89,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_ELSE, \"^(else\\\\b)\"},"},{"lineNumber":90,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_READ, \"^(read\\\\b)\"},"},{"lineNumber":91,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_CALL, \"^(call\\\\b)\"},"},{"lineNumber":92,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_PRINT, \"^(print\\\\b)\"},"},{"lineNumber":93,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_PROCEDURE, \"^(procedure\\\\b)\"},"},{"lineNumber":94,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::KEYWORD_WHILE, \"^(while\\\\b)\"},"},{"lineNumber":95,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":96,"author":{"gitId":"Guan Wei"},"content":"\t// Symbols"},{"lineNumber":97,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_OPEN_BRACE, \"^(\\\\{)\"},"},{"lineNumber":98,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_CLOSE_BRACE, \"^(\\\\})\"},"},{"lineNumber":99,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_OPEN_PAREN, \"^(\\\\()\"},"},{"lineNumber":100,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_CLOSE_PAREN, \"^(\\\\))\"},"},{"lineNumber":101,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::SYMBOL_SEMICOLON, \"^(;)\"},"},{"lineNumber":102,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_ASSIGN, \"^(\u003d)\"},"},{"lineNumber":103,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_NOT, \"^(!)\"},"},{"lineNumber":104,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_AND, \"^(\u0026\u0026)\"},"},{"lineNumber":105,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_OR, \"^(\\\\|\\\\|)\"},"},{"lineNumber":106,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_GREATER, \"^(\u003e)\"},"},{"lineNumber":107,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_GREATER_EQUAL, \"^(\u003e\u003d)\"},"},{"lineNumber":108,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_LESS, \"^(\u003c)\"},"},{"lineNumber":109,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_LESS_EQUAL, \"^(\u003c\u003d)\"},"},{"lineNumber":110,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_IS_EQUAL, \"^(\u003d\u003d)\"},"},{"lineNumber":111,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_NOT_EQUAL, \"^(!\u003d)\"},"},{"lineNumber":112,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_PLUS, \"^(\\\\+)\"},"},{"lineNumber":113,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MINUS, \"^(-)\"},"},{"lineNumber":114,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MULTIPLY, \"^(\\\\*)\"},"},{"lineNumber":115,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_DIVIDE, \"^(\\\\/)\"},"},{"lineNumber":116,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::OPERATOR_MODULO, \"^(%)\"},"},{"lineNumber":117,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":118,"author":{"gitId":"Guan Wei"},"content":"\t// Other matches"},{"lineNumber":119,"author":{"gitId":"hmanhduc2k"},"content":"\t// \"^([a-zA-Z]\\\\w*)\\\\b\""},{"lineNumber":120,"author":{"gitId":"GWphua"},"content":"\t{LexicalTokenType::NAME, \"^([a-zA-Z][a-zA-Z0-9]*)\\\\b\"},"},{"lineNumber":121,"author":{"gitId":"hmanhduc2k"},"content":"\t{LexicalTokenType::INTEGER,  \"^(\\\\d+\\\\b)\"},"},{"lineNumber":122,"author":{"gitId":"Guan Wei"},"content":"\t{LexicalTokenType::WHITESPACE, \"^(\\\\s+)\"}"},{"lineNumber":123,"author":{"gitId":"Guan Wei"},"content":"};"},{"lineNumber":124,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":125,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":126,"author":{"gitId":"Guan Wei"},"content":"LexicalTokenType LexicalTokenTypeMapper::getTokenType(std::string str) {"},{"lineNumber":127,"author":{"gitId":"Guan Wei"},"content":"\tauto it \u003d stringToTokenMap.find(str);"},{"lineNumber":128,"author":{"gitId":"Guan Wei"},"content":"\tif (it !\u003d stringToTokenMap.end()) {"},{"lineNumber":129,"author":{"gitId":"Guan Wei"},"content":"\t\treturn it-\u003esecond;"},{"lineNumber":130,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":131,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":132,"author":{"gitId":"Guan Wei"},"content":"\t// Check for valid integer pattern (\\d+)"},{"lineNumber":133,"author":{"gitId":"Guan Wei"},"content":"\tif (std::regex_match(str, std::regex(R\"(\\d+)\"))) {"},{"lineNumber":134,"author":{"gitId":"Guan Wei"},"content":"\t\treturn LexicalTokenType::INTEGER;"},{"lineNumber":135,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":136,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":137,"author":{"gitId":"Guan Wei"},"content":"\t// Check for valid name pattern ([a-zA-Z][a-zA-Z0-9]*)"},{"lineNumber":138,"author":{"gitId":"Guan Wei"},"content":"\tif (std::regex_match(str, std::regex(R\"([a-zA-Z][a-zA-Z0-9]*)\"))) {"},{"lineNumber":139,"author":{"gitId":"Guan Wei"},"content":"\t\treturn LexicalTokenType::NAME;"},{"lineNumber":140,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":141,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":142,"author":{"gitId":"Guan Wei"},"content":"\treturn LexicalTokenType::ERROR;"},{"lineNumber":143,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":144,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":145,"author":{"gitId":"hmanhduc2k"},"content":"bool LexicalTokenTypeMapper::isKeyword(LexicalTokenType token) {"},{"lineNumber":146,"author":{"gitId":"hmanhduc2k"},"content":"\treturn token \u003d\u003d LexicalTokenType::KEYWORD_PROCEDURE"},{"lineNumber":147,"author":{"gitId":"hmanhduc2k"},"content":"\t\t|| token \u003d\u003d LexicalTokenType::KEYWORD_READ"},{"lineNumber":148,"author":{"gitId":"hmanhduc2k"},"content":"\t\t|| token \u003d\u003d LexicalTokenType::KEYWORD_PRINT"},{"lineNumber":149,"author":{"gitId":"hmanhduc2k"},"content":"\t\t|| token \u003d\u003d LexicalTokenType::KEYWORD_CALL;"},{"lineNumber":150,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":151,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":152,"author":{"gitId":"GWphua"},"content":"const std::string LexicalTokenTypeMapper::printType(LexicalTokenType type) {"},{"lineNumber":153,"author":{"gitId":"GWphua"},"content":"\tauto it \u003d tokenToStringMap.find(type);"},{"lineNumber":154,"author":{"gitId":"GWphua"},"content":"\tif (it !\u003d tokenToStringMap.end()) {"},{"lineNumber":155,"author":{"gitId":"GWphua"},"content":"\t\treturn it-\u003esecond;"},{"lineNumber":156,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":157,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":158,"author":{"gitId":"GWphua"},"content":"\treturn \"ERROR\";"},{"lineNumber":159,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":160,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":161,"author":{"gitId":"GWphua"},"content":"// ai-gen start(gpt, 1, e)"},{"lineNumber":162,"author":{"gitId":"GWphua"},"content":"// Prompt: https://platform.openai.com/playground/p/hqmTI5WojSoGp9ObQfd7Yegx?mode\u003dchat"},{"lineNumber":163,"author":{"gitId":"GWphua"},"content":"const bool LexicalTokenTypeMapper::isType(LexicalTokenType t1, LexicalTokenType t2) {"},{"lineNumber":164,"author":{"gitId":"GWphua"},"content":"\tstd::unordered_map\u003cLexicalTokenType, std::vector\u003cLexicalTokenType\u003e\u003e lexicalTokenTypes \u003d {"},{"lineNumber":165,"author":{"gitId":"GWphua"},"content":"\t\t// Symbols"},{"lineNumber":166,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::SYMBOL_OPEN_BRACE, {LexicalTokenType::SYMBOL_OPEN_BRACE}},"},{"lineNumber":167,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::SYMBOL_CLOSE_BRACE, {LexicalTokenType::SYMBOL_CLOSE_BRACE}},"},{"lineNumber":168,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::SYMBOL_OPEN_PAREN, {LexicalTokenType::SYMBOL_OPEN_PAREN}},"},{"lineNumber":169,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::SYMBOL_CLOSE_PAREN, {LexicalTokenType::SYMBOL_CLOSE_PAREN}},"},{"lineNumber":170,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::SYMBOL_SEMICOLON, {LexicalTokenType::SYMBOL_SEMICOLON}},"},{"lineNumber":171,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":172,"author":{"gitId":"GWphua"},"content":"\t\t// Operators"},{"lineNumber":173,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_ASSIGN, {LexicalTokenType::OPERATOR_ASSIGN}},"},{"lineNumber":174,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_NOT, {LexicalTokenType::OPERATOR_NOT}},"},{"lineNumber":175,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_AND, {LexicalTokenType::OPERATOR_CONDITIONAL, LexicalTokenType::OPERATOR_AND}},"},{"lineNumber":176,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_OR, {LexicalTokenType::OPERATOR_CONDITIONAL, LexicalTokenType::OPERATOR_OR}},"},{"lineNumber":177,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_GREATER, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_GREATER}},"},{"lineNumber":178,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_GREATER_EQUAL, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_GREATER_EQUAL}},"},{"lineNumber":179,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_LESS, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_LESS}},"},{"lineNumber":180,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_LESS_EQUAL, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_LESS_EQUAL}},"},{"lineNumber":181,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_IS_EQUAL, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_IS_EQUAL}},"},{"lineNumber":182,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_NOT_EQUAL, {LexicalTokenType::OPERATOR_RELATIONAL, LexicalTokenType::OPERATOR_NOT_EQUAL}},"},{"lineNumber":183,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_PLUS, {LexicalTokenType::OPERATOR_EXPR, LexicalTokenType::OPERATOR_PLUS}},"},{"lineNumber":184,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_MINUS, {LexicalTokenType::OPERATOR_EXPR, LexicalTokenType::OPERATOR_MINUS}},"},{"lineNumber":185,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_MULTIPLY, {LexicalTokenType::OPERATOR_TERM, LexicalTokenType::OPERATOR_MULTIPLY}},"},{"lineNumber":186,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_DIVIDE, {LexicalTokenType::OPERATOR_TERM, LexicalTokenType::OPERATOR_DIVIDE}},"},{"lineNumber":187,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::OPERATOR_MODULO, {LexicalTokenType::OPERATOR_TERM, LexicalTokenType::OPERATOR_MODULO}},"},{"lineNumber":188,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":189,"author":{"gitId":"GWphua"},"content":"\t\t// Keywords"},{"lineNumber":190,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_PROCEDURE,{LexicalTokenType::KEYWORD_PROCEDURE,LexicalTokenType::NAME}},"},{"lineNumber":191,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_WHILE,{LexicalTokenType::KEYWORD_WHILE,LexicalTokenType::NAME}},"},{"lineNumber":192,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_IF,{LexicalTokenType::KEYWORD_IF,LexicalTokenType::NAME}},"},{"lineNumber":193,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_THEN,{LexicalTokenType::KEYWORD_THEN,LexicalTokenType::NAME}},"},{"lineNumber":194,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_ELSE,{LexicalTokenType::KEYWORD_ELSE,LexicalTokenType::NAME}},"},{"lineNumber":195,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_READ,{LexicalTokenType::KEYWORD_READ,LexicalTokenType::NAME}},"},{"lineNumber":196,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_CALL,{LexicalTokenType::KEYWORD_CALL,LexicalTokenType::NAME}},"},{"lineNumber":197,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::KEYWORD_PRINT,{LexicalTokenType::KEYWORD_PRINT,LexicalTokenType::NAME}},"},{"lineNumber":198,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":199,"author":{"gitId":"GWphua"},"content":"\t\t// General Tokens"},{"lineNumber":200,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::INTEGER,{LexicalTokenType::INTEGER}},"},{"lineNumber":201,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::NAME,{LexicalTokenType::NAME}},"},{"lineNumber":202,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::WHITESPACE,{LexicalTokenType::WHITESPACE}},"},{"lineNumber":203,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::NEW_LINE,{LexicalTokenType::NEW_LINE}},"},{"lineNumber":204,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":205,"author":{"gitId":"GWphua"},"content":"\t\t// Error Token and Null Token"},{"lineNumber":206,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::ERROR,{LexicalTokenType::ERROR}},"},{"lineNumber":207,"author":{"gitId":"GWphua"},"content":"\t\t{LexicalTokenType::NULL_TOKEN,{LexicalTokenType::NULL_TOKEN}}"},{"lineNumber":208,"author":{"gitId":"GWphua"},"content":"\t};"},{"lineNumber":209,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":210,"author":{"gitId":"GWphua"},"content":"\tauto search \u003d lexicalTokenTypes.find(t1);"},{"lineNumber":211,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":212,"author":{"gitId":"GWphua"},"content":"\tif (search !\u003d lexicalTokenTypes.end()) {"},{"lineNumber":213,"author":{"gitId":"GWphua"},"content":"\t\t// Key exists, search the TokenType in the vector"},{"lineNumber":214,"author":{"gitId":"GWphua"},"content":"\t\tauto\u0026 vec \u003d search-\u003esecond;"},{"lineNumber":215,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":216,"author":{"gitId":"GWphua"},"content":"\t\tif (std::find(vec.begin(), vec.end(), t2) !\u003d vec.end()) {"},{"lineNumber":217,"author":{"gitId":"GWphua"},"content":"\t\t\treturn true;"},{"lineNumber":218,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":219,"author":{"gitId":"GWphua"},"content":"\t\telse {"},{"lineNumber":220,"author":{"gitId":"GWphua"},"content":"\t\t\treturn false;"},{"lineNumber":221,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":222,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":223,"author":{"gitId":"GWphua"},"content":"\telse {"},{"lineNumber":224,"author":{"gitId":"GWphua"},"content":"\t\treturn false;"},{"lineNumber":225,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":226,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":227,"author":{"gitId":"GWphua"},"content":"// ai-gen end"}],"authorContributionMap":{"Guan Wei":140,"GWphua":78,"hmanhduc2k":9}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/LexicalTokenType.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cunordered_map\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"enum class LexicalTokenType {"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"    // Symbols"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"    SYMBOL_OPEN_BRACE, SYMBOL_CLOSE_BRACE,      // { and }"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"    SYMBOL_OPEN_PAREN, SYMBOL_CLOSE_PAREN,      // ( and )"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"    SYMBOL_SEMICOLON,                           // ;"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"    // Operator"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_ASSIGN,                            // \u003d"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_NOT,                               // !"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":16,"author":{"gitId":"GWphua"},"content":"    OPERATOR_CONDITIONAL,                       // Reserved for \u0026\u0026, ||"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_AND,                               // \u0026\u0026"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_OR,                                // ||"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"    OPERATOR_RELATIONAL,                        // Reserved for \u003e, \u003e\u003d, \u003c, \u003c\u003d, \u003d\u003d, !\u003d"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_GREATER, OPERATOR_GREATER_EQUAL,   // \u003e and \u003e\u003d"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_LESS, OPERATOR_LESS_EQUAL,         // \u003c and \u003c\u003d"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_IS_EQUAL,                          // \u003d\u003d"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_NOT_EQUAL,                         // !\u003d"},{"lineNumber":25,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":26,"author":{"gitId":"GWphua"},"content":"    OPERATOR_EXPR,                              // Reserved for +, -"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_PLUS, OPERATOR_MINUS,              // + and -"},{"lineNumber":28,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":29,"author":{"gitId":"GWphua"},"content":"    OPERATOR_TERM,                              // Reserved for *, /, %"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_MULTIPLY, OPERATOR_DIVIDE,         // * and /"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"    OPERATOR_MODULO,                            // %"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"    // Keywords"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_PROCEDURE,"},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_WHILE,"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_IF, KEYWORD_THEN, KEYWORD_ELSE,"},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_READ,"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_CALL,"},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":"    KEYWORD_PRINT,"},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":"    // General Tokens"},{"lineNumber":42,"author":{"gitId":"Guan Wei"},"content":"    INTEGER, NAME, WHITESPACE, NEW_LINE,"},{"lineNumber":43,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":"    // Error Token"},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"    ERROR,"},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"    // Null Token"},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"    NULL_TOKEN"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":"};"},{"lineNumber":50,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"/**"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"* @brief a static utility class that maps back and forward token to string rerpesentation"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"*/"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"class LexicalTokenTypeMapper {"},{"lineNumber":56,"author":{"gitId":"Guan Wei"},"content":"public:"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Returns the type of token (default)"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":"    static LexicalTokenType getTokenType(std::string str);"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Convert a string to a token type"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":65,"author":{"gitId":"Guan Wei"},"content":"    static const std::unordered_map\u003cstd::string, LexicalTokenType\u003e stringToTokenMap;"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Convert a token type to a string"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"    static const std::unordered_map\u003cLexicalTokenType, std::string\u003e tokenToStringMap;"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Convert a token to its regex representations"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":75,"author":{"gitId":"Guan Wei"},"content":"    static const std::vector\u003cstd::pair\u003cLexicalTokenType, std::string\u003e\u003e tokenToRegexPairs;"},{"lineNumber":76,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Check whether a token is a keyword"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"    static bool isKeyword(LexicalTokenType type);"},{"lineNumber":81,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":82,"author":{"gitId":"GWphua"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"GWphua"},"content":"    * @brief Check whether a token is a keyword"},{"lineNumber":84,"author":{"gitId":"GWphua"},"content":"    */"},{"lineNumber":85,"author":{"gitId":"GWphua"},"content":"    static const std::string printType(LexicalTokenType type);"},{"lineNumber":86,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":87,"author":{"gitId":"GWphua"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"GWphua"},"content":"    * @brief Check if type t1 can be considered to be type t2."},{"lineNumber":89,"author":{"gitId":"GWphua"},"content":"    */"},{"lineNumber":90,"author":{"gitId":"GWphua"},"content":"    static const bool isType(LexicalTokenType t1, LexicalTokenType t2);"},{"lineNumber":91,"author":{"gitId":"Guan Wei"},"content":"};"}],"authorContributionMap":{"Guan Wei":48,"GWphua":19,"hmanhduc2k":24}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/SPTokenizer.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"LexicalToken.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003csstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cregex\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstdexcept\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"/** Splits the text file into a array of strings, with each element representing a line of text."},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":" *  Returns: A vector of size equal to the number of lines in the input content."},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Manh Duc"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"std::vector\u003cstd::string\u003e SPTokenizer::splitLine(const std::string\u0026 content) {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::vector\u003cstd::string\u003e result;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::istringstream stream(content); // Create a stringstream from the content"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string line;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\twhile (std::getline(stream, line)) {"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\tresult.push_back(line);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\treturn result;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"std::vector\u003cLexicalToken\u003e SPTokenizer::tokenize(const std::string\u0026 content) {"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\tstd::vector\u003cLexicalToken\u003e results;"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::vector\u003cstd::string\u003e lines \u003d SPTokenizer::splitLine(content);"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\tint numberOfLines \u003d static_cast\u003cint\u003e(lines.size());"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tbool isPreviousTokenKeyword \u003d false;"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\tfor (int lineNumber \u003d 1; lineNumber \u003c\u003d numberOfLines; lineNumber++) {"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\t\tstd::string line \u003d lines[lineNumber - 1];"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\t\tstd::string originalLine \u003d line.substr();"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\t\twhile (!line.empty()) {"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tbool matchedSomething \u003d false;"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"\t\t\tfor (auto const\u0026 rule : LexicalTokenTypeMapper::tokenToRegexPairs) {"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tstd::smatch match;"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tif (!std::regex_search(line, match, std::regex(rule.second))) {"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\t\tcontinue;"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\t}"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tLexicalTokenType type \u003d rule.first;"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\thandleKeywordConflict(type, isPreviousTokenKeyword);"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tLexicalToken t(type, lineNumber, (int)(originalLine.size() - line.size()), match.str());"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tassertValidToken(type, match.str());"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"\t\t\t\tif (rule.first !\u003d LexicalTokenType::WHITESPACE) {"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\t\tresults.push_back(t);"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\t}"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tmatchedSomething \u003d true;"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tline \u003d line.substr(match.str().size());"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t\tbreak;"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tif (!matchedSomething) {"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"\t\t\t\tthrow std::runtime_error(\"Error: Invalid SIMPLE syntax.\");"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\t}"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (lineNumber !\u003d lines.size()) {"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":"\t\t\tLexicalToken newLine(LexicalTokenType::WHITESPACE, lineNumber, -1, \"new line\");"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tresults.push_back(newLine);"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"\treturn results;"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"void SPTokenizer::assertValidToken(LexicalTokenType type, const std::string\u0026 name) {"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"\tif (type !\u003d LexicalTokenType::NAME) {"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"\t\treturn;"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string pattern \u003d \"([a-zA-Z][a-zA-Z0-9]*)\"; // Pattern to match an alphanumeric string with the first character being a letter"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::regex regexPattern(pattern);"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"\tif (!std::regex_match(name, regexPattern)) {"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"\t\tthrow std::runtime_error(\"ERROR: Name not valid \" + name);"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"void SPTokenizer::handleKeywordConflict(LexicalTokenType\u0026 type, bool\u0026 isPreviousTokenKeyword) {"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"\tif (isPreviousTokenKeyword \u0026\u0026 (LexicalTokenTypeMapper::isKeyword(type) || type \u003d\u003d LexicalTokenType::NAME)) {"},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"\t\ttype \u003d LexicalTokenType::NAME;"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":"\t\tisPreviousTokenKeyword \u003d false;"},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"\telse {"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"\t\tif (LexicalTokenTypeMapper::isKeyword(type)) {"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":"\t\t\tisPreviousTokenKeyword \u003d true;"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"\t\t}"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"Guan Wei":11,"Manh Duc":1,"hmanhduc2k":76}},{"path":"Team19/Code19/src/spa/src/sp/SPTokenizer/SPTokenizer.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"LexicalToken.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":" * @brief Represents a tokenizer which takes in a string and tokenizes it."},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":" */"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"class SPTokenizer {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    * @brief Tokenizes the content of a string and returns a vector of lexical tokens."},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    * "},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    * @param content The content to be tokenized."},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    * @return A vector of lexical tokens."},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"    static std::vector\u003cLexicalToken\u003e tokenize(const std::string\u0026 content);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    * Split a line (of multiple lines) into a vector of strings."},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    static std::vector\u003cstd::string\u003e splitLine(const std::string\u0026 content);"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"private:"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    static void assertValidToken(LexicalTokenType type, const std::string\u0026 name);"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"    static void handleKeywordConflict(LexicalTokenType\u0026 type, bool\u0026 isPreviousTokenKeyword);"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"Guan Wei":1,"hmanhduc2k":26}},{"path":"Team19/Code19/src/spa/src/sp/SourceProcessor.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SourceProcessor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"SourceProcessor::SourceProcessor(std::string filename, std::shared_ptr\u003cPKBManager\u003e pkbManager) "},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"\t: parser(filename), pkbManager(pkbManager), root(std::make_shared\u003cASTNode\u003e()) {}"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"void SourceProcessor::reset() {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\tthis-\u003eroot \u003d std::make_shared\u003cASTNode\u003e();"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"void SourceProcessor::parseSIMPLE() {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"\t// Parse tokens into AST (not implemented)"},{"lineNumber":13,"author":{"gitId":"GWphua"},"content":"\tthis-\u003eroot \u003d parser.parse();"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::cout \u003c\u003c this-\u003eroot-\u003etoString() \u003c\u003c std::endl;"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"void SourceProcessor::buildAST() {"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t// Build AST from parsed tokens (not implemented)"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t// this-\u003eroot \u003d ast.build();"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"void SourceProcessor::extractAndPopulate() {"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    // Use PKBWriter to insert entities and relationships into PKB"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d this-\u003epkbManager-\u003egetPKBWriterManager();"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"\tDesignExtractor designExtractor(this-\u003eroot, pkbWriterManager);"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\tdesignExtractor.extractAll();"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\tdesignExtractor.populatePKB();"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"GWphua":1,"hmanhduc2k":25,"jianoway":2}},{"path":"Team19/Code19/src/spa/src/sp/SourceProcessor.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/DesignExtractor.h\""},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"/*"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"* @brief The SourceProcessor class is the facade class that connects"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"* components of SP together, and connect them to PKB."},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"* "},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"* High level abstraction: Initialize and process with SIMPLE parser, AST root node, and PKB"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"* SIMPLE parser, in turn uses SPTokenizer to tokenize the source code, and build AST then save root"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"* when extractAndPopulate is called, it uses DesignExtractor to extract information to PKB"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"* "},{"lineNumber":16,"author":{"gitId":"GWphua"},"content":"* @field parser: the SimpleParserFacade object that will be used to parse the SIMPLE source code"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"* @field root: the root of the AST that will be built from the parsed source code"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"* @field pkbManager: the PKBManager object that will be used to store the extracted information"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"*/"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"class SourceProcessor {"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":23,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser;"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root;"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkbManager;"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\tSourceProcessor(std::string filename, std::shared_ptr\u003cPKBManager\u003e pkbManager);"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid reset();"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid parseSIMPLE();"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid buildAST();"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\tvoid extractAndPopulate();"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"GWphua":3,"hmanhduc2k":31}},{"path":"Team19/Code19/src/spa/src/sp/Utility.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003csstream\u003e"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen start (gpt, 2, e)"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"// prompt: https://chat.openai.com/share/a181de60-e76f-496c-9bee-7ea80f2be651"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"std::string Utility::getASTNodeType(ASTNodeType t) {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"    switch (t) {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::PROGRAMS:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Program\";"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::PROCEDURE:"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Procedure\";"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::STATEMENT_LIST:"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"            return \"StatementList\";"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::ASSIGN:"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Assign\";"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::CALL:"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Call\";"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::IF_ELSE_THEN:"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"            return \"IfElseThen\";"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::PRINT:"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Print\";"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::READ:"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Read\";"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::WHILE:"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"            return \"While\";"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::NOT:"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Not\";"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::AND:"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"            return \"And\";"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::OR:"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Or\";"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::GREATER:"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Greater\";"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::GREATER_OR_EQUAL:"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"            return \"GreaterOrEqual\";"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::LESSER:"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Lesser\";"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::LESSER_OR_EQUAL:"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"            return \"LesserOrEqual\";"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::EQUAL:"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"            return \"EqualEqual\";"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::NOT_EQUAL:"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"            return \"NotEqual\";"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::ADD:"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Add\";"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::SUBTRACT:"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Subtract\";"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::MULTIPLY:"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Multiply\";"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::DIVIDE:"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Divide\";"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::MODULO:"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Modulo\";"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::VARIABLE:"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Variable\";"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::CONSTANT:"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Constant\";"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"        case ASTNodeType::ERROR:"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"            return \"Error\";"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"            throw \"Error\";"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"    };"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"std::string Utility::getDesignType(ASTNodeType t) {"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    return getASTNodeType(t);"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"bool Utility::nodeIsStatement(ASTNodeType t) {"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"    return t \u003d\u003d ASTNodeType::ASSIGN || t \u003d\u003d ASTNodeType::CALL "},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":"        || t \u003d\u003d ASTNodeType::IF_ELSE_THEN || t \u003d\u003d ASTNodeType::PRINT "},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"        || t \u003d\u003d ASTNodeType::READ || t \u003d\u003d ASTNodeType::WHILE;"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"// ai-gen end"}],"authorContributionMap":{"hmanhduc2k":76}},{"path":"Team19/Code19/src/spa/src/sp/Utility.h","fileType":"h","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#pragma once"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cstring\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cutility\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"class Utility {"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"public:"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    static std::string getASTNodeType(ASTNodeType t);"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    static std::string getDesignType(ASTNodeType t);"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    static bool nodeIsStatement(ASTNodeType t);"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"};"}],"authorContributionMap":{"hmanhduc2k":13}},{"path":"Team19/Code19/src/unit_testing/CMakeLists.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE srcs \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE headers \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp\")"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE sp_files \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.cpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/sp/*.hpp\")"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"file(GLOB_RECURSE qps_files \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.cpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/qps/*.hpp\")"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"add_executable(unit_testing ${srcs} ${headers} ${sp_files} ${qps_files})"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"target_link_libraries(unit_testing spa)"}],"authorContributionMap":{"Guan Wei":1,"github-classroom[bot]":2,"MSI\\vegit":1,"jianoway":4}},{"path":"Team19/Code19/src/unit_testing/src/commons/ShuntingYardTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"#include \"commons/ShuntingYard.h\""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"commons/ShuntingYard\") {"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    ShuntingYard shuntingYard \u003d ShuntingYard();"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"    SECTION(\"convertToPostfix: 1 + 2\") {"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"        std::string infixExpression \u003d \"1 + 2\";"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"        std::string expected \u003d \"12+\";"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        std::string postfixExpression \u003d shuntingYard.convertToPostfix(infixExpression);"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        REQUIRE(postfixExpression \u003d\u003d expected);"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    SECTION(\"convertToPostfix: 1 + 2 * 3\") {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        std::string infixExpression \u003d \"1 + 2 * 3\";"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        std::string postfixExpression \u003d shuntingYard.convertToPostfix(infixExpression);"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        REQUIRE(postfixExpression \u003d\u003d \"123*+\");"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    SECTION(\"convertToPostfix: v + x * y + z * t\") {"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        std::string infixExpression \u003d \"v + x * y + z * t\";"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        std::string postfixExpression \u003d shuntingYard.convertToPostfix(infixExpression);"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        REQUIRE(postfixExpression \u003d\u003d \"vxy*+zt*+\");"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    SECTION(\"convertToPostFix: y + z + t\") {"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        std::string infixExpression \u003d \"y + z + t\";"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        std::string postfixExpression \u003d shuntingYard.convertToPostfix(infixExpression);"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        REQUIRE(postfixExpression \u003d\u003d \"yz+t+\");"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"  SECTION(\"convertToPostFix: v + x * y\") {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    std::string infixExpression \u003d \"v + x * y\";"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    std::string postfixExpression \u003d shuntingYard.convertToPostfix(infixExpression);"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    REQUIRE(postfixExpression \u003d\u003d \"vxy*+\");"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":36}},{"path":"Team19/Code19/src/unit_testing/src/main.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#define CATCH_CONFIG_MAIN  // ThiATCH_CONFIG_MAIN"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"#include \"catch.hpp\""}],"authorContributionMap":{"github-classroom[bot]":2}},{"path":"Team19/Code19/src/unit_testing/src/pkb/PKBReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"//#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKB.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKBReaderManager.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"//TEST_CASE(\"pkb/PKBReaderManager.h\") {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKB\u003e pkb \u003d std::make_shared\u003cPKB\u003e();"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKBReaderManager\u003e pkbReader \u003d std::make_shared\u003cPKBReaderManager\u003e(pkb);"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKBWriterManager\u003e pkbWriter \u003d std::make_shared\u003cPKBWriterManager\u003e(pkb);"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"//  int one \u003d 1;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"//  int two \u003d 2;"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"//  int three \u003d 3;"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"//  int four \u003d 4;"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"//  int five \u003d 5;"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"//  int six \u003d 6;"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"//  int seven \u003d 7;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"//  SECTION(\"getAllPreFollows: Non-Empty\") {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(one, two);"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(two, three);"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(three, four);"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(four, five);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(five, six);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertFollows(six, seven);"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"//    auto expected \u003d std::unordered_set\u003cint\u003e{1, 2, 3, 4, 5, 6};"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"//    REQUIRE(pkbReader-\u003egetAllPreFollows() \u003d\u003d expected);"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003eclear();"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"//  }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"//  SECTION(\"getAllPreFollows: Empty\") {"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"//    auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"//    REQUIRE(pkbReader-\u003egetAllPreFollows() \u003d\u003d expected);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"//  }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPreFollows: Single\") {"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(one, two);"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{1};"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPreFollows() \u003d\u003d expected);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPreFollows: Multiple\") {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(one, two);"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(two, three);"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(three, four);"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{1, 2, 3};"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPreFollows() \u003d\u003d expected);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollows: Non-Empty\") {"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(one, two);"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(two, three);"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(three, four);"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(four, five);"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(five, six);"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(six, seven);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3, 4, 5, 6, 7};"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollows() \u003d\u003d expected);"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollows: Empty\") {"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollows() \u003d\u003d expected);"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollows: Single\") {"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollows(one, two);"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{2};"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollows() \u003d\u003d expected);"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPreFollowsT: Non-Empty\") {"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(one, two);"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(two, three);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(three, four);"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(four, five);"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{1, 2, 3, 4};"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPreFollowsT() \u003d\u003d expected);"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPreFollowsT: Empty\") {"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPreFollowsT() \u003d\u003d expected);"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPreFollowsT: Single\") {"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(one, two);"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{1};"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPreFollowsT() \u003d\u003d expected);"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollowsT: Non-Empty\") {"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(one, two);"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(two, three);"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(three, four);"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(four, five);"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3, 4, 5};"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollowsT() \u003d\u003d expected);"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollowsT: Empty\") {"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollowsT() \u003d\u003d expected);"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"getAllPostFollowsT: Single\") {"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertFollowsT(one, two);"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"//        auto expected \u003d std::unordered_set\u003cint\u003e{2};"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(pkbReader-\u003egetAllPostFollowsT() \u003d\u003d expected);"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003eclear();"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"//}"}],"authorContributionMap":{"jianoway":112}},{"path":"Team19/Code19/src/unit_testing/src/pkb/PKBTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"Dummy Test\") {"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"    REQUIRE(1 \u003d\u003d 1);"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":5}},{"path":"Team19/Code19/src/unit_testing/src/pkb/PKBWriterTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"//#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKB.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKBReaderManager.h\""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"//#include \"pkb/PKBWriterManager.h\""},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"//TEST_CASE(\"pkb/PKBWriterManager.h\") {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKB\u003e pkb \u003d std::make_shared\u003cPKB\u003e();"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKBReaderManager\u003e pkbReader \u003d std::make_shared\u003cPKBReaderManager\u003e(pkb);"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"//  std::shared_ptr\u003cPKBWriterManager\u003e pkbWriter \u003d std::make_shared\u003cPKBWriterManager\u003e(pkb);"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"//  SECTION(\"insertVariable: Basic\") {"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"//    std::string x \u003d \"x\";"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"//    pkbWriter-\u003einsertVariable(x);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"//    std::unordered_set\u003cstd::string\u003e variables \u003d pkbReader-\u003egetAllVariables();"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"//    REQUIRE(variables.size() \u003d\u003d 1);"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"//    REQUIRE(variables.find(x) !\u003d variables.end());"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"//  }"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"insertVariable: Multiple\") {"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"//        std::string x \u003d \"x\";"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"//        std::string y \u003d \"y\";"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertVariable(x);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertVariable(y);"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"//        std::unordered_set\u003cstd::string\u003e variables \u003d pkbReader-\u003egetAllVariables();"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(variables.size() \u003d\u003d 2);"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(variables.find(x) !\u003d variables.end());"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(variables.find(y) !\u003d variables.end());"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"//"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"//    SECTION(\"insertVariable: Duplicate\") {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"//        std::string x \u003d \"x\";"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertVariable(x);"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"//        pkbWriter-\u003einsertVariable(x);"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"//        std::unordered_set\u003cstd::string\u003e variables \u003d pkbReader-\u003egetAllVariables();"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(variables.size() \u003d\u003d 1);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"//        REQUIRE(variables.find(x) !\u003d variables.end());"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"//    }"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"//}"}],"authorContributionMap":{"jianoway":39}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/AssignReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"AssignReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto pkbReader \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto pkbWriter \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    auto assignReader \u003d pkbReader-\u003egetAssignReader();"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    auto assignWriter \u003d pkbWriter-\u003egetAssignWriter();"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllAssigns: Empty\") {"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(assignReader-\u003egetAllAssigns().empty());"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllAssigns: Non-empty\") {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        assignWriter-\u003einsertAssign(1);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        assignWriter-\u003einsertAssign(2);"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(assignReader-\u003egetAllAssigns() \u003d\u003d std::unordered_set\u003cint\u003e{1, 2});"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        assignWriter-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":21}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/CallReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"CallReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto pkbReader \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto pkbWriter \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    auto callReader \u003d pkbReader-\u003egetCallReader();"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    auto callWriter \u003d pkbWriter-\u003egetCallWriter();"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllCalls: Empty\") {"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(callReader-\u003egetAllCalls().empty());"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllCalls: Non-empty\") {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        callWriter-\u003einsertCall(3);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        callWriter-\u003einsertCall(4);"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(callReader-\u003egetAllCalls() \u003d\u003d std::unordered_set\u003cint\u003e{3, 4});"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        callWriter-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":21}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/ConstantReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ConstantReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto pkbReader \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto pkbWriter \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    auto constantReader \u003d pkbReader-\u003egetConstantReader();"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    auto constantWriter \u003d pkbWriter-\u003egetConstantWriter();"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllConstants: Empty\") {"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(constantReader-\u003egetAllConstants().empty());"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllConstants: Non-empty\") {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        constantWriter-\u003einsertConstant(5);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        constantWriter-\u003einsertConstant(6);"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(constantReader-\u003egetAllConstants() \u003d\u003d std::unordered_set\u003cint\u003e{5, 6});"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        constantWriter-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":21}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/IfReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"IfReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto pkbReader \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto pkbWriter \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    auto ifReader \u003d pkbReader-\u003egetIfReader();"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    auto ifWriter \u003d pkbWriter-\u003egetIfWriter();"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllIfs: Empty\") {"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(ifReader-\u003egetAllIfs().empty());"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllIfs: Non-empty\") {"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        ifWriter-\u003einsertIf(7);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        ifWriter-\u003einsertIf(8);"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(ifReader-\u003egetAllIfs() \u003d\u003d std::unordered_set\u003cint\u003e{7, 8});"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        ifWriter-\u003eclear();"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":21}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/PrintReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"PrintReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto printReader \u003d pkbManager-\u003egetPKBReaderManager()-\u003egetPrintReader();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto printWriter \u003d pkbManager-\u003egetPKBWriterManager()-\u003egetPrintWriter();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllPrints: Empty\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(printReader-\u003egetAllPrints().empty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllPrints: Non-empty\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        printWriter-\u003einsertPrint(1);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        printWriter-\u003einsertPrint(2);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(printReader-\u003egetAllPrints() \u003d\u003d std::unordered_set\u003cint\u003e{1, 2});"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        printWriter-\u003eclear();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":19}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/ProcedureReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ProcedureReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto procedureReader \u003d pkbManager-\u003egetPKBReaderManager()-\u003egetProcedureReader();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto procedureWriter \u003d pkbManager-\u003egetPKBWriterManager()-\u003egetProcedureWriter();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllProcedures: Empty\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(procedureReader-\u003egetAllProcedures().empty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllProcedures: Non-empty\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        procedureWriter-\u003einsertProcedure(\"main\");"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        procedureWriter-\u003einsertProcedure(\"helper\");"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(procedureReader-\u003egetAllProcedures() \u003d\u003d std::unordered_set\u003cstd::string\u003e{\"main\", \"helper\"});"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        procedureWriter-\u003eclear();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":19}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/ReadReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ReadReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto readReader \u003d pkbManager-\u003egetPKBReaderManager()-\u003egetReadReader();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto readWriter \u003d pkbManager-\u003egetPKBWriterManager()-\u003egetReadWriter();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllReads: Empty\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(readReader-\u003egetAllReads().empty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllReads: Non-empty\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        readWriter-\u003einsertRead(3);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        readWriter-\u003einsertRead(4);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(readReader-\u003egetAllReads() \u003d\u003d std::unordered_set\u003cint\u003e{3, 4});"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        readWriter-\u003eclear();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":19}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/StatementReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"StatementReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto statementReader \u003d pkbManager-\u003egetPKBReaderManager()-\u003egetStatementReader();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto statementWriter \u003d pkbManager-\u003egetPKBWriterManager()-\u003egetStatementWriter();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllStatements: Empty\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementReader-\u003egetAllStatements().empty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllStatements: Non-empty\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        statementWriter-\u003einsertStatement(5);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        statementWriter-\u003einsertStatement(6);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementReader-\u003egetAllStatements() \u003d\u003d std::unordered_set\u003cint\u003e{5, 6});"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        statementWriter-\u003eclear();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":19}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/VariableReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/readers/VariableReader\") {"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"  std::string x \u003d \"x\";"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"  std::string y \u003d \"y\";"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"  auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"  auto pkbReader \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"  auto pkbWriter \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"  auto variableReader \u003d pkbReader-\u003egetVariableReader();"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"  auto variableWriter \u003d pkbWriter-\u003egetVariableWriter();"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"  SECTION(\"getAllVariables: Empty\") {"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    REQUIRE(variableReader-\u003egetAllVariables().empty());"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"  SECTION(\"getAllVariables: Non-empty\") {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    variableWriter-\u003einsertVariable(x);"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    variableWriter-\u003einsertVariable(y);"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    REQUIRE(variableReader-\u003egetAllVariables() \u003d\u003d std::unordered_set\u003cstd::string\u003e{\"x\", \"y\"});"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    variableWriter-\u003eclear();"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":23}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/entities/WhileReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"WhileReader: Basic Functionality\") {"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"    auto pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto whileReader \u003d pkbManager-\u003egetPKBReaderManager()-\u003egetWhileReader();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto whileWriter \u003d pkbManager-\u003egetPKBWriterManager()-\u003egetWhileWriter();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllWhiles: Empty\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(whileReader-\u003egetAllWhiles().empty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getAllWhiles: Non-empty\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        whileWriter-\u003einsertWhile(7);"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        whileWriter-\u003einsertWhile(8);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(whileReader-\u003egetAllWhiles() \u003d\u003d std::unordered_set\u003cint\u003e{7, 8});"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        whileWriter-\u003eclear();"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":19}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/FollowsReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/FollowsStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"FollowsReader: Basic Functionality\") {"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto followsStore \u003d std::make_shared\u003cFollowsStore\u003e();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    FollowsReader followsReader(followsStore);"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsReader.isEmpty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Follows relationships\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        // Assume these methods exist to add follows relationships directly to the store for testing"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        followsStore-\u003eaddRelationship(1, 2);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        followsStore-\u003eaddRelationship(2, 3);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsReader.isEmpty());"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsReader.hasFollows(1, 2));"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsReader.hasFollows(2, 3));"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsReader.hasFollows(1, 3)); // Not directly follows"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        auto preFollows \u003d followsReader.getPreFollows(2);"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(preFollows \u003d\u003d std::unordered_set\u003cint\u003e{1});"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        auto postFollows \u003d followsReader.getPostFollows(2);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(postFollows \u003d\u003d std::unordered_set\u003cint\u003e{3});"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        auto allPreFollows \u003d followsReader.getAllPreFollows();"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPreFollows.size() \u003d\u003d 2);"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPreFollows.find(1) !\u003d allPreFollows.end());"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPreFollows.find(2) !\u003d allPreFollows.end());"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        auto allPostFollows \u003d followsReader.getAllPostFollows();"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPostFollows.size() \u003d\u003d 2);"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPostFollows.find(2) !\u003d allPostFollows.end());"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPostFollows.find(3) !\u003d allPostFollows.end());"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":39}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/FollowsTReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/FollowsTStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/FollowsTReader.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"FollowsTReader: Handling Transitive Relationships\") {"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto followsTStore \u003d std::make_shared\u003cFollowsTStore\u003e();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    FollowsTReader followsTReader(followsTStore);"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.isEmpty());"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking FollowsT relationships including transitive\") {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        // Simulate the scenario where transitive relationships are discovered and need to be explicitly added"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(1, 2);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(2, 3);"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(1, 3); // Explicitly adding transitive relationship"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(3, 4);"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(1, 4); // Adding because of transitive closure from 1 through 3 to 4"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        followsTStore-\u003eaddRelationship(2, 4); // Adding because of transitive closure from 2 through 3 to 4"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsTReader.isEmpty());"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(1, 2));"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(2, 3));"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(1, 3)); // Checking direct transitive relationship"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(3, 4));"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(1, 4)); // Checking extended transitive relationship"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTReader.hasFollowsT(2, 4)); // Additional transitive relationship"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        auto preFollowsT_4 \u003d followsTReader.getPreFollowsT(4);"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(preFollowsT_4 \u003d\u003d std::unordered_set\u003cint\u003e{1, 2, 3}); // 1, 2, and 3 are all predecessors of 4 in FollowsT"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        auto postFollowsT_1 \u003d followsTReader.getPostFollowsT(1);"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(postFollowsT_1 \u003d\u003d std::unordered_set\u003cint\u003e{2, 3, 4}); // 1 is a predecessor of 2, 3, and 4 in FollowsT"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        // Ensuring that the complete sets of predecessors and successors in FollowsT relationships are correctly identified"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        auto allPreFollowsT \u003d followsTReader.getAllPreFollowsT();"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPreFollowsT.size() \u003d\u003d 3); // 1, 2, 3 are all valid predecessors in some FollowsT relationships"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPreFollowsT \u003d\u003d std::unordered_set\u003cint\u003e{1, 2, 3});"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        auto allPostFollowsT \u003d followsTReader.getAllPostFollowsT();"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPostFollowsT.size() \u003d\u003d 3); // 2, 3, 4 are all valid successors in some FollowsT relationships"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allPostFollowsT \u003d\u003d std::unordered_set\u003cint\u003e{2, 3, 4});"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":46}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/ModifiesPReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ModifiesPStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/ModifiesPReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ModifiesPReader: Basic Functionality\", \"[ModifiesPReader]\") {"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto modifiesPStore \u003d std::make_shared\u003cModifiesPStore\u003e();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    ModifiesPReader modifiesPReader(modifiesPStore);"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPReader.isEmpty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Modifies relationships for procedures\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        // Assume these methods exist to add modifies relationships directly to the store for testing"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore-\u003eaddRelationship(\"procedureX\", \"variableA\");"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore-\u003eaddRelationship(\"procedureX\", \"variableB\");"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore-\u003eaddRelationship(\"procedureY\", \"variableA\");"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesPReader.isEmpty());"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPReader.hasRelationship(\"procedureX\", \"variableA\"));"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPReader.hasRelationship(\"procedureX\", \"variableB\"));"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPReader.hasRelationship(\"procedureY\", \"variableA\"));"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesPReader.hasRelationship(\"procedureY\", \"variableB\")); // This relationship does not exist"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        auto variablesModifiedByProcedureX \u003d modifiesPReader.getRelationshipsByKey(\"procedureX\");"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByProcedureX.size() \u003d\u003d 2);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByProcedureX.count(\"variableA\"));"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByProcedureX.count(\"variableB\"));"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        auto proceduresModifyingVariableA \u003d modifiesPReader.getRelationshipsByValue(\"variableA\");"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(proceduresModifyingVariableA.size() \u003d\u003d 2); // Both procedures modify variableA"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(proceduresModifyingVariableA.count(\"procedureX\"));"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(proceduresModifyingVariableA.count(\"procedureY\"));"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        auto allModifyingProcedures \u003d modifiesPReader.getKeys();"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingProcedures.size() \u003d\u003d 2); // \"procedureX\" and \"procedureY\""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingProcedures.count(\"procedureX\"));"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingProcedures.count(\"procedureY\"));"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        auto allModifiedVariables \u003d modifiesPReader.getValues();"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.size() \u003d\u003d 2); // \"variableA\" and \"variableB\""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.count(\"variableA\"));"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.count(\"variableB\"));"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":46}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/ModifiesSReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ModifiesSStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/ModifiesSReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ModifiesSReader: Basic Functionality\", \"[ModifiesSReader]\") {"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto modifiesSStore \u003d std::make_shared\u003cModifiesSStore\u003e();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    ModifiesSReader modifiesSReader(modifiesSStore);"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSReader.isEmpty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Modifies relationships for statements\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        // Assuming methods to add modifies relationships directly for testing"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore-\u003eaddRelationship(1, \"variableX\"); // Statement 1 modifies variableX"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore-\u003eaddRelationship(2, \"variableY\"); // Statement 2 modifies variableY"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore-\u003eaddRelationship(1, \"variableZ\"); // Statement 1 also modifies variableZ"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesSReader.isEmpty());"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSReader.hasRelationship(1, \"variableX\"));"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSReader.hasRelationship(2, \"variableY\"));"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSReader.hasRelationship(1, \"variableZ\"));"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesSReader.hasRelationship(2, \"variableX\")); // This relationship does not exist"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        auto variablesModifiedByStatement1 \u003d modifiesSReader.getRelationshipsByKey(1);"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByStatement1.size() \u003d\u003d 2);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByStatement1.count(\"variableX\"));"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByStatement1.count(\"variableZ\"));"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        auto statementsModifyingVariableX \u003d modifiesSReader.getRelationshipsByValue(\"variableX\");"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsModifyingVariableX.size() \u003d\u003d 1); // Only statement 1 modifies variableX"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsModifyingVariableX.count(1));"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        auto allModifyingStatements \u003d modifiesSReader.getKeys();"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingStatements.size() \u003d\u003d 2); // Statements 1 and 2"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingStatements.count(1));"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifyingStatements.count(2));"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        auto allModifiedVariables \u003d modifiesSReader.getValues();"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.size() \u003d\u003d 3); // \"variableX\" and \"variableY\" and \"variableZ\""},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.count(\"variableX\"));"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.count(\"variableY\"));"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allModifiedVariables.count(\"variableZ\"));"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":46}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/ParentReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ParentStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/ParentReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentReader: Basic Functionality\") {"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto parentStore \u003d std::make_shared\u003cParentStore\u003e();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    ParentReader parentReader(parentStore);"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentReader.isEmpty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Parent relationships\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        parentStore-\u003eaddRelationship(1, 2); // 1 is the parent of 2"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        parentStore-\u003eaddRelationship(1, 3); // 1 is also the parent of 3"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentReader.isEmpty());"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentReader.hasParent(1, 2));"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentReader.hasParent(1, 3));"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentReader.hasParent(2, 1)); // Incorrect direction"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        auto parentsOf2 \u003d parentReader.getParent(2);"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentsOf2.size() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentsOf2.find(1) !\u003d parentsOf2.end());"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        auto childrenOf1 \u003d parentReader.getChild(1);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.size() \u003d\u003d 2);"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.find(2) !\u003d childrenOf1.end());"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.find(3) !\u003d childrenOf1.end());"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        auto allChildren \u003d parentReader.getAllChildren();"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.size() \u003d\u003d 2); // Correctly reflects two unique children"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(2) !\u003d allChildren.end());"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(3) !\u003d allChildren.end());"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"}"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentReader: No Relationships Exist\") {"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"    auto parentStore \u003d std::make_shared\u003cParentStore\u003e();"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"    ParentReader parentReader(parentStore);"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"    // Assuming relationships are added in other tests, ensure clean state"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eclear(); // Ensure the store is empty for this test"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Querying for non-existent parent or child returns empty\") {"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentReader.getParent(99).empty());"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentReader.getChild(99).empty());"},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"}"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentReader: Complex Relationship Scenarios\") {"},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"    auto parentStore \u003d std::make_shared\u003cParentStore\u003e();"},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":"    ParentReader parentReader(parentStore);"},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"    // Example of adding complex parent-child relationships"},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eaddRelationship(1, 2);"},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eaddRelationship(1, 3);"},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eaddRelationship(2, 4);"},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eaddRelationship(3, 5);"},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"    parentStore-\u003eaddRelationship(3, 6);"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieving all parents and children\") {"},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"        auto allParents \u003d parentReader.getAllParents();"},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        auto allChildren \u003d parentReader.getAllChildren();"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allParents.size() \u003d\u003d 3); // Parents: 1, 2, and 3"},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allParents.find(1) !\u003d allParents.end());"},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allParents.find(2) !\u003d allParents.end());"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allParents.find(3) !\u003d allParents.end());"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":72,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.size() \u003d\u003d 5); // Children: 2, 3, 4, 5, and 6"},{"lineNumber":73,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(2) !\u003d allChildren.end());"},{"lineNumber":74,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(3) !\u003d allChildren.end());"},{"lineNumber":75,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(4) !\u003d allChildren.end());"},{"lineNumber":76,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(5) !\u003d allChildren.end());"},{"lineNumber":77,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allChildren.find(6) !\u003d allChildren.end());"},{"lineNumber":78,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":80,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Querying complex relationships\") {"},{"lineNumber":81,"author":{"gitId":"shurvirarora"},"content":"        // Test for getting children of a parent with multiple children"},{"lineNumber":82,"author":{"gitId":"shurvirarora"},"content":"        auto childrenOf1 \u003d parentReader.getChild(1);"},{"lineNumber":83,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.size() \u003d\u003d 2); // Direct children of 1 are 2 and 3"},{"lineNumber":84,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.find(2) !\u003d childrenOf1.end());"},{"lineNumber":85,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childrenOf1.find(3) !\u003d childrenOf1.end());"},{"lineNumber":86,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":87,"author":{"gitId":"shurvirarora"},"content":"        // Test for getting parent of a child that is a second-level descendant"},{"lineNumber":88,"author":{"gitId":"shurvirarora"},"content":"        auto parentOf4 \u003d parentReader.getParent(4);"},{"lineNumber":89,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentOf4.size() \u003d\u003d 2); // Parent of 4 is 2"},{"lineNumber":90,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentOf4.find(2) !\u003d parentOf4.end());"},{"lineNumber":91,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":92}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/ParentTReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ParentTStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/ParentTReader.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentTReader: Basic Functionality\", \"[ParentTReader]\") {"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto parentTStore \u003d std::make_shared\u003cParentTStore\u003e();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    ParentTReader parentTReader(parentTStore);"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTReader.isEmpty());"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking ParentT relationships\") {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        parentTStore-\u003eaddRelationship(1, 2);"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        parentTStore-\u003eaddRelationship(2, 3);"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        parentTStore-\u003eaddRelationship(1, 3); // Explicitly adding transitive relationship for testing"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentTReader.isEmpty());"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTReader.hasParentT(1, 2));"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTReader.hasParentT(1, 3));"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTReader.hasParentT(2, 3));"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentTReader.hasParentT(3, 1)); // Incorrect direction, should not exist"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieval of transitive parents and children"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        auto parentTOf3 \u003d parentTReader.getParentT(3);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTOf3.size() \u003d\u003d 2); // 1 and 2 are transitive parents of 3"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTOf3.count(1));"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTOf3.count(2));"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        auto childTOf1 \u003d parentTReader.getChildT(1);"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childTOf1.size() \u003d\u003d 2); // 2 and 3 are transitive children of 1"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childTOf1.count(2));"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(childTOf1.count(3));"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":37}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/UsesPReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesPStore.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/UsesPReader.h\""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"UsesPReader: Basic Functionality\", \"[UsesPReader]\") {"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    auto usesPStore \u003d std::make_shared\u003cUsesPStore\u003e();"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":"    UsesPReader usesPReader(usesPStore);"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPReader.isEmpty());"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Uses relationships for procedures\") {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        // Directly add relationships to usesPStore for testing"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        usesPStore-\u003eaddRelationship(\"procedure1\", \"varA\");"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        usesPStore-\u003eaddRelationship(\"procedure1\", \"varB\");"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        usesPStore-\u003eaddRelationship(\"procedure2\", \"varA\");"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesPReader.isEmpty());"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPReader.hasRelationship(\"procedure1\", \"varA\"));"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPReader.hasRelationship(\"procedure1\", \"varB\"));"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPReader.hasRelationship(\"procedure2\", \"varA\"));"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesPReader.hasRelationship(\"procedure2\", \"varB\")); // This relationship does not exist"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        auto varsUsedByProc1 \u003d usesPReader.getRelationshipsByKey(\"procedure1\");"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(varsUsedByProc1.size() \u003d\u003d 2);"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(varsUsedByProc1.count(\"varA\"));"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(varsUsedByProc1.count(\"varB\"));"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        auto procsUsingVarA \u003d usesPReader.getRelationshipsByValue(\"varA\");"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(procsUsingVarA.size() \u003d\u003d 2); // Both procedures use varA"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(procsUsingVarA.count(\"procedure1\"));"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(procsUsingVarA.count(\"procedure2\"));"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        auto allUsingProcedures \u003d usesPReader.getKeys();"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingProcedures.size() \u003d\u003d 2); // \"procedure1\" and \"procedure2\""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingProcedures.count(\"procedure1\"));"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingProcedures.count(\"procedure2\"));"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        auto allUsedVariables \u003d usesPReader.getValues();"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.size() \u003d\u003d 2); // \"varA\" and \"varB\""},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.count(\"varA\"));"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.count(\"varB\"));"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":46}},{"path":"Team19/Code19/src/unit_testing/src/pkb/readers/relationships/UsesSReaderTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesSStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/readers/relationships/UsesSReader.h\""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"UsesSReader: Basic Functionality\", \"[UsesSReader]\") {"},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"    auto usesSStore \u003d std::make_shared\u003cUsesSStore\u003e();"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":"    UsesSReader usesSReader(usesSStore);"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isEmpty on initialization\") {"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSReader.isEmpty());"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Adding and checking Uses relationships for statements\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"        // Assume these methods exist to add uses relationships directly to the store for testing"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"        usesSStore-\u003eaddRelationship(1, \"variableX\");"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"        usesSStore-\u003eaddRelationship(2, \"variableY\");"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        usesSStore-\u003eaddRelationship(1, \"variableY\");"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesSReader.isEmpty());"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSReader.hasRelationship(1, \"variableX\"));"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSReader.hasRelationship(2, \"variableY\"));"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSReader.hasRelationship(1, \"variableY\"));"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesSReader.hasRelationship(2, \"variableX\")); // This relationship does not exist"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        auto variablesUsedByStmt1 \u003d usesSReader.getRelationshipsByKey(1);"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesUsedByStmt1.size() \u003d\u003d 2);"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesUsedByStmt1.count(\"variableX\"));"},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesUsedByStmt1.count(\"variableY\"));"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        auto statementsUsingVariableY \u003d usesSReader.getRelationshipsByValue(\"variableY\");"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsUsingVariableY.size() \u003d\u003d 2); // Both statements 1 and 2 use variableY"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsUsingVariableY.count(1));"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsUsingVariableY.count(2));"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        auto allUsingStatements \u003d usesSReader.getKeys();"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingStatements.size() \u003d\u003d 2); // Statements 1 and 2"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingStatements.count(1));"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsingStatements.count(2));"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        auto allUsedVariables \u003d usesSReader.getValues();"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.size() \u003d\u003d 2); // \"variableX\" and \"variableY\""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.count(\"variableX\"));"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(allUsedVariables.count(\"variableY\"));"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":46}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/entities/EntityStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/entities/EntityStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"using namespace std;"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/stores/entities/EntityStore\") {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addEntity: Basic Int\") {"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cint\u003e entityStore;"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(1);"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(2);"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(3);"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{1, 2, 3};"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities() \u003d\u003d expected);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addEntity: Duplicate Int\") {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cint\u003e entityStore;"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(1);"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(1);"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(1);"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{1};"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities() \u003d\u003d expected);"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addEntity: Basic String\") {"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cstring\u003e entityStore;"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"a\");"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"b\");"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"c\");"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d unordered_set\u003cstring\u003e{\"a\", \"b\", \"c\"};"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities() \u003d\u003d expected);"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addEntity: Duplicate String\") {"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cstring\u003e entityStore;"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"a\");"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"a\");"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(\"a\");"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d unordered_set\u003cstring\u003e{\"a\"};"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities() \u003d\u003d expected);"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear: Empty Store\") {"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cint\u003e entityStore;"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        entityStore.clear();"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities().empty());"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear: Non-Empty Store\") {"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        EntityStore\u003cint\u003e entityStore;"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(1);"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(2);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        entityStore.addEntity(3);"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        entityStore.clear();"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        REQUIRE(entityStore.getAllEntities().empty());"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":58}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/patterns/assign/AssignPatternStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/patterns/assign/AssignPatternStore.h\""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/stores/patterns/assign/AssignPatternStore\") {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"    std::string x \u003d \"x\";"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    std::string y \u003d \"y\";"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    std::string one \u003d \"1\";"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addAssignPattern\") {"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.contains(1));"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(assignPatternStore.contains(2));"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear\") {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"y\", \"2\");"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.clear();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getAllPatterns().empty());"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Get Pattern\") {"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getPattern(1).first \u003d\u003d \"x\");"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getPattern(1).second \u003d\u003d \"1\");"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"  SECTION(\"Get All Patterns\") {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"y\", \"2\");"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::pair\u003cstd::string, std::string\u003e\u003e{{1, {\"x\", \"1\"}}, {2, {\"y\", \"2\"}}};"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getAllPatterns() \u003d\u003d expected);"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Get LHS\") {"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getLHS(1) \u003d\u003d \"x\");"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Get RHS\") {"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getRHS(1) \u003d\u003d \"1\");"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Contains LHS\") {"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"x\", \"2\");"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 2};"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithLHS(\"x\") \u003d\u003d expected);"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithLHS(\"y\") \u003d\u003d expected);"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Contains RHS\") {"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"1\");"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"x\", \"2\");"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1};"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithRHS(\"1\") \u003d\u003d expected);"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithRHS(\"3\") \u003d\u003d expected);"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Contains Partial RHS\") {"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"123+3\");"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"x\", \"122+3\");"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(3, \"x\", \"143+3\");"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 3};"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithPartialRHS(\"3+3\") \u003d\u003d expected);"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    SECTION(\"Contains LHS and RHS\") {"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"123+3\");"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"x\", \"122+3\");"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(3, \"x\", \"143+3\");"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(4, \"y\", \"143+3\");"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(5, \"z\", \"143+3\");"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(6, \"x\", \"123+3\");"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 6};"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithLHSRHS(\"x\", \"123+3\") \u003d\u003d expected);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"  SECTION(\"Contains LHS and Partial RHS\") {"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"        AssignPatternStore assignPatternStore;"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(1, \"x\", \"123+3\");"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(2, \"x\", \"122+3\");"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(3, \"x\", \"143+3\");"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(4, \"y\", \"143+3\");"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(5, \"z\", \"143+3\");"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        assignPatternStore.addAssignPattern(6, \"x\", \"523+3\");"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 3, 6};"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        REQUIRE(assignPatternStore.getStatementNumbersWithLHSPartialRHS(\"x\", \"3+3\") \u003d\u003d expected);"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":103}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/RelationshipStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/RelationshipStore.h\""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/stores/relationships/RelationshipStore\") {"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    SECTION(\"hasRelationship: Empty Store\") {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(relationshipStore.hasRelationship(1, 2));"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    SECTION(\"hasRelationship: Non-Empty Store\") {"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.hasRelationship(1, 2));"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    SECTION(\"hasRelationship: Non-Existent Relationship\") {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(relationshipStore.hasRelationship(2, 1));"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    SECTION(\"isEmpty: Empty Store\") {"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.isEmpty());"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    SECTION(\"isEmpty: Non-Empty Store\") {"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(relationshipStore.isEmpty());"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addRelationship: Basic\") {"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{{1, {2}}};"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addRelationship: Duplicate\") {"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{{1, {2}}};"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear: Empty Store\") {"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"        relationshipStore.clear();"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.isEmpty());"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear: Non-Empty Store\") {"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        relationshipStore.clear();"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.isEmpty());"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getKeyValueRelationships: Empty Store\") {"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{};"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getKeyValueRelationships: Non-Empty Store\") {"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"                {1, {2, 3}},"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"                {2, {3}}"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValueKeyRelationships: Empty Store\") {"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{};"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getValueKeyRelationships() \u003d\u003d expected);"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValueKeyRelationships: Non-Empty Store\") {"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"                {2, {1}},"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"                {3, {1, 2}}"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getValueKeyRelationships() \u003d\u003d expected);"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getRelationshipsByKey: Empty Store\") {"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getRelationshipsByKey(1) \u003d\u003d expected);"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getRelationshipsByKey: Non-Empty Store\") {"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3};"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getRelationshipsByKey(1) \u003d\u003d expected);"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getRelationshipsByValue: Empty Store\") {"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getRelationshipsByValue(1) \u003d\u003d expected);"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getRelationshipsByValue: Non-Empty Store\") {"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1};"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getRelationshipsByValue(2) \u003d\u003d expected);"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"        expected \u003d std::unordered_set\u003cint\u003e{1, 2};"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getRelationshipsByValue(3) \u003d\u003d expected);"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"  SECTION(\"getKeys: Empty Store\") {"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"    RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"    auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"    REQUIRE(relationshipStore.getKeys() \u003d\u003d expected);"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getKeys: Non-Empty Store\") {"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 2};"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getKeys() \u003d\u003d expected);"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValues: Empty Store\") {"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{};"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getValues() \u003d\u003d expected);"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValues: Non-Empty Store\") {"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"        RelationshipStore\u003cint, int\u003e relationshipStore;"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 2);"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(1, 3);"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"        relationshipStore.addRelationship(2, 3);"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3};"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":"        REQUIRE(relationshipStore.getValues() \u003d\u003d expected);"},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":159}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/FollowsStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/FollowsStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the FollowsStore class."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The FollowsStore class manages direct \u0027Follows\u0027 relationships where one statement"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * directly follows another in a SIMPLE program. These tests ensure that the"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * FollowsStore correctly records and queries these relationships."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"pkb/stores/FollowsStore\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    // Test case for retrieving direct Follows relationships"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getFollows\") {"},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsStore and add relationships"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        FollowsStore followsStore;"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(1, 2); // Statement 1 follows Statement 2"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(2, 3); // Statement 2 follows Statement 3"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        // Expected relationships mapping"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        auto expected \u003d unordered_map\u003cint, unordered_set\u003cint\u003e\u003e{"},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"                {1, {2}}, // Statement 1 is followed by Statement 2"},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"                {2, {3}}  // Statement 2 is followed by Statement 3"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        };"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        // Verify that stored relationships match the expected mapping"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        // Test case for checking the existence of direct Follows relationships"},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"isFollows\") {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsStore and add relationships"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        FollowsStore followsStore;"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(1, 2); // Statement 1 follows Statement 2"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(2, 3); // Statement 2 follows Statement 3"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        // Verify the existence of specified Follows relationships"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.hasRelationship(1, 2));"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.hasRelationship(2, 3));"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        // Verify that non-existent and non-transitive relationships return false"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsStore.hasRelationship(1, 3)); // Not transitive"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsStore.hasRelationship(2, 1)); // Inverse relationship"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        // Test case for retrieving the predecessors in Follows relationships"},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getPreFollows\") {"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsStore and add relationships"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        FollowsStore followsStore;"},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(1, 2); // Statement 1 follows Statement 2"},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(2, 3); // Statement 2 follows Statement 3"},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the correct predecessor is returned for each statement"},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{1};"},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getRelationshipsByValue(2) \u003d\u003d expected); // Statement 1 precedes Statement 2"},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"        expected \u003d unordered_set\u003cint\u003e{2};"},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getRelationshipsByValue(3) \u003d\u003d expected); // Statement 2 precedes Statement 3"},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        // Verify that querying a statement with no predecessors returns an empty set"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getRelationshipsByValue(1).empty());"},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        // Test case for retrieving the successors in Follows relationships"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"getPostFollows\") {"},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsStore and add relationships"},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        FollowsStore followsStore;"},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(1, 2); // Statement 1 follows Statement 2"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"        followsStore.addRelationship(2, 3); // Statement 2 follows Statement 3"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":72,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the correct successor is returned for each statement"},{"lineNumber":73,"author":{"gitId":"shurvirarora"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{2};"},{"lineNumber":74,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getRelationshipsByKey(1) \u003d\u003d expected); // Statement 2 follows Statement 1"},{"lineNumber":75,"author":{"gitId":"shurvirarora"},"content":"        expected \u003d unordered_set\u003cint\u003e{3};"},{"lineNumber":76,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsStore.getRelationshipsByKey(2) \u003d\u003d expected); // Statement 3 follows Statement 2"},{"lineNumber":77,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":78}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/FollowsTStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"#include \"pkb/stores/relationships/types/FollowsTStore.h\""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the FollowsTStore class."},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The FollowsTStore class manages transitive \u0027Follows*\u0027 relationships within a SIMPLE program,"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * meaning it tracks not only direct \u0027Follows\u0027 relationships but also indirect ones where"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * a statement follows another through one or more intermediate statements."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" * These tests ensure that the FollowsTStore correctly records and queries these transitive relationships."},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/stores/FollowsTStore\") {"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Test case for retrieving transitive Follows relationships"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getFollowsT\") {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsTStore and add relationships"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        FollowsTStore followsTStore;"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(1, 2); // Statement 1 followed by Statement 2"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(1, 3); // Statement 1 indirectly followed by Statement 3 (transitively)"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(2, 3); // Statement 2 followed by Statement 3"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        // Expected relationships mapping, including both direct and indirect relationships"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d unordered_map\u003cint, unordered_set\u003cint\u003e\u003e{"},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"                {1, {2, 3}}, // Statement 1 is followed by both Statement 2 and 3"},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"                {2, {3}}     // Statement 2 is followed by Statement 3"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        // Verify that stored relationships match the expected mapping"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        REQUIRE(followsTStore.getKeyValueRelationships() \u003d\u003d expected);"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Test case for checking the existence of transitive Follows relationships"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    SECTION(\"isFollowsT\") {"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsTStore and add relationships"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        FollowsTStore followsTStore;"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(1, 2); // Statement 1 followed by Statement 2"},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(1, 3); // Statement 1 indirectly followed by Statement 3 (transitively)"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        followsTStore.addRelationship(2, 3); // Statement 2 followed by Statement 3"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        // Verify the existence of specified Follows relationships"},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTStore.hasRelationship(1, 3)); // Transitive relationship exists"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(followsTStore.hasRelationship(2, 3)); // Direct relationship exists"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        // Verify that non-existent relationships return false"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsTStore.hasRelationship(1, 4)); // Relationship does not exist"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsTStore.hasRelationship(2, 1)); // Inverse relationship does not exist"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        // Test case for retrieving the predecessors in transitive Follows relationships"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getPreFollowsT\") {"},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsTStore and add relationships"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        FollowsTStore followsTStore;"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(1, 2);"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(1, 3);"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(2, 3);"},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"        // Verify that correct predecessors are returned for each statement"},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{1}; // Statement 1 precedes Statement 2"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        REQUIRE(followsTStore.getRelationshipsByValue(2) \u003d\u003d expected);"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"        expected \u003d unordered_set\u003cint\u003e{1, 2}; // Statements 1 and 2 precede Statement 3"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        REQUIRE(followsTStore.getRelationshipsByValue(3) \u003d\u003d expected);"},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        // Verify that querying for non-existent relationships returns the correct result"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(followsTStore.getRelationshipsByValue(1).size() \u003e 0); // No statement precedes Statement 1"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        // Test case for retrieving the successors in transitive Follows relationships"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getPostFollowsT\") {"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":"        // Initialize FollowsTStore and add relationships"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        FollowsTStore followsTStore;"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(1, 2);"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(1, 3);"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        followsTStore.addRelationship(2, 3);"},{"lineNumber":76,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":77,"author":{"gitId":"shurvirarora"},"content":"        // Verify that correct successors are returned for each statement"},{"lineNumber":78,"author":{"gitId":"shurvirarora"},"content":"        auto expected \u003d unordered_set\u003cint\u003e{2, 3}; // Statements 2 and 3 follow Statement 1"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"        REQUIRE(followsTStore.getRelationshipsByKey(1) \u003d\u003d expected);"},{"lineNumber":80,"author":{"gitId":"shurvirarora"},"content":"        expected \u003d unordered_set\u003cint\u003e{3}; // Statement 3 follows Statement 2"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        REQUIRE(followsTStore.getRelationshipsByKey(2) \u003d\u003d expected);"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"shurvirarora":48,"jianoway":35}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/ModifiesPStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ModifiesPStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the ModifiesPStore class."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Tests the functionality of managing \"Modifies\" relationships for procedures,"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * focusing on the ability to track which variables are modified by which procedures."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The ModifiesPStore class is tasked with recording and querying these relationships,"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * ensuring that modifications by procedures to variables are accurately tracked and accessible."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ModifiesPStore Functionality\") {"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    // Initialize ModifiesPStore instance for testing."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    ModifiesPStore modifiesPStore;"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Test adding \"Modifies\" relationships and verifying their existence."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Modifies Relationships for Procedures\") {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships between procedures and variables."},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"update\", \"y\");"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"compute\", \"z\");"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the added relationships are correctly identified."},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPStore.hasRelationship(\"main\", \"x\")); // \"main\" procedure modifies variable \"x\"."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPStore.hasRelationship(\"update\", \"y\")); // \"update\" procedure modifies variable \"y\"."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPStore.hasRelationship(\"compute\", \"z\")); // \"compute\" procedure modifies variable \"z\"."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        // Ensure that a non-existent relationship returns false."},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesPStore.hasRelationship(\"main\", \"z\")); // \"main\" does not modify variable \"z\"."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving procedures that modify a specific variable."},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Procedures Modifying a Specific Variable\") {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships between procedures and variables."},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"finalize\", \"x\");"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all procedures that modify the variable \"x\"."},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        auto proceduresModifyingX \u003d modifiesPStore.getRelationshipsByValue(\"x\");"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        auto expectedProcedures \u003d std::unordered_set\u003cstd::string\u003e{\"main\", \"finalize\"};"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(proceduresModifyingX \u003d\u003d expectedProcedures); // Both \"main\" and \"finalize\" modify \"x\"."},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving variables modified by a specific procedure."},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Variables Modified by a Procedure\") {"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships for a single procedure."},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"main\", \"y\");"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all variables modified by the \"main\" procedure."},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        auto variablesModifiedByMain \u003d modifiesPStore.getRelationshipsByKey(\"main\");"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        auto expectedVariables \u003d std::unordered_set\u003cstd::string\u003e{\"x\", \"y\"};"},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByMain \u003d\u003d expectedVariables); // \"main\" modifies variables \"x\" and \"y\"."},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"        // Test the ability to clear all \"Modifies\" relationships from the store."},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Clear All Modifies Relationships\") {"},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"        // Initially, the store should be empty."},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPStore.isEmpty());"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"        // Adding a relationship should change the store\u0027s state to non-empty."},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesPStore.isEmpty());"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":"        // Clearing the store should reset its state to empty."},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        modifiesPStore.clear();"},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesPStore.isEmpty());"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":69,"jianoway":2}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/ModifiesSStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ModifiesSStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the ModifiesSStore class."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Tests the functionality of managing \"Modifies\" relationships for statements,"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * focusing on the ability to track which variables are modified by which statements."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The ModifiesSStore class is responsible for recording and querying these relationships"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * between statement numbers and the variables they modify, ensuring accurate and"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * efficient access to the data."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ModifiesSStore Functionality\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    // Initialize ModifiesSStore instance for testing."},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    ModifiesSStore modifiesSStore;"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    // Test adding \"Modifies\" relationships and verifying their existence."},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Modifies Relationships for Statements\") {"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships between statements and variables."},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(1, \"x\");"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(2, \"y\");"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(3, \"z\");"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the added relationships are correctly identified."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSStore.hasRelationship(1, \"x\")); // Statement 1 modifies variable \"x\"."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSStore.hasRelationship(2, \"y\")); // Statement 2 modifies variable \"y\"."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSStore.hasRelationship(3, \"z\")); // Statement 3 modifies variable \"z\"."},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        // Ensure that a non-existent relationship returns false."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesSStore.hasRelationship(1, \"z\")); // Statement 1 does not modify variable \"z\"."},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving statements that modify a specific variable."},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Statements Modifying a Specific Variable\") {"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships between statements and variables."},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(1, \"x\");"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(4, \"x\");"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all statements that modify the variable \"x\"."},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        auto statementsModifyingX \u003d modifiesSStore.getRelationshipsByValue(\"x\");"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        auto expectedStatements \u003d std::unordered_set\u003cint\u003e{1, 4};"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsModifyingX \u003d\u003d expectedStatements); // Statements 1 and 4 modify \"x\"."},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving variables modified by a specific statement."},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Variables Modified by a Statement\") {"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Modifies\" relationships for a single statement."},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(1, \"x\");"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(1, \"y\");"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all variables modified by Statement 1."},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"        auto variablesModifiedByStmt1 \u003d modifiesSStore.getRelationshipsByKey(1);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        auto expectedVariables \u003d std::unordered_set\u003cstd::string\u003e{\"x\", \"y\"};"},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesModifiedByStmt1 \u003d\u003d expectedVariables); // Statement 1 modifies variables \"x\" and \"y\"."},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"        // Test the ability to clear all \"Modifies\" relationships from the store."},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Clear All Modifies Relationships\") {"},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        // Initially, the store should be empty."},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSStore.isEmpty());"},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"        // Adding a relationship should change the store\u0027s state to non-empty."},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.addRelationship(1, \"x\");"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(modifiesSStore.isEmpty());"},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        // Clearing the store should reset its state to empty."},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        modifiesSStore.clear();"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(modifiesSStore.isEmpty());"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":70,"jianoway":2}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/ParentStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ParentStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the ParentStore class within the Program Knowledge Base (PKB)."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * The ParentStore manages parent-child relationships within a SIMPLE program, specifically focusing on"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * which statements (parent) directly contain other statements (child) within their scope."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * These tests aim to verify the functionality of adding, querying, and managing these relationships."},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentStore Functionality\") {"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    // Initializes an instance of ParentStore for testing."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    ParentStore parentStore;"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Tests the ability to add parent-child relationships and verify their existence."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Parent Relationships\") {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        // Adds parent-child relationships."},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(1, 2); // Statement 1 is the parent of Statement 2."},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(1, 3); // Statement 1 is also the parent of Statement 3."},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(2, 4); // Statement 2 is the parent of Statement 4."},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        // Checks if the added relationships are correctly identified."},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentStore.hasRelationship(1, 2)); // Verifies parent-child relationship."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentStore.hasRelationship(1, 3)); // Verifies another parent-child relationship."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentStore.hasRelationship(2, 4)); // Verifies a third parent-child relationship."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        // Verifies that a non-existent relationship is correctly identified as false."},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentStore.hasRelationship(1, 4)); // Statement 1 is not directly the parent of Statement 4."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        // Tests retrieving all direct parent-child relationships stored."},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Direct Parent-Child Relationships\") {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Adds parent-child relationships."},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(1, 2);"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(1, 3);"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        // Retrieves the mapping of parent statements to their direct children."},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        auto keyValueRelationships \u003d parentStore.getKeyValueRelationships();"},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":"        // Defines the expected mapping of parent to child(ren) for validation."},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{{1, {2, 3}}}; // Statement 1 has children Statements 2 and 3."},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"        // Compares the retrieved relationships against the expected mapping."},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(keyValueRelationships \u003d\u003d expected);"},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        // Tests the functionality of checking the empty state of the store and its ability to clear all relationships."},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Check Empty State and Clear Functionality\") {"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"        // Verifies that the store is initially empty."},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentStore.isEmpty());"},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"        // After adding a relationship, the store should no longer be empty."},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":"        parentStore.addRelationship(1, 2); // Adds a single parent-child relationship."},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentStore.isEmpty()); // The store should now contain relationships."},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"        // Clears all relationships from the store."},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"        parentStore.clear();"},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"        // Verifies that the store is empty after the clear operation."},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentStore.isEmpty());"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":62,"jianoway":1}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/ParentTStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/ParentTStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the ParentTStore class within the Program Knowledge Base (PKB)."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * The ParentTStore manages transitive parent-child relationships within a SIMPLE program,"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * specifically focusing on statements (parents) that contain other statements (children)"},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * either directly or through one or more levels of nesting. These tests aim to verify the"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * functionality of adding, querying, and managing these transitive relationships."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"ParentTStore Functionality\") {"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    // Initializes an instance of ParentTStore for testing."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    ParentTStore parentTStore;"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Tests adding transitive parent-child relationships and verifying their existence."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Transitive Parent Relationships\") {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        // Adds parent-child relationships demonstrating transitivity."},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(1, 2); // Statement 1 is the parent of Statement 2."},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(2, 3); // Statement 2 is the parent of Statement 3, implying 1 is a transitive parent of 3."},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(1, 3); // Directly adding the transitive relationship for testing."},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        // Verifies direct and transitive relationships."},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTStore.hasRelationship(1, 2)); // Direct parent-child relationship."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTStore.hasRelationship(1, 3)); // Transitive parent-child relationship."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTStore.hasRelationship(2, 3)); // Direct parent-child relationship."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        // Ensures that inverse or non-existent relationships are correctly identified as false."},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentTStore.hasRelationship(2, 1)); // Inverse relationship does not exist."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        // Tests retrieving all stored transitive parent-child relationships."},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Transitive Parent-Child Relationships\") {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Adds relationships to test transitivity."},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(1, 2);"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(2, 3);"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(1, 3); // Explicitly adding transitive relationship."},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        // Retrieves the mapping of parent statements to their direct and indirect children."},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        auto keyValueRelationships \u003d parentTStore.getKeyValueRelationships();"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        // Defines the expected mapping of parent to child(ren) including transitivity."},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"                {1, {2, 3}}, // Statement 1 has children Statements 2 and 3 (transitive)."},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"                {2, {3}}     // Statement 2 has child Statement 3 (direct)."},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        };"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        // Compares the retrieved relationships against the expected mapping."},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(keyValueRelationships \u003d\u003d expected);"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        // Tests the store\u0027s ability to clear all relationships and check its empty state."},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Check Empty State and Clear Functionality\") {"},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":"        // Verifies the store is initially empty."},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTStore.isEmpty());"},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"        // Adding a relationship makes the store non-empty."},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.addRelationship(1, 2); // Adds a single parent-child relationship."},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(parentTStore.isEmpty()); // The store should now contain relationships."},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        // Clears all relationships from the store, returning it to an empty state."},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"        parentTStore.clear();"},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(parentTStore.isEmpty()); // The store should be empty after clearing."},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":64,"jianoway":1}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/UsesPStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesPStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the UsesPStore class."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Tests the functionality of managing \"Uses\" relationships for procedures,"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * focusing on the ability to track which variables are used by which procedures."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The UsesPStore class is responsible for recording and querying these relationships,"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * ensuring accurate and efficient access to the data."},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"UsesPStore Functionality\") {"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"    // Initialize UsesPStore instance for testing."},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    UsesPStore usesPStore;"},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":"    // Test adding \"Uses\" relationships and verifying their existence."},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Uses Relationships for Procedures\") {"},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships between procedures and variables."},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"y\");"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"computeCentroid\", \"z\");"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the added relationships are correctly identified."},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPStore.hasRelationship(\"main\", \"x\")); // \"main\" procedure uses variable \"x\"."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPStore.hasRelationship(\"main\", \"y\")); // \"main\" procedure uses variable \"y\"."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPStore.hasRelationship(\"computeCentroid\", \"z\")); // \"computeCentroid\" uses variable \"z\"."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":"        // Ensure that a non-existent relationship returns false."},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesPStore.hasRelationship(\"main\", \"z\")); // \"main\" does not use variable \"z\"."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving procedures that use a specific variable."},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Procedures Using a Specific Variable\") {"},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships between procedures and variables."},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"computeCentroid\", \"x\");"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all procedures that use the variable \"x\"."},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        auto proceduresUsingX \u003d usesPStore.getRelationshipsByValue(\"x\");"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        auto expectedProcedures \u003d std::unordered_set\u003cstd::string\u003e{\"main\", \"computeCentroid\"};"},{"lineNumber":41,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(proceduresUsingX \u003d\u003d expectedProcedures); // Both \"main\" and \"computeCentroid\" use \"x\"."},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving variables used by a specific procedure."},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Variables Used by a Procedure\") {"},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships for a single procedure."},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"y\");"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all variables used by the \"main\" procedure."},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        auto variablesUsedByMain \u003d usesPStore.getRelationshipsByKey(\"main\");"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        auto expectedVariables \u003d std::unordered_set\u003cstd::string\u003e{\"x\", \"y\"};"},{"lineNumber":54,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesUsedByMain \u003d\u003d expectedVariables); // \"main\" uses variables \"x\" and \"y\"."},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":"        // Test the ability to clear all \"Uses\" relationships from the store."},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Clear All Uses Relationships\") {"},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"        // Initially, the store should be empty."},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPStore.isEmpty());"},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":"        // Adding a relationship should change the store\u0027s state to non-empty."},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.addRelationship(\"main\", \"x\");"},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesPStore.isEmpty());"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":"        // Clearing the store should reset its state to empty."},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        usesPStore.clear();"},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesPStore.isEmpty());"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":69,"jianoway":2}},{"path":"Team19/Code19/src/unit_testing/src/pkb/stores/relationships/types/UsesSStoreTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"shurvirarora"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"shurvirarora"},"content":"#include \"pkb/stores/relationships/types/UsesSStore.h\""},{"lineNumber":3,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":4,"author":{"gitId":"shurvirarora"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"shurvirarora"},"content":" * Unit tests for the UsesSStore class."},{"lineNumber":6,"author":{"gitId":"shurvirarora"},"content":" *"},{"lineNumber":7,"author":{"gitId":"shurvirarora"},"content":" * Tests the functionality of managing \"Uses\" relationships for statements,"},{"lineNumber":8,"author":{"gitId":"shurvirarora"},"content":" * focusing on the ability to track which variables are used by which statements."},{"lineNumber":9,"author":{"gitId":"shurvirarora"},"content":" * The UsesSStore class is responsible for recording and querying these relationships"},{"lineNumber":10,"author":{"gitId":"shurvirarora"},"content":" * between statement numbers and the variables they use, ensuring accurate and"},{"lineNumber":11,"author":{"gitId":"shurvirarora"},"content":" * efficient access to the data."},{"lineNumber":12,"author":{"gitId":"shurvirarora"},"content":" */"},{"lineNumber":13,"author":{"gitId":"shurvirarora"},"content":"TEST_CASE(\"UsesSStore Functionality\") {"},{"lineNumber":14,"author":{"gitId":"shurvirarora"},"content":"    // Initialize UsesSStore instance for testing."},{"lineNumber":15,"author":{"gitId":"shurvirarora"},"content":"    UsesSStore usesSStore;"},{"lineNumber":16,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":17,"author":{"gitId":"shurvirarora"},"content":"    // Test adding \"Uses\" relationships and verifying their existence."},{"lineNumber":18,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Add and Check Uses Relationships for Statements\") {"},{"lineNumber":19,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships between statements and variables."},{"lineNumber":20,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(1, \"x\");"},{"lineNumber":21,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(2, \"y\");"},{"lineNumber":22,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(3, \"z\");"},{"lineNumber":23,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":24,"author":{"gitId":"shurvirarora"},"content":"        // Verify that the added relationships are correctly identified."},{"lineNumber":25,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSStore.hasRelationship(1, \"x\")); // Statement 1 uses variable \"x\"."},{"lineNumber":26,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSStore.hasRelationship(2, \"y\")); // Statement 2 uses variable \"y\"."},{"lineNumber":27,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSStore.hasRelationship(3, \"z\")); // Statement 3 uses variable \"z\"."},{"lineNumber":28,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":29,"author":{"gitId":"shurvirarora"},"content":"        // Ensure that a non-existent relationship returns false."},{"lineNumber":30,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesSStore.hasRelationship(1, \"y\")); // Statement 1 does not use variable \"y\"."},{"lineNumber":31,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":33,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving statements that use a specific variable."},{"lineNumber":34,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Statements Using a Specific Variable\") {"},{"lineNumber":35,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships between statements and variables."},{"lineNumber":36,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(1, \"x\");"},{"lineNumber":37,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(4, \"x\");"},{"lineNumber":38,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":39,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all statements that use the variable \"x\"."},{"lineNumber":40,"author":{"gitId":"shurvirarora"},"content":"        auto statementsUsingX \u003d usesSStore.getRelationshipsByValue(\"x\");"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        auto expectedStatements \u003d std::unordered_set\u003cint\u003e{1, 4};"},{"lineNumber":42,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":43,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(statementsUsingX \u003d\u003d expectedStatements); // Statements 1 and 4 use \"x\"."},{"lineNumber":44,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":46,"author":{"gitId":"shurvirarora"},"content":"        // Test retrieving variables used by a specific statement."},{"lineNumber":47,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Retrieve Variables Used by a Statement\") {"},{"lineNumber":48,"author":{"gitId":"shurvirarora"},"content":"        // Add \"Uses\" relationships for a single statement."},{"lineNumber":49,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(1, \"x\");"},{"lineNumber":50,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(1, \"y\");"},{"lineNumber":51,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":52,"author":{"gitId":"shurvirarora"},"content":"        // Verify retrieval of all variables used by Statement 1."},{"lineNumber":53,"author":{"gitId":"shurvirarora"},"content":"        auto variablesUsedByStmt1 \u003d usesSStore.getRelationshipsByKey(1);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        auto expectedVariables \u003d std::unordered_set\u003cstd::string\u003e{\"x\", \"y\"};"},{"lineNumber":55,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":56,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(variablesUsedByStmt1 \u003d\u003d expectedVariables); // Statement 1 uses variables \"x\" and \"y\"."},{"lineNumber":57,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":59,"author":{"gitId":"shurvirarora"},"content":"        // Test the ability to clear all \"Uses\" relationships from the store."},{"lineNumber":60,"author":{"gitId":"shurvirarora"},"content":"    SECTION(\"Clear All Uses Relationships\") {"},{"lineNumber":61,"author":{"gitId":"shurvirarora"},"content":"        // Initially, the store should be empty."},{"lineNumber":62,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSStore.isEmpty());"},{"lineNumber":63,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":64,"author":{"gitId":"shurvirarora"},"content":"        // Adding a relationship should change the store\u0027s state to non-empty."},{"lineNumber":65,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.addRelationship(1, \"x\");"},{"lineNumber":66,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE_FALSE(usesSStore.isEmpty());"},{"lineNumber":67,"author":{"gitId":"shurvirarora"},"content":""},{"lineNumber":68,"author":{"gitId":"shurvirarora"},"content":"        // Clearing the store should reset its state to empty."},{"lineNumber":69,"author":{"gitId":"shurvirarora"},"content":"        usesSStore.clear();"},{"lineNumber":70,"author":{"gitId":"shurvirarora"},"content":"        REQUIRE(usesSStore.isEmpty());"},{"lineNumber":71,"author":{"gitId":"shurvirarora"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"shurvirarora"},"content":"}"}],"authorContributionMap":{"shurvirarora":70,"jianoway":2}},{"path":"Team19/Code19/src/unit_testing/src/pkb/templates/TemplateMapSetTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"#include \"pkb/templates/TemplateMapSet.h\""},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"TEST_CASE(\"pkb/templates/TemplateMapSet\") {"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    SECTION(\"addKeyValue\") {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"                {1, {2, 3}},"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"                {2, {3}}"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getMapSet() \u003d\u003d expected);"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getMapSet\") {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{};"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getMapSet() \u003d\u003d expected);"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"                {1, {2, 3}},"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"                {2, {3}}"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getMapSet() \u003d\u003d expected);"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    SECTION(\"hasKeyValue\") {"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.hasKeyValue(1, 2));"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.hasKeyValue(1, 3));"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.hasKeyValue(2, 3));"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(templateMapSet.hasKeyValue(1, 4));"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(templateMapSet.hasKeyValue(2, 1));"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getKeys\") {"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{1, 2};"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getKeys() \u003d\u003d expected);"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValues\") {"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3};"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getValues() \u003d\u003d expected);"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    SECTION(\"getValuesByKey\") {"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_set\u003cint\u003e{2, 3};"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getValuesByKey(1) \u003d\u003d expected);"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        expected \u003d std::unordered_set\u003cint\u003e{3};"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getValuesByKey(2) \u003d\u003d expected);"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    SECTION(\"hasKey\") {"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.hasKey(1));"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.hasKey(2));"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"        REQUIRE_FALSE(templateMapSet.hasKey(3));"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"    SECTION(\"remove\") {"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        templateMapSet.remove(1);"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"                {2, {3}}"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        };"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getMapSet() \u003d\u003d expected);"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    SECTION(\"clear\") {"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        TemplateMapSet\u003cint, int\u003e templateMapSet;"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 2);"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(1, 3);"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"        templateMapSet.addKeyValue(2, 3);"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        templateMapSet.clear();"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        auto expected \u003d std::unordered_map\u003cint, std::unordered_set\u003cint\u003e\u003e{};"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"        REQUIRE(templateMapSet.getMapSet() \u003d\u003d expected);"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"}"}],"authorContributionMap":{"jianoway":102}},{"path":"Team19/Code19/src/unit_testing/src/qps/TestParsingResult.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/QueryParser.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \"catch.hpp\""},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":"// Test for Parsing Result assuming that the query is valid"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result of select all query\") {"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"s\") \u003d\u003d \"stmt\");"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"s\");"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result for suchthat-cl Modifies with quoted variable\") {"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"s\") \u003d\u003d \"stmt\");"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"s\");"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseRelationship().getType() \u003d\u003d TokenType::Modifies);"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseRelationship().getValue()  \u003d\u003d \"Modifies\");"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseFirstParam().getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseFirstParam().getValue() \u003d\u003d \"s\");"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseSecondParam().getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseSecondParam().getValue() \u003d\u003d \"\\\"existentVar\\\"\");"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"    "},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result of pattern query Quouted Constant\") {"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutConst, \"\\\"1\\\"\"),"},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"a\") \u003d\u003d \"assign\");"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"a\");"},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getValue() \u003d\u003d \"a\");"},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getValue() \u003d\u003d \"\\\"x\\\"\");"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getType() \u003d\u003d TokenType::ExpressionSpec);"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getValue() \u003d\u003d \"\\\"1\\\"\");"},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result of valid tokens that Follows with variable and wildcard\") {"},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":93,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Follows, \"Follows\"),"},{"lineNumber":94,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":96,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":100,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":101,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":102,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":103,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"s\") \u003d\u003d \"stmt\");"},{"lineNumber":104,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"s\");"},{"lineNumber":105,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseRelationship().getType() \u003d\u003d TokenType::Follows);"},{"lineNumber":106,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseRelationship().getValue() \u003d\u003d \"Follows\");"},{"lineNumber":107,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseFirstParam().getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":108,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseFirstParam().getValue() \u003d\u003d \"s\");"},{"lineNumber":109,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseSecondParam().getType() \u003d\u003d TokenType::Wildcard);"},{"lineNumber":110,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getSuchThatClauseSecondParam().getValue() \u003d\u003d \"_\");"},{"lineNumber":111,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":112,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":113,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":114,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":115,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result of Pattern with variable and an expressionSpec\") {"},{"lineNumber":116,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":117,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":118,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":119,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":120,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":121,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":122,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":123,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":124,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Operator, \"*\"),"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":132,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":133,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":134,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":135,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":136,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":137,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"a\") \u003d\u003d \"assign\");"},{"lineNumber":138,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"a\");"},{"lineNumber":139,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getValue() \u003d\u003d \"a\");"},{"lineNumber":141,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":142,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getValue() \u003d\u003d \"\\\"x\\\"\");"},{"lineNumber":143,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getType() \u003d\u003d TokenType::ExpressionSpec);"},{"lineNumber":144,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getValue() \u003d\u003d \"\\\"1*3\\\"\");"},{"lineNumber":145,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":146,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":147,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":148,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Parsing Result of Pattern with variable and an expressionSpec that contains an expression of _\\\"expr\\\"_ format\") {"},{"lineNumber":149,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":150,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":151,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":152,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":153,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":154,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":155,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":156,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":157,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":158,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":159,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":160,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":161,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":162,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":163,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Operator, \"*\"),"},{"lineNumber":164,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":165,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":166,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":167,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":168,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":169,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":170,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":171,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":172,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getDeclaredSynonym(\"a\") \u003d\u003d \"assign\");"},{"lineNumber":173,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getRequiredSynonym() \u003d\u003d \"a\");"},{"lineNumber":174,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":175,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseRelationship().getValue() \u003d\u003d \"a\");"},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseFirstParam().getValue() \u003d\u003d \"\\\"x\\\"\");"},{"lineNumber":178,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getType() \u003d\u003d TokenType::ExpressionSpec);"},{"lineNumber":179,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(parsingResult.getPatternClauseSecondParam().getValue() \u003d\u003d \"_\\\"1*3\\\"_\");"},{"lineNumber":180,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":181,"author":{"gitId":"MSI\\vegit"},"content":"}"}],"authorContributionMap":{"winson8222":2,"MSI\\vegit":179}},{"path":"Team19/Code19/src/unit_testing/src/qps/TestQueryEvaluator.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/QueryParser.h\""},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/pkb/PKBManager.h\""},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/evaluator/QueryEvaluator.h\""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":"#include \"catch.hpp\""},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"// Test for Parsing Result assuming that the query is valid"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select all query\") {"},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":29,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"3\", \"2\", \"1\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"1\", \"2\", \"3\"}));"},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":39,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select follows* query\") {"},{"lineNumber":40,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":41,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":42,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":44,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cFollowsTWriter\u003e followTWriter \u003d pkbWriterManager-\u003egetFollowsTWriter();"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":47,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":48,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":49,"author":{"gitId":"winson8222"},"content":"    followTWriter-\u003eaddFollowsT(1, 2);"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"    followTWriter-\u003eaddFollowsT(1, 3);"},{"lineNumber":51,"author":{"gitId":"winson8222"},"content":"    followTWriter-\u003eaddFollowsT(2, 3);"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":56,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":62,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::FollowsT, \"Follows*\"),"},{"lineNumber":64,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":65,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":66,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":69,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":70,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":71,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":72,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":73,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":75,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":76,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"2\", \"1\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"1\", \"2\"}));"},{"lineNumber":77,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":78,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":79,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":80,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select follows query\") {"},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":83,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":84,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":85,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":86,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cFollowsWriter\u003e followWriter \u003d pkbWriterManager-\u003egetFollowsWriter();"},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":89,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"    followWriter-\u003eaddFollows(1, 2);"},{"lineNumber":91,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":92,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":93,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":94,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":95,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":96,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":97,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":98,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":99,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":100,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":101,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":102,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Follows, \"Follows\"),"},{"lineNumber":103,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":104,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":105,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"2\"),"},{"lineNumber":107,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":108,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":111,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":112,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":113,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":114,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":115,"author":{"gitId":"winson8222"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"1\" });"},{"lineNumber":116,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":117,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":118,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":119,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":120,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select follows query (opposite)\") {"},{"lineNumber":121,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":122,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":123,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":124,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":125,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":126,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cFollowsWriter\u003e followWriter \u003d pkbWriterManager-\u003egetFollowsWriter();"},{"lineNumber":127,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":128,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":129,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":130,"author":{"gitId":"winson8222"},"content":"    followWriter-\u003eaddFollows(2, 3);"},{"lineNumber":131,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":132,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":133,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":134,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":135,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":136,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":137,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":138,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":139,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":140,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":141,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":142,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Follows, \"Follows\"),"},{"lineNumber":143,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":144,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"2\"),"},{"lineNumber":145,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":146,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":147,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":148,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":149,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":150,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":151,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":152,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":153,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":154,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":155,"author":{"gitId":"winson8222"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"3\" });"},{"lineNumber":156,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":157,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":158,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":159,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a simple select followsT query\") {"},{"lineNumber":160,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":161,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":162,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":163,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":164,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":165,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cFollowsTWriter\u003e followWriter \u003d pkbWriterManager-\u003egetFollowsTWriter();"},{"lineNumber":166,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":167,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":168,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":169,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(1, 2);"},{"lineNumber":170,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(2, 3);"},{"lineNumber":171,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(1, 3);"},{"lineNumber":172,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":173,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":174,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":175,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":178,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":179,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":180,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":181,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":182,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Follows, \"Follows*\"),"},{"lineNumber":183,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":184,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":185,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":186,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":187,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":188,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":189,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":190,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":191,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":192,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":193,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":194,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":195,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"1\", \"2\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"2\", \"1\"}));"},{"lineNumber":196,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":197,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":198,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":199,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":200,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a simple select followsT query (opposite)\") {"},{"lineNumber":201,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":202,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":203,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":204,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":205,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":206,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cFollowsTWriter\u003e followWriter \u003d pkbWriterManager-\u003egetFollowsTWriter();"},{"lineNumber":207,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":208,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":209,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":210,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(1, 2);"},{"lineNumber":211,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(2, 3);"},{"lineNumber":212,"author":{"gitId":"MSI\\vegit"},"content":"    followWriter-\u003eaddFollowsT(1, 3);"},{"lineNumber":213,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":214,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":215,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":216,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":217,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":218,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":219,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":220,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":221,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":222,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":223,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":224,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Follows, \"Follows*\"),"},{"lineNumber":225,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":226,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":227,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":228,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":229,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":230,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":231,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":232,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":233,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":234,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":235,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":236,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":237,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"3\", \"2\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"2\", \"3\"}));"},{"lineNumber":238,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":239,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":240,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":241,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select Parent query\") {"},{"lineNumber":242,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":243,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":244,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":245,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":246,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":247,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cParentWriter\u003e parentWriter \u003d pkbWriterManager-\u003egetParentWriter();"},{"lineNumber":248,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":249,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":250,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":251,"author":{"gitId":"winson8222"},"content":"    parentWriter-\u003eaddParent(1, 2);"},{"lineNumber":252,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":253,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":254,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":255,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":256,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":257,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":258,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":259,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":260,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":261,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":262,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":263,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Parent, \"Parent\"),"},{"lineNumber":264,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":265,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":266,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":267,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"2\"),"},{"lineNumber":268,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":269,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":270,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":271,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":272,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":273,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":274,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":275,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":276,"author":{"gitId":"winson8222"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"1\" });"},{"lineNumber":277,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":278,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":279,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":280,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Evaluation result of a simple select Parent query (opposite)\") {"},{"lineNumber":281,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":282,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":283,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":284,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":285,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":286,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cParentWriter\u003e parentWriter \u003d pkbWriterManager-\u003egetParentWriter();"},{"lineNumber":287,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":288,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":289,"author":{"gitId":"winson8222"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":290,"author":{"gitId":"winson8222"},"content":"    parentWriter-\u003eaddParent(2, 3);"},{"lineNumber":291,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":292,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":293,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":294,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":295,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":296,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":297,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":298,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":299,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":300,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":301,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":302,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Parent, \"Parent\"),"},{"lineNumber":303,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":304,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"2\"),"},{"lineNumber":305,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":306,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":307,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":308,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":309,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":310,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":311,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":312,"author":{"gitId":"winson8222"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":313,"author":{"gitId":"winson8222"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":314,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":315,"author":{"gitId":"winson8222"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"3\" });"},{"lineNumber":316,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":317,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":318,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":319,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a simple select pattern query\") {"},{"lineNumber":320,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":321,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":322,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":323,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":324,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":325,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignPatternWriter();"},{"lineNumber":326,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":327,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":328,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":329,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(1, \"x\", \"1\");"},{"lineNumber":330,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(2, \"x\", \"2\");"},{"lineNumber":331,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(3, \"x\", \"3\");"},{"lineNumber":332,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":333,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":334,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":335,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":336,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":337,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":338,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":339,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":340,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":341,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":342,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":343,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":344,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutConst, \"\\\"1\\\"\"),"},{"lineNumber":345,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":346,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":347,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":348,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":349,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":350,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":351,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":352,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"1\" });"},{"lineNumber":353,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":354,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":355,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":356,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a select pattern query with variable\") {"},{"lineNumber":357,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":358,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":359,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":360,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":361,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":362,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignPatternWriter();"},{"lineNumber":363,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":364,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":365,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":366,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(1, \"y\", \"1\");"},{"lineNumber":367,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(2, \"x\", \"y\");"},{"lineNumber":368,"author":{"gitId":"MSI\\vegit"},"content":"    assignWriter-\u003eaddAssignPattern(3, \"x\", \"3\");"},{"lineNumber":369,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":370,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":371,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":372,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":373,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":374,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":375,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":376,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":377,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":378,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":379,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":380,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":381,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"y\\\"\"),"},{"lineNumber":382,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":383,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":384,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":385,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":386,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":387,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":388,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":389,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"2\" });"},{"lineNumber":390,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":391,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":392,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":393,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a select pattern query with wildcard on RHS\") {"},{"lineNumber":394,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":395,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":396,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":397,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":398,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":399,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignPatternWriter \u003d pkbWriterManager-\u003egetAssignPatternWriter();"},{"lineNumber":400,"author":{"gitId":"winson8222"},"content":"    std:shared_ptr\u003cAssignPatternReader\u003e assignPatternReader \u003d pkbReaderManager-\u003egetAssignPatternReader();"},{"lineNumber":401,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignWriter();"},{"lineNumber":402,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":403,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":404,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":405,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":406,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(1, \"y\", \"1\");"},{"lineNumber":407,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(2, \"x\", \"y\");"},{"lineNumber":408,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(3, \"x\", \"3\");"},{"lineNumber":409,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(1);"},{"lineNumber":410,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(2);"},{"lineNumber":411,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(3);"},{"lineNumber":412,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":413,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":414,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":415,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":416,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":417,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":418,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":419,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":420,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":421,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":422,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":423,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":424,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":425,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":426,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":427,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":428,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":429,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":430,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":431,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":432,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":433,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"3\", \"2\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"2\", \"3\"}));"},{"lineNumber":434,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":435,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":436,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":437,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a select pattern query with wildcard on RHS and LHS\") {"},{"lineNumber":438,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":439,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":440,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":441,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":442,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":443,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignPatternWriter \u003d pkbWriterManager-\u003egetAssignPatternWriter();"},{"lineNumber":444,"author":{"gitId":"winson8222"},"content":"    std:shared_ptr\u003cAssignPatternReader\u003e assignPatternReader \u003d pkbReaderManager-\u003egetAssignPatternReader();"},{"lineNumber":445,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignWriter();"},{"lineNumber":446,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":447,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":448,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":449,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":450,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(1, \"y\", \"1\");"},{"lineNumber":451,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(2, \"x\", \"y\");"},{"lineNumber":452,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(3, \"x\", \"3\");"},{"lineNumber":453,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(1);"},{"lineNumber":454,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(2);"},{"lineNumber":455,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(3);"},{"lineNumber":456,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":457,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":458,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":459,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":460,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":461,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":462,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":463,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":464,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":465,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":466,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":467,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":468,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":469,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":470,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":471,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":472,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":473,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":474,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":475,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":476,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":477,"author":{"gitId":"winson8222"},"content":"    REQUIRE((res \u003d\u003d std::vector\u003cstring\u003e{ \"3\", \"2\", \"1\" } || res \u003d\u003d std::vector\u003cstring\u003e{\"1\", \"2\", \"3\"}));"},{"lineNumber":478,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":479,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":480,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":481,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check Evaluation result of a select pattern query with wildcard on LHS\") {"},{"lineNumber":482,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":483,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":484,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager-\u003egetPKBWriterManager();"},{"lineNumber":485,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":486,"author":{"gitId":"MSI\\vegit"},"content":"    std::shared_ptr\u003cStatementWriter\u003e statementWriter \u003d pkbWriterManager-\u003egetStatementWriter();"},{"lineNumber":487,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignPatternWriter\u003e assignPatternWriter \u003d pkbWriterManager-\u003egetAssignPatternWriter();"},{"lineNumber":488,"author":{"gitId":"winson8222"},"content":"    std:shared_ptr\u003cAssignPatternReader\u003e assignPatternReader \u003d pkbReaderManager-\u003egetAssignPatternReader();"},{"lineNumber":489,"author":{"gitId":"winson8222"},"content":"    std::shared_ptr\u003cAssignWriter\u003e assignWriter \u003d pkbWriterManager-\u003egetAssignWriter();"},{"lineNumber":490,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":491,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(1);"},{"lineNumber":492,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(2);"},{"lineNumber":493,"author":{"gitId":"MSI\\vegit"},"content":"    statementWriter-\u003einsertStatement(3);"},{"lineNumber":494,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(1, \"y\", \"1\");"},{"lineNumber":495,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(2, \"x\", \"y\");"},{"lineNumber":496,"author":{"gitId":"winson8222"},"content":"    assignPatternWriter-\u003eaddAssignPattern(3, \"x\", \"3\");"},{"lineNumber":497,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(1);"},{"lineNumber":498,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(2);"},{"lineNumber":499,"author":{"gitId":"winson8222"},"content":"    assignWriter-\u003einsertAssign(3);"},{"lineNumber":500,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":501,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":502,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":503,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":504,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":505,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":506,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":507,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":508,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":509,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":510,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":511,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":512,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"y\\\"\"),"},{"lineNumber":513,"author":{"gitId":"MSI\\vegit"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":514,"author":{"gitId":"MSI\\vegit"},"content":"    };"},{"lineNumber":515,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":516,"author":{"gitId":"MSI\\vegit"},"content":"    QueryParser parser(tokens);"},{"lineNumber":517,"author":{"gitId":"MSI\\vegit"},"content":"    auto parsingResult \u003d parser.parse();"},{"lineNumber":518,"author":{"gitId":"MSI\\vegit"},"content":"    QueryEvaluator evaluator(pkbReaderManager, parsingResult);"},{"lineNumber":519,"author":{"gitId":"MSI\\vegit"},"content":"    std::vector\u003cstring\u003e res \u003d evaluator.evaluateQuery();"},{"lineNumber":520,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(res \u003d\u003d std::vector\u003cstring\u003e{ \"2\" });"},{"lineNumber":521,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":522,"author":{"gitId":"MSI\\vegit"},"content":"}"}],"authorContributionMap":{"winson8222":274,"MSI\\vegit":248}},{"path":"Team19/Code19/src/unit_testing/src/qps/TestQueryParser.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/QueryParser.h\""},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":"#include \"catch.hpp\""},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammar of Valid tokens with no declaration\") {"},{"lineNumber":7,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":8,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":9,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":10,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"v\"),"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"incorrect grammar at: Select\");"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammar of select all query\") {"},{"lineNumber":29,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":30,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":31,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":32,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":33,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":34,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":35,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":36,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":37,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":38,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":42,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":43,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":44,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":45,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammar of incomplete query with incomplete modifies clause\") {"},{"lineNumber":46,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":47,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":48,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":49,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":50,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":51,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":52,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":53,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":54,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":55,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":56,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":57,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":58,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":59,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"Incomplete Query\");"},{"lineNumber":60,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":61,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":62,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":63,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":64,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammar of Valid tokens with no relref keyword\") {"},{"lineNumber":65,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":66,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":67,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":68,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":69,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":70,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":71,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":72,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":73,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":74,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":75,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":76,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"v\"),"},{"lineNumber":77,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":78,"author":{"gitId":"winson8222"},"content":"            // Add more tokens as needed to simulate your query"},{"lineNumber":79,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":80,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":81,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":82,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":83,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":84,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":85,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"incorrect grammar at: (\");"},{"lineNumber":86,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":87,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":88,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammar of Valid tokens with pattern query\") {"},{"lineNumber":89,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":90,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":91,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":92,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":93,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":94,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":95,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":96,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":97,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":98,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":99,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":100,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":101,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutConst, \"\\\"1\\\"\"),"},{"lineNumber":102,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":103,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":104,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":105,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":106,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":107,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":108,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":111,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":112,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens that Follows with variable and wildcard\") {"},{"lineNumber":113,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":114,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":115,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":116,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":117,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":118,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":119,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":120,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":121,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Follows, \"Follows\"),"},{"lineNumber":122,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":123,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":124,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":125,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":126,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":127,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":128,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":129,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":132,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":133,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":134,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":135,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":136,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens that Follows with a stmtRef and an entRef\") {"},{"lineNumber":137,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":138,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":139,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":140,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":141,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":142,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":143,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":144,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":145,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Follows, \"Follows\"),"},{"lineNumber":146,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":147,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":148,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":149,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":150,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":151,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":152,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":153,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"incorrect grammar at: \\\"existentVar\\\"\");"},{"lineNumber":154,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":155,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":156,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":157,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens that Modifies with quoted variable\") {"},{"lineNumber":158,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":159,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":160,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":161,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":162,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":163,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":164,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":165,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":166,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":167,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":168,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":169,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":170,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":171,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":172,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":173,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":174,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":175,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":178,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":179,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":180,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":181,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens that Modifies with quoted variable amd 2 stmt synonyms\") {"},{"lineNumber":182,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":183,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":184,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":185,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":186,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s1\"),"},{"lineNumber":187,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":188,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":189,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":190,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":191,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":192,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":193,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":194,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":195,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":196,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":197,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":198,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":199,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":200,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":201,"author":{"gitId":"winson8222"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":202,"author":{"gitId":"winson8222"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":203,"author":{"gitId":"winson8222"},"content":"    REQUIRE(x);"},{"lineNumber":204,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":205,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":206,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":207,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":208,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check for semantic error for undeclared stmt synonyms\") {"},{"lineNumber":209,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":210,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":211,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":212,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":213,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s1\"),"},{"lineNumber":214,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":215,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":216,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s3\"),"},{"lineNumber":217,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":218,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":219,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":220,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":221,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":222,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":223,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":224,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":225,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":226,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":227,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"semantic error at: s3\");"},{"lineNumber":228,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":229,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":230,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":231,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens that Modifies with two stmtRefs in paranthesis\") {"},{"lineNumber":232,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":233,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":234,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":235,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":236,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":237,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":238,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":239,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":240,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":241,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":242,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":243,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":244,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":245,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":246,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":247,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":248,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"incorrect grammar at: 1\");"},{"lineNumber":249,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":250,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":251,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":252,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":253,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of Pattern with variable and constant\") {"},{"lineNumber":254,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":255,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":256,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":257,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":258,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":259,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":260,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":261,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":262,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":263,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":264,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":265,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutConst, \"\\\"1\\\"\"),"},{"lineNumber":266,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":267,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":268,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":269,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":270,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":271,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":272,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":273,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":274,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":275,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":276,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of Pattern with variable and an expressionSpec\") {"},{"lineNumber":277,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":278,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":279,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":280,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":281,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":282,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":283,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":284,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":285,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":286,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":287,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":288,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":289,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":290,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Operator, \"*\"),"},{"lineNumber":291,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":292,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":293,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":294,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":295,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":296,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":297,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":298,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":299,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":300,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":301,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":302,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of Pattern with variable and an expressionSpec that contains an expression of _\\\"expr\\\"_ format\") {"},{"lineNumber":303,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":304,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"assign\"),"},{"lineNumber":305,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":306,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":307,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":308,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":309,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":310,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":311,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":312,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":313,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":314,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":315,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":316,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":317,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Operator, \"*\"),"},{"lineNumber":318,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"3\"),"},{"lineNumber":319,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DoubleQuote, \"\\\"\"),"},{"lineNumber":320,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Wildcard, \"_\"),"},{"lineNumber":321,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":322,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":323,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":324,"author":{"gitId":"winson8222"},"content":"    QueryParser parser(tokens);"},{"lineNumber":325,"author":{"gitId":"MSI\\vegit"},"content":"    auto result \u003d parser.parse();"},{"lineNumber":326,"author":{"gitId":"MSI\\vegit"},"content":"    bool x \u003d true; //will not reach this line unless parse is successful"},{"lineNumber":327,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(x);"},{"lineNumber":328,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":329,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":330,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":331,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":332,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Grammars of valid tokens have Modifies and pattern clauses\") {"},{"lineNumber":333,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":334,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":335,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":336,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":337,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":338,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":339,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":340,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":341,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":342,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":343,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":344,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":345,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::INTEGER, \"1\"),"},{"lineNumber":346,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\"),"},{"lineNumber":347,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":348,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::PatternKeyword, \"pattern\"),"},{"lineNumber":349,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"a\"),"},{"lineNumber":350,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":351,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"x\\\"\"),"},{"lineNumber":352,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":353,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutConst, \"\\\"1\\\"\"),"},{"lineNumber":354,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":355,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":356,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":357,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"incorrect grammar at: 1\");"},{"lineNumber":358,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":359,"author":{"gitId":"winson8222"},"content":"}"},{"lineNumber":360,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":361,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":362,"author":{"gitId":"winson8222"},"content":"TEST_CASE(\"Check Semantic error repeated token declarations\") {"},{"lineNumber":363,"author":{"gitId":"winson8222"},"content":"    std::vector\u003cToken\u003e tokens \u003d {"},{"lineNumber":364,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::DesignEntity, \"stmt\"),"},{"lineNumber":365,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":366,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":367,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":368,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Semicolon, \";\"),"},{"lineNumber":369,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SelectKeyword, \"Select\"),"},{"lineNumber":370,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":371,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::SuchKeyword, \"such\"),"},{"lineNumber":372,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::ThatKeyword, \"that\"),"},{"lineNumber":373,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Modifies, \"Modifies\"),"},{"lineNumber":374,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Lparenthesis, \"(\"),"},{"lineNumber":375,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::IDENT, \"s\"),"},{"lineNumber":376,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Comma, \",\"),"},{"lineNumber":377,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::QuoutIDENT, \"\\\"existentVar\\\"\"),"},{"lineNumber":378,"author":{"gitId":"winson8222"},"content":"            Token(TokenType::Rparenthesis, \")\")"},{"lineNumber":379,"author":{"gitId":"winson8222"},"content":"    };"},{"lineNumber":380,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":381,"author":{"gitId":"winson8222"},"content":"    REQUIRE(QueryParser(tokens).parse().getErrorMessage() \u003d\u003d \"semantic error at: s\");"},{"lineNumber":382,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":383,"author":{"gitId":"winson8222"},"content":"}"}],"authorContributionMap":{"winson8222":362,"MSI\\vegit":21}},{"path":"Team19/Code19/src/unit_testing/src/qps/TestTokenizer.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"winson8222"},"content":"#include \"../../spa/src/qps/parser/Tokenizer.h\""},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"#include \"catch.hpp\""},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"using namespace std;"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Modifies with valid statement and variable\") {"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"stmt s; variable v; Select s such that Modifies(s, v)\");"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 16);  // Expecting 16 tokens"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[0].getType() \u003d\u003d TokenType::DesignEntity \u0026\u0026 tokens[0].getValue() \u003d\u003d \"stmt\"));"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[1].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[1].getValue() \u003d\u003d \"s\"));"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[2].getType() \u003d\u003d TokenType::Semicolon \u0026\u0026 tokens[2].getValue() \u003d\u003d \";\"));"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[3].getType() \u003d\u003d TokenType::DesignEntity \u0026\u0026 tokens[3].getValue() \u003d\u003d \"variable\"));"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[4].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[4].getValue() \u003d\u003d \"v\"));"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[5].getType() \u003d\u003d TokenType::Semicolon \u0026\u0026 tokens[5].getValue() \u003d\u003d \";\"));"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[6].getType() \u003d\u003d TokenType::SelectKeyword \u0026\u0026 tokens[6].getValue() \u003d\u003d \"Select\"));"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[7].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[7].getValue() \u003d\u003d \"s\"));"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[8].getType() \u003d\u003d TokenType::SuchKeyword \u0026\u0026 tokens[8].getValue() \u003d\u003d \"such\"));"},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[9].getType() \u003d\u003d TokenType::ThatKeyword \u0026\u0026 tokens[9].getValue() \u003d\u003d \"that\"));"},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[10].getType() \u003d\u003d TokenType::Modifies \u0026\u0026 tokens[10].getValue() \u003d\u003d \"Modifies\"));"},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[11].getType() \u003d\u003d TokenType::Lparenthesis \u0026\u0026 tokens[11].getValue() \u003d\u003d \"(\"));"},{"lineNumber":25,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[12].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[12].getValue() \u003d\u003d \"s\"));"},{"lineNumber":26,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[13].getType() \u003d\u003d TokenType::Comma \u0026\u0026 tokens[13].getValue() \u003d\u003d \",\"));"},{"lineNumber":27,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[14].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[14].getValue() \u003d\u003d \"v\"));"},{"lineNumber":28,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[15].getType() \u003d\u003d TokenType::Rparenthesis \u0026\u0026 tokens[15].getValue() \u003d\u003d \")\"));"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"s\");"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"variable\");"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"v\");"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getValue() \u003d\u003d \";\");"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getValue() \u003d\u003d \"Select\");"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getValue() \u003d\u003d \"s\");"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getType() \u003d\u003d TokenType::SuchKeyword);"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getValue() \u003d\u003d \"such\");"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getType() \u003d\u003d TokenType::ThatKeyword);"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getValue() \u003d\u003d \"that\");"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getType() \u003d\u003d TokenType::Modifies);"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getValue() \u003d\u003d \"Modifies\");"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getType() \u003d\u003d TokenType::Lparenthesis);"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getValue() \u003d\u003d \"(\");"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getValue() \u003d\u003d \"s\");"},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[13].getType() \u003d\u003d TokenType::Comma);"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[13].getValue() \u003d\u003d \",\");"},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[14].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[14].getValue() \u003d\u003d \"v\");"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[15].getType() \u003d\u003d TokenType::Rparenthesis);"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[15].getValue() \u003d\u003d \")\");"},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Modifies with invalid statement number\") {"},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE_THROWS_WITH(Tokenizer(\"stmt s; Select s such that Modifies(-1, \\\"x\\\")\").tokenize(),"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"        \"Unrecognized token: -1\");"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Uses with invalid IDENT\") {"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE_THROWS_WITH(Tokenizer(\"stmt 1a; Select s such that Uses(-1, \\\"x\\\")\").tokenize(),"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"        \"Unrecognized token: 1a\");"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Follows with invalid quotes\") {"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE_THROWS_WITH(Tokenizer(\"stmt a1; Select s such that Uses(1, \\\"x)\").tokenize(),"},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":"        \"Unrecognized token: \\\"\");"},{"lineNumber":93,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":94,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":96,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Modifies with quoted variable\") {"},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"stmt s; Select s such that Modifies(s, \\\"existentVar\\\")\");"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":100,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 13);  // Expecting 13 tokens"},{"lineNumber":101,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":102,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[0].getType() \u003d\u003d TokenType::DesignEntity \u0026\u0026 tokens[0].getValue() \u003d\u003d \"stmt\"));"},{"lineNumber":103,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[1].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[1].getValue() \u003d\u003d \"s\"));"},{"lineNumber":104,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[2].getType() \u003d\u003d TokenType::Semicolon \u0026\u0026 tokens[2].getValue() \u003d\u003d \";\"));"},{"lineNumber":105,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[3].getType() \u003d\u003d TokenType::SelectKeyword \u0026\u0026 tokens[3].getValue() \u003d\u003d \"Select\"));"},{"lineNumber":106,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[4].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[4].getValue() \u003d\u003d \"s\"));"},{"lineNumber":107,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[5].getType() \u003d\u003d TokenType::SuchKeyword \u0026\u0026 tokens[5].getValue() \u003d\u003d \"such\"));"},{"lineNumber":108,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[6].getType() \u003d\u003d TokenType::ThatKeyword \u0026\u0026 tokens[6].getValue() \u003d\u003d \"that\"));"},{"lineNumber":109,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[7].getType() \u003d\u003d TokenType::Modifies \u0026\u0026 tokens[7].getValue() \u003d\u003d \"Modifies\"));"},{"lineNumber":110,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[8].getType() \u003d\u003d TokenType::Lparenthesis \u0026\u0026 tokens[8].getValue() \u003d\u003d \"(\"));"},{"lineNumber":111,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[9].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[9].getValue() \u003d\u003d \"s\"));"},{"lineNumber":112,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[10].getType() \u003d\u003d TokenType::Comma \u0026\u0026 tokens[10].getValue() \u003d\u003d \",\"));"},{"lineNumber":113,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[11].getType() \u003d\u003d TokenType::QuoutIDENT \u0026\u0026 tokens[11].getValue() \u003d\u003d \"\\\"existentVar\\\"\"));"},{"lineNumber":114,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[12].getType() \u003d\u003d TokenType::Rparenthesis \u0026\u0026 tokens[12].getValue() \u003d\u003d \")\"));"},{"lineNumber":115,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":116,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":117,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":118,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":119,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":120,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"s\");"},{"lineNumber":121,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":122,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":123,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":124,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"s\");"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getType() \u003d\u003d TokenType::SuchKeyword);"},{"lineNumber":132,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getValue() \u003d\u003d \"such\");"},{"lineNumber":133,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":134,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getType() \u003d\u003d TokenType::ThatKeyword);"},{"lineNumber":135,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getValue() \u003d\u003d \"that\");"},{"lineNumber":136,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":137,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getType() \u003d\u003d TokenType::Modifies);"},{"lineNumber":138,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getValue() \u003d\u003d \"Modifies\");"},{"lineNumber":139,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getType() \u003d\u003d TokenType::Lparenthesis);"},{"lineNumber":141,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getValue() \u003d\u003d \"(\");"},{"lineNumber":142,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":143,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":144,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getValue() \u003d\u003d \"s\");"},{"lineNumber":145,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":146,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getType() \u003d\u003d TokenType::Comma);"},{"lineNumber":147,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getValue() \u003d\u003d \",\");"},{"lineNumber":148,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":149,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":150,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getValue() \u003d\u003d \"\\\"existentVar\\\"\");"},{"lineNumber":151,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":152,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getType() \u003d\u003d TokenType::Rparenthesis);"},{"lineNumber":153,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getValue() \u003d\u003d \")\");"},{"lineNumber":154,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":155,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":156,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":157,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Pattern with variable and constant\") {"},{"lineNumber":158,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"assign a; Select a pattern a(\\\"x\\\", \\\"1\\\")\");"},{"lineNumber":159,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":160,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":161,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 12);  // Expecting 12 tokens"},{"lineNumber":162,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":163,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[0].getType() \u003d\u003d TokenType::DesignEntity \u0026\u0026 tokens[0].getValue() \u003d\u003d \"assign\"));"},{"lineNumber":164,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[1].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[1].getValue() \u003d\u003d \"a\"));"},{"lineNumber":165,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[2].getType() \u003d\u003d TokenType::Semicolon \u0026\u0026 tokens[2].getValue() \u003d\u003d \";\"));"},{"lineNumber":166,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[3].getType() \u003d\u003d TokenType::SelectKeyword \u0026\u0026 tokens[3].getValue() \u003d\u003d \"Select\"));"},{"lineNumber":167,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[4].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[4].getValue() \u003d\u003d \"a\"));"},{"lineNumber":168,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[5].getType() \u003d\u003d TokenType::PatternKeyword \u0026\u0026 tokens[5].getValue() \u003d\u003d \"pattern\"));"},{"lineNumber":169,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[6].getType() \u003d\u003d TokenType::IDENT \u0026\u0026 tokens[6].getValue() \u003d\u003d \"a\"));"},{"lineNumber":170,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[7].getType() \u003d\u003d TokenType::Lparenthesis \u0026\u0026 tokens[7].getValue() \u003d\u003d \"(\"));"},{"lineNumber":171,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[8].getType() \u003d\u003d TokenType::QuoutIDENT \u0026\u0026 tokens[8].getValue() \u003d\u003d \"\\\"x\\\"\"));"},{"lineNumber":172,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[9].getType() \u003d\u003d TokenType::Comma \u0026\u0026 tokens[9].getValue() \u003d\u003d \",\"));"},{"lineNumber":173,"author":{"gitId":"winson8222"},"content":"    REQUIRE((tokens[10].getType() \u003d\u003d TokenType::QuoutConst \u0026\u0026 tokens[10].getValue() \u003d\u003d \"\\\"1\\\"\"));"},{"lineNumber":174,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":175,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"assign\");"},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":178,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":179,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"a\");"},{"lineNumber":180,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":181,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":182,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":183,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":184,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":185,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":186,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":187,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":188,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"a\");"},{"lineNumber":189,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":190,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getType() \u003d\u003d TokenType::PatternKeyword);"},{"lineNumber":191,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getValue() \u003d\u003d \"pattern\");"},{"lineNumber":192,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":193,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":194,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getValue() \u003d\u003d \"a\");"},{"lineNumber":195,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":196,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getType() \u003d\u003d TokenType::Lparenthesis);"},{"lineNumber":197,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getValue() \u003d\u003d \"(\");"},{"lineNumber":198,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":199,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getType() \u003d\u003d TokenType::QuoutIDENT);"},{"lineNumber":200,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getValue() \u003d\u003d \"\\\"x\\\"\");"},{"lineNumber":201,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":202,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getType() \u003d\u003d TokenType::Comma);"},{"lineNumber":203,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getValue() \u003d\u003d \",\");"},{"lineNumber":204,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":205,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getType() \u003d\u003d TokenType::QuoutConst);"},{"lineNumber":206,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getValue() \u003d\u003d \"\\\"1\\\"\");"},{"lineNumber":207,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":208,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getType() \u003d\u003d TokenType::Rparenthesis);"},{"lineNumber":209,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getValue() \u003d\u003d \")\");"},{"lineNumber":210,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":211,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":212,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"quoted constant with wildcards\") {"},{"lineNumber":213,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"assign a; Select a pattern a(_, _\\\"1\\\"_)\");"},{"lineNumber":214,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":215,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":216,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 14);  // Expecting 14 tokens"},{"lineNumber":217,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":218,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":219,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"assign\");"},{"lineNumber":220,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":221,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":222,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"a\");"},{"lineNumber":223,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":224,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":225,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":226,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":227,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":228,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":229,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":230,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":231,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"a\");"},{"lineNumber":232,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":233,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getType() \u003d\u003d TokenType::PatternKeyword);"},{"lineNumber":234,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getValue() \u003d\u003d \"pattern\");"},{"lineNumber":235,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":236,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":237,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getValue() \u003d\u003d \"a\");"},{"lineNumber":238,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":239,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getType() \u003d\u003d TokenType::Lparenthesis);"},{"lineNumber":240,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getValue() \u003d\u003d \"(\");"},{"lineNumber":241,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":242,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getType() \u003d\u003d TokenType::Wildcard);"},{"lineNumber":243,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getValue() \u003d\u003d \"_\");"},{"lineNumber":244,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":245,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getType() \u003d\u003d TokenType::Comma);"},{"lineNumber":246,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getValue() \u003d\u003d \",\");"},{"lineNumber":247,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":248,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getType() \u003d\u003d TokenType::Wildcard);"},{"lineNumber":249,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getValue() \u003d\u003d \"_\");"},{"lineNumber":250,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":251,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getType() \u003d\u003d TokenType::QuoutConst);"},{"lineNumber":252,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getValue() \u003d\u003d \"\\\"1\\\"\");"},{"lineNumber":253,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":254,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getType() \u003d\u003d TokenType::Wildcard);"},{"lineNumber":255,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getValue() \u003d\u003d \"_\");"},{"lineNumber":256,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":257,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[13].getType() \u003d\u003d TokenType::Rparenthesis);"},{"lineNumber":258,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[13].getValue() \u003d\u003d \")\");"},{"lineNumber":259,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":260,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":261,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check unconventional naming tokenization\") {"},{"lineNumber":262,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"stmt stmt; Select stmt\");"},{"lineNumber":263,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":264,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":265,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 5);  // Expecting 5 tokens"},{"lineNumber":266,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":267,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":268,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":269,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":270,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":271,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":272,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":273,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":274,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":275,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":276,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":277,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":278,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":279,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":280,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":281,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":282,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":283,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":284,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":285,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check unconventional naming tokenization 2\") {"},{"lineNumber":286,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"stmt Select; Select Select\");"},{"lineNumber":287,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":288,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":289,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 5);  // Expecting 5 tokens"},{"lineNumber":290,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":291,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":292,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":293,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":294,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":295,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"Select\");"},{"lineNumber":296,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":297,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":298,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":299,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":300,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":301,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":302,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":303,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":304,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"Select\");"},{"lineNumber":305,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":306,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":307,"author":{"gitId":"MSI\\vegit"},"content":"}"},{"lineNumber":308,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":309,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":310,"author":{"gitId":"MSI\\vegit"},"content":"TEST_CASE(\"Check unconventional naming tokenization 3\") {"},{"lineNumber":311,"author":{"gitId":"MSI\\vegit"},"content":"    Tokenizer tokenizer(\"stmt Follows; Select Follows such that Follows(1,2)\");"},{"lineNumber":312,"author":{"gitId":"MSI\\vegit"},"content":"    vector\u003cToken\u003e tokens \u003d tokenizer.tokenize();"},{"lineNumber":313,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":314,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens.size() \u003d\u003d 13);  // Expecting 5 tokens"},{"lineNumber":315,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":316,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getType() \u003d\u003d TokenType::DesignEntity);"},{"lineNumber":317,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[0].getValue() \u003d\u003d \"stmt\");"},{"lineNumber":318,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":319,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":320,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[1].getValue() \u003d\u003d \"Follows\");"},{"lineNumber":321,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":322,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getType() \u003d\u003d TokenType::Semicolon);"},{"lineNumber":323,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[2].getValue() \u003d\u003d \";\");"},{"lineNumber":324,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":325,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getType() \u003d\u003d TokenType::SelectKeyword);"},{"lineNumber":326,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[3].getValue() \u003d\u003d \"Select\");"},{"lineNumber":327,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":328,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getType() \u003d\u003d TokenType::IDENT);"},{"lineNumber":329,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[4].getValue() \u003d\u003d \"Follows\");"},{"lineNumber":330,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":331,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getType() \u003d\u003d TokenType::SuchKeyword);"},{"lineNumber":332,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[5].getValue() \u003d\u003d \"such\");"},{"lineNumber":333,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":334,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getType() \u003d\u003d TokenType::ThatKeyword);"},{"lineNumber":335,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[6].getValue() \u003d\u003d \"that\");"},{"lineNumber":336,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":337,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getType() \u003d\u003d TokenType::Follows);"},{"lineNumber":338,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[7].getValue() \u003d\u003d \"Follows\");"},{"lineNumber":339,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":340,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getType() \u003d\u003d TokenType::Lparenthesis);"},{"lineNumber":341,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[8].getValue() \u003d\u003d \"(\");"},{"lineNumber":342,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":343,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getType() \u003d\u003d TokenType::INTEGER);"},{"lineNumber":344,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[9].getValue() \u003d\u003d \"1\");"},{"lineNumber":345,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":346,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getType() \u003d\u003d TokenType::Comma);"},{"lineNumber":347,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[10].getValue() \u003d\u003d \",\");"},{"lineNumber":348,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":349,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getType() \u003d\u003d TokenType::INTEGER);"},{"lineNumber":350,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[11].getValue() \u003d\u003d \"2\");"},{"lineNumber":351,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":352,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getType() \u003d\u003d TokenType::Rparenthesis);"},{"lineNumber":353,"author":{"gitId":"MSI\\vegit"},"content":"    REQUIRE(tokens[12].getValue() \u003d\u003d \")\");"},{"lineNumber":354,"author":{"gitId":"MSI\\vegit"},"content":""},{"lineNumber":355,"author":{"gitId":"MSI\\vegit"},"content":"}"}],"authorContributionMap":{"winson8222":41,"MSI\\vegit":314}},{"path":"Team19/Code19/src/unit_testing/src/sp/ASTTest/ASTTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/ast/AST.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"ast test 1\", \"[readFileToString]\") {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode ast1 \u003d ASTNode(ASTNodeType::ADD, 1, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast1.type \u003d\u003d ASTNodeType::ADD);"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast1.lineNumber \u003d\u003d 1);"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode ast2 \u003d ASTNode(ASTNodeType::VARIABLE, 3, \"x\");"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast2.type \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast2.lineNumber \u003d\u003d 3);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast2.value \u003d\u003d \"x\");"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    ast2.setValue(\"y\");"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(ast2.value \u003d\u003d \"y\");"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2_ptr \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"x\");"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast3_ptr \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"1\");"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast4_ptr \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 2, \"2\");"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    ast3_ptr-\u003eaddChild(std::move(ast4_ptr));"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"    ast1.addChild(std::move(ast2_ptr));"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    ast1.addChild(std::move(ast3_ptr));"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"ast test 2\", \"[readFileToString]\") {"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode ast1 \u003d ASTNode(ASTNodeType::ADD, 1, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    auto rootNode \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 1, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    auto childNode1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"x\");"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    auto childNode2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"1\");"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    AST ast(std::move(rootNode));"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    // Access the root node of the AST"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    const ASTNode* root \u003d ast.getRoot();"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(root-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(root-\u003etype \u003d\u003d ASTNodeType::ASSIGN);"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"// build a tree with the while statement?"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"ast test 3\", \"[readFileToString]\") {"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"    /*"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"    i \u003d 1;"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    while (i \u003c 3) {"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"        i \u003d i + 1;"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"    */"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    ASTNode ast1 \u003d ASTNode(ASTNodeType::STATEMENT_LIST, 1, Utility::getASTNodeType(ASTNodeType::STATEMENT_LIST));"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"i\");"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast3 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 1, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast4 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"1\");"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast5 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::WHILE, 2, Utility::getASTNodeType(ASTNodeType::WHILE));"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast6 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 2, \"i\");"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast7 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::LESSER, 2, Utility::getASTNodeType(ASTNodeType::LESSER));"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast8 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 2, \"3\");"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast9 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"i\");"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast10 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 3, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast11 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"i\");"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast12 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, 3, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast13 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 3, \"1\");"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"    ast12-\u003eaddChild(std::move(ast11));"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"    ast12-\u003eaddChild(std::move(ast13));"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"    ast10-\u003eaddChild(std::move(ast9));"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":"    ast10-\u003eaddChild(std::move(ast12));"},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":"    ast7-\u003eaddChild(std::move(ast6));"},{"lineNumber":79,"author":{"gitId":"hmanhduc2k"},"content":"    ast7-\u003eaddChild(std::move(ast8));"},{"lineNumber":80,"author":{"gitId":"hmanhduc2k"},"content":"    ast5-\u003eaddChild(std::move(ast7));"},{"lineNumber":81,"author":{"gitId":"hmanhduc2k"},"content":"    ast5-\u003eaddChild(std::move(ast10));"},{"lineNumber":82,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":83,"author":{"gitId":"hmanhduc2k"},"content":"    ast3-\u003eaddChild(std::move(ast2));"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":"    ast3-\u003eaddChild(std::move(ast4));"},{"lineNumber":85,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":"    ast1.addChild(std::move(ast3));"},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"    ast1.addChild(std::move(ast5));"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"    "},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":"    std::string output;"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(output \u003d ast1.toString());"},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"    std::stringstream ss(output);"},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"    // Vector to store the split strings"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e lines;"},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"    // Temporary string to store each line"},{"lineNumber":98,"author":{"gitId":"hmanhduc2k"},"content":"    std::string line;"},{"lineNumber":99,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":100,"author":{"gitId":"hmanhduc2k"},"content":"    // Read each line using std::getline and push it into the vector"},{"lineNumber":101,"author":{"gitId":"hmanhduc2k"},"content":"    while (std::getline(ss, line, \u0027\\n\u0027)) {"},{"lineNumber":102,"author":{"gitId":"hmanhduc2k"},"content":"        lines.insert(line);"},{"lineNumber":103,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hmanhduc2k"},"content":"    // std::cout \u003c\u003c output \u003c\u003c std::endl;"},{"lineNumber":105,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(lines.size() \u003d\u003d 14);"},{"lineNumber":106,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(lines.find(\"        Type: Constant, Line Number: 3, Value: 1\") !\u003d lines.end());"},{"lineNumber":107,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":108,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":109,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"ast test 4\", \"[readFileToString]\") {"},{"lineNumber":110,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, 1, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":111,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, 1, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":112,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c ast1-\u003ehash() \u003c\u003c std::endl;"},{"lineNumber":113,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":114,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":114}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorEntityTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/DesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\" tests for Entity Extractor\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    PKBManager pkbManager;"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager.getPKBWriterManager();"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    DesignExtractor designExtractor(std::make_shared\u003cASTNode\u003e(), pkbWriterManager);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    auto value1 \u003d designExtractor.pkbWriterManager;"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast1 \u003d designExtractor.root;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    // Create AST nodes with different names and values"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2_i \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"i\");"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast3_i \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 1, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast4_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"1\");"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2_k \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"k\");"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast3_k \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 1, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast4_3 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"3\");"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast5_while \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::WHILE, 2, Utility::getASTNodeType(ASTNodeType::WHILE));"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast6_k \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 2, \"k\");"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast7_lesser \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::LESSER, 2, Utility::getASTNodeType(ASTNodeType::LESSER));"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast8_3 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 2, \"5\");"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast9_i \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"i\");"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast10_assign \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 3, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast11_j \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"j\");"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast12_add \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, 3, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast13_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 3, \"1\");"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    ast12_add-\u003eaddChild(std::move(ast11_j));"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    ast12_add-\u003eaddChild(std::move(ast13_1));"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    ast10_assign-\u003eaddChild(std::move(ast9_i));"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    ast10_assign-\u003eaddChild(std::move(ast12_add));"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    ast7_lesser-\u003eaddChild(std::move(ast6_k));"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"    ast7_lesser-\u003eaddChild(std::move(ast8_3));"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    ast5_while-\u003eaddChild(std::move(ast7_lesser));"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"    ast5_while-\u003eaddChild(std::move(ast10_assign));"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    ast3_i-\u003eaddChild(std::move(ast2_i));"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    ast3_i-\u003eaddChild(std::move(ast4_1));"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"    ast3_k-\u003eaddChild(std::move(ast2_k));"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    ast3_k-\u003eaddChild(std::move(ast4_3));"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(ast3_i));"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(ast3_k));"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(ast5_while));"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    // Extract variables and constants"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e extractedVariables \u003d designExtractor.extractVariables();"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e extractedConstants \u003d designExtractor.extractConstants();"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expectedVariables \u003d { \"i\", \"j\", \"k\" };"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expectedConstants \u003d { \"1\", \"3\", \"5\" };"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedVariables \u003d\u003d expectedVariables);"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedConstants \u003d\u003d expectedConstants);"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":68,"jianoway":3}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorProcedureTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/DesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Test multiple procedure extractor\", \"[parseProcedure]\") {"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    // Generate test file"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program1.txt\";"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"GWphua"},"content":"    SimpleParserFacade parser(testFileName);"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"    std::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    PKBManager pkbManager;"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager.getPKBWriterManager();"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    DesignExtractor designExtractor(tree_ptr, pkbWriterManager);"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e actual \u003d designExtractor.extractProcedures();"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expected \u003d { \"Procedure\", \"Procedure\", \"Procedure\" };"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(actual \u003d\u003d expected);"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Test single procedure extractor\", \"[parseProcedure]\") {"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure1.txt\";"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":"    SimpleParserFacade parser(testFileName);"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":"    std::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    PKBManager pkbManager;"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager.getPKBWriterManager();"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    DesignExtractor designExtractor(tree_ptr, pkbWriterManager);"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e actual \u003d designExtractor.extractProcedures();"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expected \u003d { \"Procedure\" };"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(actual \u003d\u003d expected);"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"GWphua":5,"hmanhduc2k":36,"jianoway":4}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorStatementTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/DesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Unit tests for Statement Extractor\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    PKBManager pkbManager;"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager.getPKBWriterManager();"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    DesignExtractor designExtractor(std::make_shared\u003cASTNode\u003e(), pkbWriterManager);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    auto value1 \u003d designExtractor.pkbWriterManager;"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast1 \u003d designExtractor.root;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    // Create AST nodes with different names and values"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    auto call_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CALL, 1, \"call\");"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    auto print_2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::PRINT, 2, \"print\");"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"    auto call_2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CALL, 3, \"call\");"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"    auto read_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::READ, 4, \"read\");"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    auto print_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::PRINT, 5, \"print\");"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    auto read_2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::READ, 6, \"read\");"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_1 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"i\");"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 2, \"j\");"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_3 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"k\");"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_4 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 4, \"k\");"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_5 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 5, \"j\");"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    auto variable_6 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 6, \"i\");"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    call_1-\u003eaddChild(std::move(variable_1));"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    call_2-\u003eaddChild(std::move(variable_2));"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"    print_1-\u003eaddChild(std::move(variable_3));"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    print_2-\u003eaddChild(std::move(variable_4));"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"    read_1-\u003eaddChild(std::move(variable_5));"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    read_2-\u003eaddChild(std::move(variable_6));"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(call_1));"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(call_2));"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(print_1));"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(print_2));"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(read_1));"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(read_2));"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"    // Extract variables and constants"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractedCall \u003d designExtractor.extractCall();"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractedPrint \u003d designExtractor.extractPrint();"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractedRead \u003d designExtractor.extractRead();"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedCall \u003d { 1, 3 };"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedPrint \u003d { 2, 5 };"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedRead \u003d { 4, 6 };"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedCall \u003d\u003d expectedCall);"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedPrint \u003d\u003d expectedPrint);"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedRead \u003d\u003d expectedRead);"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(std::make_shared\u003cASTNode\u003e(ASTNodeType::PROCEDURE, 7, \"procedure\")));"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"    designExtractor.extractAll();"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e extractedStatements \u003d designExtractor.extractStatements();"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedStatements \u003d { 1, 2, 3, 4, 5, 6 };"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedStatements.size() \u003d\u003d 6);"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(extractedStatements \u003d\u003d expectedStatements);"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":68,"jianoway":3}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/DesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Parser/SimpleParser.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\" system tests for DesignExtractor\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile1.txt\";"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    PKBManager pkbManager;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkbManager.getPKBWriterManager();"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    DesignExtractor designExtractor(std::make_shared\u003cASTNode\u003e(), pkbWriterManager);"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"First stage now\\n\\n\" \u003c\u003c std::endl;"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    auto value1 \u003d designExtractor.pkbWriterManager;"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast1 \u003d designExtractor.root;"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast2 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 1, \"i\");"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast3 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 1, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast4 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 1, \"1\");"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast5 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::WHILE, 2, Utility::getASTNodeType(ASTNodeType::WHILE));"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast6 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 2, \"i\");"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast7 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::LESSER, 2, Utility::getASTNodeType(ASTNodeType::LESSER));"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast8 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 2, \"3\");"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast9 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"i\");"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast10 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ASSIGN, 3, Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast11 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::VARIABLE, 3, \"j\");"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast12 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::ADD, 3, Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"    auto ast13 \u003d std::make_shared\u003cASTNode\u003e(ASTNodeType::CONSTANT, 3, \"1\");"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"    ast12-\u003eaddChild(std::move(ast11));"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    ast12-\u003eaddChild(std::move(ast13));"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    ast10-\u003eaddChild(std::move(ast9));"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    ast10-\u003eaddChild(std::move(ast12));"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"    ast7-\u003eaddChild(std::move(ast6));"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"    ast7-\u003eaddChild(std::move(ast8));"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"    ast5-\u003eaddChild(std::move(ast7));"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    ast5-\u003eaddChild(std::move(ast10));"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"    ast3-\u003eaddChild(std::move(ast2));"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":"    ast3-\u003eaddChild(std::move(ast4));"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(ast3));"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"    ast1-\u003eaddChild(std::move(ast5));"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    /*"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"    auto value2 \u003d designExtractor.extractVariables();"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Extracted variables:\" \u003c\u003c std::endl;"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto\u0026 var : value2) {"},{"lineNumber":60,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c var \u003c\u003c std::endl;"},{"lineNumber":61,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"end\\n\" \u003c\u003c std::endl;"},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":"    auto value3 \u003d designExtractor.extractConstants();"},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"Extracted constants:\" \u003c\u003c std::endl;"},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto\u0026 var : value3) {"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c var \u003c\u003c std::endl;"},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"end\\n\" \u003c\u003c std::endl;*/"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":68,"jianoway":3}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorTest_Print.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/FacadeDesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests for DesignExtractors for Print\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\t/*"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\tprocedure proc1 {"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t\tprint x;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\tprint y;"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode());"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e stmtLst1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::STATEMENT_LIST, 1, \"stmtLst1\"));"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e print1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PRINT, 2, \"print\"));"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e print2 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PRINT, 3, \"print\"));"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\tprint1-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::VARIABLE, 2, \"x\")));"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\tprint2-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::VARIABLE, 3, \"y\")));"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\tstmtLst1-\u003eaddChild(print1);"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\tstmtLst1-\u003eaddChild(print2);"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\tproc1-\u003eaddChild(stmtLst1);"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_NOTHROW(fde.extractAll());"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkb-\u003egetPKBReaderManager();"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::unordered_set\u003cint\u003e expectedPrints \u003d { 2, 3 };"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::unordered_set\u003cstd::string\u003e expectedPrintVars \u003d { \"x\", \"y\" };"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"\tauto actualPrints \u003d pkbReaderManager-\u003egetPrintReader()-\u003egetAllPrints();"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"\tauto actualPrintVars \u003d pkbReaderManager-\u003egetVariableReader()-\u003egetAllVariables();"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(expectedPrints \u003d\u003d actualPrints);"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(expectedPrintVars \u003d\u003d actualPrintVars);"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":50}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorTest_Procedure.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/FacadeDesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests for DesignExtractors for Procedure\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode());"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc2 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 2, \"proc2\"));"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc2);"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_NOTHROW(fde.extractAll());"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkb-\u003egetPKBReaderManager();"},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::unordered_set\u003cstd::string\u003e expectedProcNames \u003d { \"proc1\", \"proc2\"};"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tauto val \u003d pkbReaderManager-\u003egetProcedureReader()-\u003egetAllProcedures();"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(val \u003d\u003d expectedProcNames);"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests invalid DesignExtractors for Procedure\", \"[DesignExtractor::extract]\") {"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 0, \"proc\"));"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_THROWS_WITH(fde.extractAll(), \"ERROR: This is not the start node!\");"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":41}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorTest_Read.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/FacadeDesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests for DesignExtractors for Read\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\t/*"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tprocedure proc1 {"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"\t\tread x;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"\t\tread y;"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\t\tread z;"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\t*/"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode());"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e stmtLst1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::STATEMENT_LIST, 1, \"stmtLst1\"));"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e read1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::READ, 2, \"READ\"));"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e read2 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::READ, 3, \"READ\"));"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e read3 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::READ, 4, \"READ\"));"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"\tread1-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::VARIABLE, 2, \"x\")));"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\tread2-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::VARIABLE, 3, \"y\")));"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\tread3-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::VARIABLE, 4, \"z\")));"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\tstmtLst1-\u003eaddChild(read1);"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\tstmtLst1-\u003eaddChild(read2);"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\tstmtLst1-\u003eaddChild(read3);"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\tproc1-\u003eaddChild(stmtLst1);"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_NOTHROW(fde.extractAll());"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkb-\u003egetPKBReaderManager();"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::unordered_set\u003cint\u003e expectedReads \u003d { 2, 3, 4 };"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::unordered_set\u003cstd::string\u003e expectedReadVars \u003d { \"x\", \"y\", \"z\"};"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"\tauto actualReads \u003d pkbReaderManager-\u003egetReadReader()-\u003egetAllReads();"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"\tauto actualReadVars \u003d pkbReaderManager-\u003egetVariableReader()-\u003egetAllVariables();"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(expectedReads \u003d\u003d actualReads);"},{"lineNumber":54,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(expectedReadVars \u003d\u003d actualReadVars);"},{"lineNumber":55,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":55}},{"path":"Team19/Code19/src/unit_testing/src/sp/DesignExtractorTest/DesignExtractorTest_StatementList.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/DesignExtractor/FacadeDesignExtractor.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/AST/ASTNode.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"pkb/PKBManager.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/Utility.h\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cunordered_set\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests for DesignExtractors for Statement Lists\", \"[DesignExtractor::extract]\") {"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode());"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"\tproc1-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::STATEMENT_LIST, 1, \"statement lists\")));"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_NOTHROW(fde.extractAll());"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":26,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tests invalid DesignExtractors for Statement Lists\", \"[DesignExtractor::extract]\") {"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::cout \u003c\u003c \"INVALID STATEMENT LIST\" \u003c\u003c std::endl;"},{"lineNumber":28,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e root \u003d std::make_shared\u003cASTNode\u003e(ASTNode());"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cASTNode\u003e proc1 \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::PROCEDURE, 1, \"proc1\"));"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"\tauto statementList \u003d std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::STATEMENT_LIST, 1, \"statement lists\"));"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"\tstatementList-\u003eaddChild(std::make_shared\u003cASTNode\u003e(ASTNode(ASTNodeType::DIVIDE, 2, \"add\")));"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":"\tproc1-\u003eaddChild(statementList);"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"\troot-\u003eaddChild(proc1);"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBManager\u003e pkb \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::shared_ptr\u003cPKBWriterManager\u003e pkbWriterManager \u003d pkb-\u003egetPKBWriterManager();"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::cout \u003c\u003c root-\u003etoString() \u003c\u003c std::endl;"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"\tFDesignExtractor fde(root, pkbWriterManager);"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_THROWS_WITH(fde.extractAll(), \"ERROR: Not a statement!\");"},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":42}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseAssignStatement.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing parseAssign with only one constant\", \"[parse][assign]\") {"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/AssignStmt1.txt\";"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing tree root node\") {"},{"lineNumber":12,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":13,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e assignStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003etype \u003d\u003d ASTNodeType::ASSIGN);"},{"lineNumber":16,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":17,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":"\t\tSECTION(\"Testing tree child node\") {"},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"\t\t\tconst auto\u0026 children \u003d assignStatement-\u003echildren;"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children.size() \u003d\u003d 2);"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":23,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"x\");"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":26,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[1]-\u003etype \u003d\u003d ASTNodeType::CONSTANT);"},{"lineNumber":27,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[1]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[1]-\u003evalue \u003d\u003d \"1\");"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":32,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":33,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing parseAssign with an expression\", \"[parse][assign]\") {"},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":"\t// Generate test file"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/AssignStmt2.txt\";"},{"lineNumber":36,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":37,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":38,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":"\tSECTION(\"Testing tree root node\") {"},{"lineNumber":40,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":41,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e assignStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":43,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003etype \u003d\u003d ASTNodeType::ASSIGN);"},{"lineNumber":44,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":45,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(assignStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::ASSIGN));"},{"lineNumber":46,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":47,"author":{"gitId":"GWphua"},"content":"\t\tSECTION(\"Testing tree child node\") {"},{"lineNumber":48,"author":{"gitId":"GWphua"},"content":"\t\t\tconst auto\u0026 children \u003d assignStatement-\u003echildren;"},{"lineNumber":49,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children.size() \u003d\u003d 2);"},{"lineNumber":50,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":51,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":52,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"read\");"},{"lineNumber":53,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":54,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[1]-\u003etype \u003d\u003d ASTNodeType::ADD);"},{"lineNumber":55,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[1]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":56,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[1]-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::ADD));"},{"lineNumber":57,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":58,"author":{"gitId":"GWphua"},"content":"\t\t\tSECTION(\"Testing expression of children\") {"},{"lineNumber":59,"author":{"gitId":"GWphua"},"content":"\t\t\t\tconst auto\u0026 constants \u003d children[1]-\u003echildren;"},{"lineNumber":60,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants.size() \u003d\u003d 2);"},{"lineNumber":61,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[0]-\u003etype \u003d\u003d ASTNodeType::CONSTANT);"},{"lineNumber":62,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":63,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[0]-\u003evalue \u003d\u003d \"1\");"},{"lineNumber":64,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":65,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[1]-\u003etype \u003d\u003d ASTNodeType::CONSTANT);"},{"lineNumber":66,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[1]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":67,"author":{"gitId":"GWphua"},"content":"\t\t\t\tREQUIRE(constants[1]-\u003evalue \u003d\u003d \"3\");"},{"lineNumber":68,"author":{"gitId":"GWphua"},"content":"\t\t\t}"},{"lineNumber":69,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":70,"author":{"gitId":"GWphua"},"content":"\t\t}"},{"lineNumber":71,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":72,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"Guan Wei":19,"GWphua":53}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseCallStatement_AI.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt, 2, e)"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/CRO1bXNAQZB3Adua8DmfPuWb?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing CallStmt::buildTree()\", \"[parse][call]\") {"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/CallStmt1.txt\";"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":11,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing tree root node\") {"},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e callStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":17,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(callStatement-\u003etype \u003d\u003d ASTNodeType::CALL);"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(callStatement-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(callStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::CALL));"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\t\tSECTION(\"Testing tree child node\") {"},{"lineNumber":22,"author":{"gitId":"GWphua"},"content":"\t\t\tconst auto\u0026 children \u003d callStatement-\u003echildren;"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children.size() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"x\");"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"// ai-gen end"}],"authorContributionMap":{"Guan Wei":21,"GWphua":9}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParsePrintStatement_AI.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt, 2, e)"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/CRO1bXNAQZB3Adua8DmfPuWb?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing PrintStmt::buildTree()\", \"[parse][print]\") {"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/PrintStmt1.txt\";"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":12,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":13,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e printStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":17,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(printStatement-\u003etype \u003d\u003d ASTNodeType::PRINT);"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(printStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(printStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PRINT));"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing tree child node\") {"},{"lineNumber":22,"author":{"gitId":"GWphua"},"content":"\t\tconst auto\u0026 children \u003d printStatement-\u003echildren;"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(children.size() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":25,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":26,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"read\");"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"// ai-gen end"}],"authorContributionMap":{"Guan Wei":17,"GWphua":12}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseProcedure.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Procedure parsing throws an error for missing closing curly brace\", \"[parse][procedure]\") {"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure_Invalid1.txt\";"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"\t// For this test, we expect parsing to terminate due to erroneous input."},{"lineNumber":12,"author":{"gitId":"GWphua"},"content":"\tCHECK_THROWS_AS(parser.parse(), std::runtime_error);"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Procedure parsing throws an error for missing curly braces\", \"[parse][procedure]\") {"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure_Invalid2.txt\";"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":"\t// For this test, we expect parsing to terminate due to erroneous input."},{"lineNumber":21,"author":{"gitId":"GWphua"},"content":"\tCHECK_THROWS_AS(parser.parse(), std::runtime_error);"},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":24,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":25,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Calling parseProcedure with print, read, call statements\", \"[parse][procedure]\") {"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure1.txt\";"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":29,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":30,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":32,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(tree_ptr-\u003etype \u003d\u003d ASTNodeType::PROGRAMS);"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(tree_ptr-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(tree_ptr-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROGRAMS));"},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":36,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":37,"author":{"gitId":"GWphua"},"content":"\tconst auto procedure \u003d (tree_ptr-\u003echildren)[0];"},{"lineNumber":38,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003etype \u003d\u003d ASTNodeType::PROCEDURE);"},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":40,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROCEDURE));"},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":42,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":43,"author":{"gitId":"GWphua"},"content":"\tSECTION(\"Testing child nodes\") {"},{"lineNumber":44,"author":{"gitId":"GWphua"},"content":"\t\tconst auto\u0026 statementList \u003d (procedure-\u003echildren)[0];"},{"lineNumber":45,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(statementList-\u003etype \u003d\u003d ASTNodeType::STATEMENT_LIST);"},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(statementList-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(statementList-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::STATEMENT_LIST));"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":50,"author":{"gitId":"Guan Wei"},"content":"\t\tSECTION(\"Testing Print child node\") {"},{"lineNumber":51,"author":{"gitId":"Guan Wei"},"content":"\t\t\tconst auto\u0026 statements \u003d statementList-\u003echildren;"},{"lineNumber":52,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(statements.size() \u003d\u003d 3);"},{"lineNumber":53,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":54,"author":{"gitId":"GWphua"},"content":"\t\t\tauto callStatement \u003d statements[0];"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(callStatement-\u003etype \u003d\u003d ASTNodeType::CALL);"},{"lineNumber":56,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(callStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":57,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(callStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::CALL));"},{"lineNumber":58,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":59,"author":{"gitId":"GWphua"},"content":"\t\t\tauto printStatement \u003d statements[1];"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(printStatement-\u003etype \u003d\u003d ASTNodeType::PRINT);"},{"lineNumber":61,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(printStatement-\u003elineNumber \u003d\u003d 3);"},{"lineNumber":62,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(printStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PRINT));"},{"lineNumber":63,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":64,"author":{"gitId":"GWphua"},"content":"\t\t\tauto readStatement \u003d statements[2];"},{"lineNumber":65,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(readStatement-\u003etype \u003d\u003d ASTNodeType::READ);"},{"lineNumber":66,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(readStatement-\u003elineNumber \u003d\u003d 4);"},{"lineNumber":67,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(readStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::READ));"},{"lineNumber":68,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":69,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":70,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":72,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Test string representations of procedures\", \"[parse][procedure]\") {"},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"\t// Generate test file"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure1.txt\";"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":76,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":77,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":78,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":79,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e procedure \u003d (tree_ptr-\u003echildren)[0];"},{"lineNumber":80,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":81,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003etype \u003d\u003d ASTNodeType::PROCEDURE);"},{"lineNumber":82,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":83,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(procedure-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROCEDURE));"},{"lineNumber":84,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":85,"author":{"gitId":"GWphua"},"content":"\tstd::string content \u003d procedure-\u003etoString();"},{"lineNumber":86,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":87,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string subcontent1 \u003d \"    Type: Call, Line Number: 2, Value: Call\\n\";"},{"lineNumber":88,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent1) !\u003d std::string::npos);"},{"lineNumber":89,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":90,"author":{"gitId":"Guan Wei"},"content":"\tstd::string subcontent2 \u003d \"  Type: StatementList, Line Number: 2, Value: StatementList\\n\";"},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent2) !\u003d std::string::npos);"},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string subcontent3 \u003d \"Type: Procedure, Line Number: 1, Value: Procedure\\n\";"},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent3) !\u003d std::string::npos);"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"Guan Wei":46,"GWphua":33,"hmanhduc2k":16}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseProgram.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Program parsing throws an error for missing curly brace\", \"[parse][program]\") {"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program_Invalid1.txt\";"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"\t// For this test, we expect parsing to terminate due to erroneous input."},{"lineNumber":12,"author":{"gitId":"GWphua"},"content":"\tCHECK_THROWS_AS(parser.parse(), std::runtime_error);"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":15,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":16,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Calling parseProgram for multiple procedures\", \"[parse][program]\") {"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program1.txt\";"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(tree_ptr-\u003etype \u003d\u003d ASTNodeType::PROGRAMS);"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(tree_ptr-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(tree_ptr-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROGRAMS));"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\tconst auto\u0026 procedures \u003d tree_ptr-\u003echildren;"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(procedures.size() \u003d\u003d 3);"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(procedures[1]-\u003etype \u003d\u003d ASTNodeType::PROCEDURE);"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(procedures[1]-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROCEDURE));"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Calling parseProgram for if-else-then procedures\", \"[parse][program]\") {"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program2.txt\";"},{"lineNumber":36,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":37,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":38,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":40,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(tree_ptr-\u003etype \u003d\u003d ASTNodeType::PROGRAMS);"},{"lineNumber":41,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(tree_ptr-\u003elineNumber \u003d\u003d 1);"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(tree_ptr-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PROGRAMS));"},{"lineNumber":43,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":44,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":45,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e ifStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":46,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(ifStatement-\u003etype \u003d\u003d ASTNodeType::IF_ELSE_THEN);"},{"lineNumber":47,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":48,"author":{"gitId":"GWphua"},"content":"\tauto\u0026 ifChildren \u003d ifStatement-\u003echildren;"},{"lineNumber":49,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(ifChildren.size() \u003d\u003d 3);"},{"lineNumber":50,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":51,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(ifChildren[0]-\u003etype \u003d\u003d ASTNodeType::GREATER);"},{"lineNumber":52,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(ifChildren[1]-\u003etype \u003d\u003d ASTNodeType::STATEMENT_LIST);"},{"lineNumber":53,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(ifChildren[2]-\u003etype \u003d\u003d ASTNodeType::STATEMENT_LIST);"},{"lineNumber":54,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":55,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":56,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Test string representations of programs\", \"[parse][program]\") {"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"\t// Generate test file"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program1.txt\";"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":60,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":61,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":63,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string content;"},{"lineNumber":64,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":65,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE_NOTHROW(content \u003d tree_ptr-\u003etoString());"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":67,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::cout \u003c\u003c content \u003c\u003c std::endl;"},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":69,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string subcontent1 \u003d \"  Type: Procedure, Line Number: 1, Value: Procedure\\n\";"},{"lineNumber":70,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string subcontent2 \u003d \"  Type: Procedure, Line Number: 5, Value: Procedure\\n\";"},{"lineNumber":71,"author":{"gitId":"hmanhduc2k"},"content":"\tstd::string subcontent3 \u003d \"  Type: Procedure, Line Number: 9, Value: Procedure\\n\";"},{"lineNumber":72,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":73,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent1) !\u003d std::string::npos);"},{"lineNumber":74,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent2) !\u003d std::string::npos);"},{"lineNumber":75,"author":{"gitId":"hmanhduc2k"},"content":"\tREQUIRE(content.find(subcontent3) !\u003d std::string::npos);"},{"lineNumber":76,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":77,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"Guan Wei":24,"GWphua":32,"hmanhduc2k":21}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseReadStatement_AI.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt, 2, e)"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"// Prompt: https://platform.openai.com/playground/p/CRO1bXNAQZB3Adua8DmfPuWb?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing ReadStmt::buildTree()\", \"[parse][read]\") {"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/ReadStmt1.txt\";"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":11,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing tree root node\") {"},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e readStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":17,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003etype \u003d\u003d ASTNodeType::READ);"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::READ));"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":"\t\tSECTION(\"Testing tree child node\") {"},{"lineNumber":22,"author":{"gitId":"GWphua"},"content":"\t\t\tconst auto\u0026 children \u003d readStatement-\u003echildren;"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children.size() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":25,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"readableVariable\");"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":31,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Testing ReadStmt::buildTree() with read as variable\", \"[parse][read]\") {"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/ReadStmt2.txt\";"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":35,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing tree root node\") {"},{"lineNumber":38,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":"\t\tstd::shared_ptr\u003cASTNode\u003e readStatement \u003d (((tree_ptr-\u003echildren)[0]-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":41,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003etype \u003d\u003d ASTNodeType::READ);"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":43,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::READ));"},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"\t\tSECTION(\"Testing tree child node\") {"},{"lineNumber":46,"author":{"gitId":"GWphua"},"content":"\t\t\tconst auto\u0026 children \u003d readStatement-\u003echildren;"},{"lineNumber":47,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children.size() \u003d\u003d 1);"},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003etype \u003d\u003d ASTNodeType::VARIABLE);"},{"lineNumber":49,"author":{"gitId":"GWphua"},"content":"\t\t\tREQUIRE(children[0]-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":50,"author":{"gitId":"Guan Wei"},"content":"\t\t\tREQUIRE(children[0]-\u003evalue \u003d\u003d \"read\");"},{"lineNumber":51,"author":{"gitId":"Guan Wei"},"content":"\t\t}"},{"lineNumber":52,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":53,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":34,"GWphua":19}},{"path":"Team19/Code19/src/unit_testing/src/sp/ParserTest/ParseStatementList.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"#include \"sp/Parser/SimpleParserFacade.h\""},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"StatementList parsing throws an error with invalid syntax\", \"[parse][statementList]\") {"},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/StmtList_Invalid1.txt\";"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\t// For this test, we expect parsing to terminate due to erroneous input."},{"lineNumber":11,"author":{"gitId":"GWphua"},"content":"\tCHECK_THROWS_AS(parser.parse(), std::runtime_error);"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"TEST_CASE(\"Calling multiple statements\", \"[parse][statementList]\") {"},{"lineNumber":15,"author":{"gitId":"Guan Wei"},"content":"\t// Generate test file"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"\tconst std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/StmtList1.txt\";"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"\tREQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":18,"author":{"gitId":"GWphua"},"content":"\tSimpleParserFacade parser(testFileName);"},{"lineNumber":19,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e tree_ptr \u003d parser.parse();"},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"\tstd::shared_ptr\u003cASTNode\u003e statementList \u003d ((tree_ptr-\u003echildren)[0]-\u003echildren)[0];"},{"lineNumber":21,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":22,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(statementList-\u003etype \u003d\u003d ASTNodeType::STATEMENT_LIST);"},{"lineNumber":23,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(statementList-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":24,"author":{"gitId":"GWphua"},"content":"\tREQUIRE(statementList-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::STATEMENT_LIST));"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"\tSECTION(\"Testing Print child node\") {"},{"lineNumber":27,"author":{"gitId":"GWphua"},"content":"\t\tconst auto\u0026 statements \u003d statementList-\u003echildren;"},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(statements.size() \u003d\u003d 3);"},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"\t\tauto callStatement \u003d statements[0];"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(callStatement-\u003etype \u003d\u003d ASTNodeType::CALL);"},{"lineNumber":32,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(callStatement-\u003elineNumber \u003d\u003d 2);"},{"lineNumber":33,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(callStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::CALL));"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":"\t\tauto printStatement \u003d statements[1];"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(printStatement-\u003etype \u003d\u003d ASTNodeType::PRINT);"},{"lineNumber":37,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(printStatement-\u003elineNumber \u003d\u003d 3);"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(printStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::PRINT));"},{"lineNumber":39,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":40,"author":{"gitId":"Guan Wei"},"content":"\t\tauto readStatement \u003d statements[2];"},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(readStatement-\u003etype \u003d\u003d ASTNodeType::READ);"},{"lineNumber":42,"author":{"gitId":"GWphua"},"content":"\t\tREQUIRE(readStatement-\u003elineNumber \u003d\u003d 4);"},{"lineNumber":43,"author":{"gitId":"Guan Wei"},"content":"\t\tREQUIRE(readStatement-\u003evalue \u003d\u003d Utility::getASTNodeType(ASTNodeType::READ));"},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":"\t}"},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":29,"GWphua":16}},{"path":"Team19/Code19/src/unit_testing/src/sp/SourceParserTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SourceProcessor.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Test header\", \"[SourceProcessor]\") {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program1.txt\";"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileContent \u003d \"x \u003d 1;\";"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent;"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    SourceProcessor sp(testFileName, pkbManager);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.parseSIMPLE());"},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.extractAndPopulate());"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d sp.pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    auto variableReader \u003d pkbReaderManager-\u003egetVariableReader();"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    auto values1 \u003d variableReader-\u003egetAllVariables();"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":22,"jianoway":3}},{"path":"Team19/Code19/src/unit_testing/src/sp/TokenizerTest/InvalidTokenizerTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/FileProcessor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cregex\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tokenizer invalid cases\", \"[readFileToString]\") {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile6.txt\";"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileContent \u003d \"x \u003d 1;\";"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(actualContent \u003d FileProcessor::readFileToString(testFileName));"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    auto arr \u003d SPTokenizer::tokenize(actualContent);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":19}},{"path":"Team19/Code19/src/unit_testing/src/sp/TokenizerTest/LexicalTokenTest_AI.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"// ai-gen start(gpt,2,e)"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"// prompt: https://platform.openai.com/playground/p/vwMjpyCtExjgJwMs6KZaXnTE?model\u003dgpt-4\u0026mode\u003dchat"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"#include \"catch.hpp\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"// Test the constructor with only token type."},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Constructor with only type\", \"[LexicalToken]\")"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":"{"},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"    LexicalToken token(LexicalTokenType::SYMBOL_OPEN_BRACE,1,1,\"(\");"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(token.getTokenType() \u003d\u003d LexicalTokenType::SYMBOL_OPEN_BRACE);"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"// Test getting the token type."},{"lineNumber":14,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Get TokenType\", \"[LexicalToken]\")"},{"lineNumber":15,"author":{"gitId":"Guan Wei"},"content":"{"},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"    LexicalToken token(LexicalTokenType::OPERATOR_PLUS,1,1,\"+\");"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(token.getTokenType() \u003d\u003d LexicalTokenType::OPERATOR_PLUS);"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":"//ai-gen end"},{"lineNumber":20,"author":{"gitId":"Guan Wei"},"content":""}],"authorContributionMap":{"Guan Wei":19,"hmanhduc2k":1}},{"path":"Team19/Code19/src/unit_testing/src/sp/TokenizerTest/LexicalTokenTypeTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"#include \"catch.hpp\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalTokenType.h\""},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Symbol Tokens\") {"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"}\") \u003d\u003d LexicalTokenType::SYMBOL_CLOSE_BRACE);"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"(\") \u003d\u003d LexicalTokenType::SYMBOL_OPEN_PAREN);"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"    // Add more symbol tokens as needed"},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Keyword Tokens\") {"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"if\") \u003d\u003d LexicalTokenType::KEYWORD_IF);"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"then\") \u003d\u003d LexicalTokenType::KEYWORD_THEN);"},{"lineNumber":13,"author":{"gitId":"Guan Wei"},"content":"    // Add more keyword tokens as needed"},{"lineNumber":14,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":15,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":16,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Integer Tokens\") {"},{"lineNumber":17,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"42\") \u003d\u003d LexicalTokenType::INTEGER);"},{"lineNumber":18,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"123\") \u003d\u003d LexicalTokenType::INTEGER);"},{"lineNumber":19,"author":{"gitId":"Guan Wei"},"content":"    // Add more integer tokens as needed"},{"lineNumber":20,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":21,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":22,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Name Tokens\") {"},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"variable1\") \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":24,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"unknown\") \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":25,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"v\") \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"    // Add more name tokens as needed"},{"lineNumber":27,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":28,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":29,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Error Tokens\") {"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"123abc\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"!@#\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":32,"author":{"gitId":"Guan Wei"},"content":"    // Add more error cases as needed"},{"lineNumber":33,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":34,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":35,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Space and New Line Tokens\") {"},{"lineNumber":36,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\" \") \u003d\u003d LexicalTokenType::WHITESPACE);"},{"lineNumber":37,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"\\n\") \u003d\u003d LexicalTokenType::NEW_LINE);"},{"lineNumber":38,"author":{"gitId":"Guan Wei"},"content":"    // Add more space and new line tokens as needed"},{"lineNumber":39,"author":{"gitId":"GWphua"},"content":"}"},{"lineNumber":40,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":41,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Unknown Token\") {"},{"lineNumber":42,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"1variable\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":43,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"variable_123\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":44,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\"@\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":45,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(LexicalTokenTypeMapper::getTokenType(\";\u003d\") \u003d\u003d LexicalTokenType::ERROR);"},{"lineNumber":46,"author":{"gitId":"Guan Wei"},"content":"    // Add more unknown cases as needed"},{"lineNumber":47,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":15,"Guan Wei":31,"hmanhduc2k":1}},{"path":"Team19/Code19/src/unit_testing/src/sp/TokenizerTest/TokenizerConflictNamingTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/FileProcessor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cregex\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tokenizer throws error for invalid syntax\", \"[tokenize]\") {"},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_THROWS_WITH(SPTokenizer::tokenize(\"0123a \u003d y;\"), \"Error: Invalid SIMPLE syntax.\");"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Procedure test\", \"[tokenize]\") {"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cLexicalToken\u003e output \u003d SPTokenizer::tokenize(\"procedure procedure { procedure \u003d 2 }\");"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(output[0].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_PROCEDURE);"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(output[1].getTokenType() \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"procedure procedure { procedure \u003d 2 }\" \u003c\u003c std::endl;"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"    for (auto val : output) {"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"        std::cout \u003c\u003c LexicalTokenTypeMapper::tokenToStringMap.find(val.getTokenType())-\u003esecond \u003c\u003c std::endl;"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"\t}"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":25}},{"path":"Team19/Code19/src/unit_testing/src/sp/TokenizerTest/TokenizerTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/LexicalToken.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/FileProcessor.h\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cregex\u003e"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tokenizer::readFileToString\", \"[readFileToString]\") {"},{"lineNumber":12,"author":{"gitId":"Guan Wei"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile1.txt\";"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileContent \u003d \"x \u003d 1;\";"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent;"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(actualContent \u003d FileProcessor::readFileToString(testFileName));"},{"lineNumber":18,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(actualContent \u003d\u003d testFileContent);"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"hmanhduc2k"},"content":"    SPTokenizer::tokenize(actualContent);"},{"lineNumber":21,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":23,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Test reading non-existent file\", \"[readFileToString]\") {"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_THROWS_WITH(FileProcessor::readFileToString(\"non_existent_file.txt\"),"},{"lineNumber":25,"author":{"gitId":"hmanhduc2k"},"content":"        \"Error: File either does not exist, or is corrupted!\");"},{"lineNumber":26,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":27,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":28,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Test reading from an empty file\", \"[readFileToString]\") {"},{"lineNumber":29,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(FileProcessor::readFileToString(\"../../../../../tests/sp/TokenizerTest/empty.txt\") \u003d\u003d \"\");"},{"lineNumber":30,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":31,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tokenizer::splitLine\", \"[splitLine]\") {"},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"    std::cout \u003c\u003c \"TEST CASE line split start\\n\\n\" \u003c\u003c std::endl;"},{"lineNumber":34,"author":{"gitId":"Guan Wei"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile2.txt\";"},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"    const std::vector\u003cstd::string\u003e expectedOutput \u003d {"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"        \"procedure testproc {\","},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":"        \"   x \u003d 1;\","},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"        \"   y \u003d 2;\","},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"        \"   z \u003d x + y;\","},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":"        \"}\""},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    };"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent \u003d FileProcessor::readFileToString(testFileName);"},{"lineNumber":45,"author":{"gitId":"hmanhduc2k"},"content":"    std::vector\u003cstd::string\u003e actualOutput \u003d SPTokenizer::splitLine(actualContent);"},{"lineNumber":46,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":47,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":48,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Tokenize simple file without keywords\", \"[tokenize]\") {"},{"lineNumber":49,"author":{"gitId":"Guan Wei"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile1.txt\";"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":51,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent \u003d FileProcessor::readFileToString(testFileName);"},{"lineNumber":52,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":"    auto actualOutput \u003d SPTokenizer::tokenize(actualContent);"},{"lineNumber":54,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput.size() \u003d\u003d 4);"},{"lineNumber":55,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[0].getTokenType() \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":56,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[1].getTokenType() \u003d\u003d LexicalTokenType::OPERATOR_ASSIGN);"},{"lineNumber":57,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[2].getTokenType() \u003d\u003d LexicalTokenType::INTEGER);"},{"lineNumber":58,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[3].getTokenType() \u003d\u003d LexicalTokenType::SYMBOL_SEMICOLON);"},{"lineNumber":59,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":60,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":61,"author":{"gitId":"Guan Wei"},"content":"// IMPORTANT: When Tokenizer is able to check syntax, e.g. assigning the 2nd \u0027procedure\u0027 to NAME in procedure procedure, this will not work."},{"lineNumber":62,"author":{"gitId":"hmanhduc2k"},"content":"/*"},{"lineNumber":63,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Tokenize file with keywords\", \"[tokenize]\") {"},{"lineNumber":64,"author":{"gitId":"Guan Wei"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile4.txt\";"},{"lineNumber":65,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":66,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent \u003d FileProcessor::readFileToString(testFileName);"},{"lineNumber":67,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":68,"author":{"gitId":"hmanhduc2k"},"content":"    auto actualOutput \u003d SPTokenizer::tokenize(actualContent);"},{"lineNumber":69,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput.size() \u003d\u003d 9);"},{"lineNumber":70,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[0].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_IF);"},{"lineNumber":71,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[1].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_THEN);"},{"lineNumber":72,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[2].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_ELSE);"},{"lineNumber":73,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[3].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_READ);"},{"lineNumber":74,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[4].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_CALL);"},{"lineNumber":75,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[5].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_PRINT);"},{"lineNumber":76,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[6].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_WHILE);"},{"lineNumber":77,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[7].getTokenType() \u003d\u003d LexicalTokenType::KEYWORD_PROCEDURE);"},{"lineNumber":78,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(actualOutput[8].getTokenType() \u003d\u003d LexicalTokenType::NAME);"},{"lineNumber":79,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":80,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":81,"author":{"gitId":"Guan Wei"},"content":"* FUTURE TEST CASES THAT ARE TO BE ADDRESSED."},{"lineNumber":82,"author":{"gitId":"Guan Wei"},"content":"TEST_CASE(\"Tokenizer throws runtime error for invalid syntax\", \"[tokenize]\") {"},{"lineNumber":83,"author":{"gitId":"Guan Wei"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/invalid1.txt\";"},{"lineNumber":84,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":85,"author":{"gitId":"Guan Wei"},"content":"    std::string actualContent \u003d Tokenizer::readFileToString(testFileName);"},{"lineNumber":86,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":87,"author":{"gitId":"Guan Wei"},"content":"    REQUIRE_THROWS_WITH(Tokenizer::tokenize(actualContent), \"Error: Invalid SIMPLE syntax.\");"},{"lineNumber":88,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":89,"author":{"gitId":"Guan Wei"},"content":"*/"},{"lineNumber":90,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":91,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":92,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Tokenizer throws runtime error for invalid syntax\", \"[tokenize]\") {"},{"lineNumber":93,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/TokenizerTest/sourcefile5.txt\";"},{"lineNumber":94,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(std::filesystem::exists(testFileName));"},{"lineNumber":95,"author":{"gitId":"hmanhduc2k"},"content":"    std::string actualContent \u003d FileProcessor::readFileToString(testFileName);"},{"lineNumber":96,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_THROWS_WITH(SPTokenizer::tokenize(actualContent), \"Error: Invalid SIMPLE syntax.\");"},{"lineNumber":97,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"Guan Wei":42,"hmanhduc2k":55}},{"path":"Team19/Code19/src/unit_testing/src/sp/WorkflowTest.cpp","fileType":"cpp","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SPTokenizer/SPTokenizer.h\""},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"#include \"sp/SourceProcessor.h\""},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"#include \"catch.hpp\""},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003ciostream\u003e"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfstream\u003e"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cfilesystem\u003e"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"#include \u003cvector\u003e"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Test parser of SP on multipgole procedures\", \"[SourceProcessor]\") {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Program1.txt\";"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":12,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":13,"author":{"gitId":"hmanhduc2k"},"content":"    SourceProcessor sp(testFileName, pkbManager);"},{"lineNumber":14,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":15,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.parseSIMPLE());"},{"lineNumber":16,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.extractAndPopulate());"},{"lineNumber":17,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":19,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    auto variableReader \u003d pkbReaderManager-\u003egetVariableReader();"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    auto values1 \u003d variableReader-\u003egetAllVariables();"},{"lineNumber":22,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expectedValues1 \u003d {\"x\", \"y\", \"z\"};"},{"lineNumber":23,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(values1 \u003d\u003d expectedValues1);"},{"lineNumber":24,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    auto procedureReader \u003d pkbReaderManager-\u003egetProcedureReader();"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    auto values2 \u003d procedureReader-\u003egetAllProcedures();"},{"lineNumber":27,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    auto statementReader \u003d pkbReaderManager-\u003egetStatementReader();"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    auto values3 \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":30,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedValues3 \u003d {2, 6, 10};"},{"lineNumber":31,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(values3 \u003d\u003d expectedValues3);"},{"lineNumber":32,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":33,"author":{"gitId":"hmanhduc2k"},"content":"}"},{"lineNumber":34,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":35,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":36,"author":{"gitId":"hmanhduc2k"},"content":"TEST_CASE(\"Test parser of SP on one procedures and multiple statements\", \"[SourceProcessor]\") {"},{"lineNumber":37,"author":{"gitId":"hmanhduc2k"},"content":"    const std::string testFileName \u003d \"../../../../../tests/sp/ParserTest/Procedure1.txt\";"},{"lineNumber":38,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":39,"author":{"gitId":"hmanhduc2k"},"content":"    std::shared_ptr\u003cPKBManager\u003e pkbManager \u003d std::make_shared\u003cPKBManager\u003e();"},{"lineNumber":40,"author":{"gitId":"hmanhduc2k"},"content":"    SourceProcessor sp(testFileName, pkbManager);"},{"lineNumber":41,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":42,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.parseSIMPLE());"},{"lineNumber":43,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE_NOTHROW(sp.extractAndPopulate());"},{"lineNumber":44,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    std::shared_ptr\u003cPKBReaderManager\u003e pkbReaderManager \u003d pkbManager-\u003egetPKBReaderManager();"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    auto variableReader \u003d pkbReaderManager-\u003egetVariableReader();"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    auto values1 \u003d variableReader-\u003egetAllVariables();"},{"lineNumber":48,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cstd::string\u003e expectedValues1 \u003d { \"x\", \"y\", \"z\" };"},{"lineNumber":49,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(values1 \u003d\u003d expectedValues1);"},{"lineNumber":50,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    auto procedureReader \u003d pkbReaderManager-\u003egetProcedureReader();"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    auto values2 \u003d procedureReader-\u003egetAllProcedures();"},{"lineNumber":53,"author":{"gitId":"hmanhduc2k"},"content":""},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    auto statementReader \u003d pkbReaderManager-\u003egetStatementReader();"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"    auto values3 \u003d statementReader-\u003egetAllStatements();"},{"lineNumber":56,"author":{"gitId":"hmanhduc2k"},"content":"    std::unordered_set\u003cint\u003e expectedValues3 \u003d { 2, 3, 4 };"},{"lineNumber":57,"author":{"gitId":"hmanhduc2k"},"content":"    REQUIRE(values3 \u003d\u003d expectedValues3);"},{"lineNumber":58,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":44,"jianoway":14}},{"path":"Team19/Code19/tests/.gitignore","fileType":"gitignore","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"# Ignore any test cases and xml files"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"# Please put your test cases inside the correct directory; this is a scratch directory"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"*.xml"}],"authorContributionMap":{"github-classroom[bot]":3}},{"path":"Team19/Code19/tests/Sample_queries copy.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"1 - comment"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":" while w;"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":" Select w such that Parent(w, 7)"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":" none"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" 2 - comment"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" if ifs;"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" Select ifs such that Follows(5, ifs)"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" 6"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" 3 - comment"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" Select a such that Parent*(4, a)"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":" 5, 7, 8, 9, 11"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":" 4 - comment"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":" call c;"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":" Select c such that Follows*(1, c)"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":" 12"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":" 5 - comment"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":" stmt s;"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":" Select s such that Modifies(s, \"i\")"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":" 3, 4, 11, 12, 13, 14, 17"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":" 6 - comment"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":" variable v;"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":" Select v such that Uses(\"p\", v)"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":" i, x, y, z"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":" 7 - comment"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":" procedure p;"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":" Select p such that Calls(p, \"q\")"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":" Example, p"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":" 8 - comment"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":" procedure p;"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":" Select p such that Calls*(\"Example\", p)"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":" p, q"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":" 9 - comment"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":" prog_line n;"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":" Select n such that Next(4, n)"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":" 5, 12"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":" 10 - comment"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":" prog_line n;"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":" Select n such that Next*(n, 4)"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":" 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":" 11 - comment"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":" Select a such that Affects(a, 9)"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":" 2, 3, 5, 7, 11"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":" 12 - comment"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":" Select a such that Affects*(11, a)"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":" 9, 11"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":" 13 - comment"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":" Select a pattern a(\"z\", _\"x+i\")"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":" none"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":" 14 - comment"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":" Select a pattern a(_, _\"x + 1\"_)"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":" 7, 18, 23"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":" 15 - comment"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":" assign a;"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":" Select a pattern a(_, \" 3  +  2 \")"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":" none"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":" 16 - comment"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":" while w; variable v;"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":" Select w such that Modifies(w, v) with v.varName \u003d \"x\""},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":" 4, 14"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":" 17 - comment"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":" if ifs; variable v;"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":" Select v such that Uses(ifs, v) with ifs.stmt# \u003d 22"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":" x, z"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":" 18 - comment"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":" procedure p, q;"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":" Select BOOLEAN such that Calls(p, q) with q.procName \u003d \"p\" and p.procName \u003d \"Example\""},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":" TRUE"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":" 19 - comment"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":" if ifs; assign a1, a2; variable v1, v2;"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":" Select ifs such that Follows*(a1, ifs) and Follows*(ifs, a2) and Modifies(ifs, v1) and Uses(ifs, v2) with v1.varName \u003d v2.varName"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":" 6"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":" 20 - comment"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":" prog_line n; stmt s;"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":" Select s such that Next*(16, n) and Parent*(s, n)"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":" 13, 14"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":" 21 - comment"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":" prog_line n; assign a;"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":" Select a such that Affects*(a, n) and Next*(13, n)"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":" 17, 18, 19, 20"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":" 22 - comment"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":" procedure p, q; variable v;"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":" Select \u003cp, q, v\u003e such that Modifies(p, v) and Calls(p, q)"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":" Example p i, Example p x, Example p y, Example p z, Example q i, Example q x, Example q y, Example q z, p q i, p q x, p q z"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":" 23 - comment"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":" call c; assign a1, a2;"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":" Select BOOLEAN such that Follows*(_, c) and Affects(a1, a2) and Uses(a2, _)"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":" TRUE"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":" 24 - comment"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":" assign a1, a2; variable v;"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":" Select v pattern a1(v, _) such that Affects*(a1, a2) and Uses(a2, v)"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":" i, x, z"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":" 25 - comment"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":" prog_line n1, n2; variable v; call c;"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":" Select c such that Next*(n1, n2) and Modifies(n1, v) and Uses(n2, v) and Modifies(c, v)"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":" 10, 12, 16"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":" 5000"}],"authorContributionMap":{"jianoway":125}},{"path":"Team19/Code19/tests/Sample_queries.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"1 - comment"},{"lineNumber":2,"author":{"gitId":"winson8222"},"content":" stmt s;"},{"lineNumber":3,"author":{"gitId":"winson8222"},"content":" Select s"},{"lineNumber":4,"author":{"gitId":"winson8222"},"content":" 1"},{"lineNumber":5,"author":{"gitId":"winson8222"},"content":" 5000"},{"lineNumber":6,"author":{"gitId":"winson8222"},"content":"2 - comment"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" variable g;"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" Select g"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" z, y, x"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" 5000"},{"lineNumber":11,"author":{"gitId":"winson8222"},"content":"3 - comment"},{"lineNumber":12,"author":{"gitId":"winson8222"},"content":" stmt s;"},{"lineNumber":13,"author":{"gitId":"winson8222"},"content":" Select k"},{"lineNumber":14,"author":{"gitId":"winson8222"},"content":" semantic error at: k"},{"lineNumber":15,"author":{"gitId":"winson8222"},"content":" 5000"},{"lineNumber":16,"author":{"gitId":"winson8222"},"content":"4 - comment"},{"lineNumber":17,"author":{"gitId":"winson8222"},"content":" variable g, g;"},{"lineNumber":18,"author":{"gitId":"winson8222"},"content":" Select g"},{"lineNumber":19,"author":{"gitId":"winson8222"},"content":" semantic error at: g"},{"lineNumber":20,"author":{"gitId":"winson8222"},"content":" 5000"},{"lineNumber":21,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":22,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":23,"author":{"gitId":"winson8222"},"content":""},{"lineNumber":24,"author":{"gitId":"winson8222"},"content":""}],"authorContributionMap":{"winson8222":19,"jianoway":5}},{"path":"Team19/Code19/tests/Sample_source copy.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"procedure Example {"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"   x \u003d 2;"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"   z \u003d 3;"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"   i \u003d 5;"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"   while (i!\u003d0) {"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"     x \u003d x - 1;"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"     if (x\u003d\u003d1) then {"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"       z \u003d x + 1; }"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     else {"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"       y \u003d z + x; }"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     z \u003d z + x + i;"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     call q;"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     i \u003d i - 1; }"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"   call p; }"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":" procedure p {"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"   if (x\u003c0) then {"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     while (i\u003e0) {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"       x \u003d z * 3 + 2 * y;"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"       call q;"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"       i \u003d i - 1; }"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     x \u003d x + 1;"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     z \u003d x + z; }"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"   else {"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"     z \u003d 1; }"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"   z \u003d z + x + i; }"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":""},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":" procedure q {"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"   if (x\u003d\u003d1) then {"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     z \u003d x + 1; }"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"   else {"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     x \u003d z + x; } }"}],"authorContributionMap":{"jianoway":32}},{"path":"Team19/Code19/tests/Sample_source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"procedure Example {"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"   read x;"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"   read y;"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"   read z;}"}],"authorContributionMap":{"jianoway":4}},{"path":"Team19/Code19/tests/prototype_sample_SIMPLE_source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"procedure ABC"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":" {"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"   i\u003d1;\t\\\\1"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"  read b ;\t\\\\2"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":" \tc\u003d a   ;\\\\3"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" if (a \u003c  beta) then{\t\\\\4"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    while beta {\t\\\\5"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"         oSCar  \u003d 1 * beta + tmp;\t\\\\6"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"         while tmp {\t\\\\7"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"           oSCar \u003d I - (k + j1k * chArlie); }}\t\\\\8"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" \twhile (x!\u003d1) {\t\\\\9"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"         x \u003d x + 1;\t\\\\10"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"         if (left\u003d\u003d0) then {\t\\\\11"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"           while (right\u003d\u003d 5){\t\\\\12"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"             print Romeo;\t\\\\13"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"             b \u003d 0;\t\\\\14"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"             c \u003d delta    + l  * width + Romeo; }}\t\\\\15"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"         else {"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"             while (c\u003e1) {\t\\\\16"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"               c \u003d c -1;} \t\\\\17"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"             x \u003d x+ 1; }}}\t\\\\18"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":" else{"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":" \ta\u003d 2;}\t\\\\19"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":" }"}],"authorContributionMap":{"jianoway":24}},{"path":"Team19/Code19/tests/sp/ParserTest/AssignStmt1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure p {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"x \u003d 1;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":2,"Guan Wei":1}},{"path":"Team19/Code19/tests/sp/ParserTest/AssignStmt2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure assignmentWithExpressions {"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"\tread \u003d 1 + 3;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":3}},{"path":"Team19/Code19/tests/sp/ParserTest/CallStmt1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure p{call x;}"}],"authorContributionMap":{"GWphua":1}},{"path":"Team19/Code19/tests/sp/ParserTest/PrintStmt1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure testingPrint {"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"\tprint read;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":3}},{"path":"Team19/Code19/tests/sp/ParserTest/Procedure1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure procName {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tcall x;"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"\tprint y;"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"\tread z;"},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":5}},{"path":"Team19/Code19/tests/sp/ParserTest/Procedure2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure procedure {"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"\tprocedure \u003d 2;"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":3}},{"path":"Team19/Code19/tests/sp/ParserTest/Procedure_Invalid1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure invalidProcedure {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tcall y;"}],"authorContributionMap":{"Guan Wei":2}},{"path":"Team19/Code19/tests/sp/ParserTest/Procedure_Invalid2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure invalidProcedure "},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tcall y;"}],"authorContributionMap":{"Guan Wei":2}},{"path":"Team19/Code19/tests/sp/ParserTest/Program1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure proc1 {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tcall x;"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"procedure proc2 {"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"\tprint y;"},{"lineNumber":7,"author":{"gitId":"Guan Wei"},"content":"}"},{"lineNumber":8,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":9,"author":{"gitId":"Guan Wei"},"content":"procedure proc3 {"},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"\tread z;"},{"lineNumber":11,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":11}},{"path":"Team19/Code19/tests/sp/ParserTest/Program2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure procedure {"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"\tif (read \u003e 2) then {"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"\t\tif \u003d 3 + 1;"},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":"\t} else {"},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":"\t\tcall \u003d 3 + 2;"},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":"\t}"},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":7}},{"path":"Team19/Code19/tests/sp/ParserTest/Program_Invalid1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure proc1 {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tprint x;"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":""},{"lineNumber":4,"author":{"gitId":"Guan Wei"},"content":"procedure proc2 "},{"lineNumber":5,"author":{"gitId":"Guan Wei"},"content":"\tcall y;"},{"lineNumber":6,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":6}},{"path":"Team19/Code19/tests/sp/ParserTest/ReadStmt1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure testingRead1 {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tread readableVariable;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":2,"Guan Wei":1}},{"path":"Team19/Code19/tests/sp/ParserTest/ReadStmt2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure testingRead2 {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\tread read;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":2,"Guan Wei":1}},{"path":"Team19/Code19/tests/sp/ParserTest/StmtList1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure proc{"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"call x;"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"print x;"},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":"read x;"},{"lineNumber":5,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":6,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":7,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":8,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":9,"author":{"gitId":"GWphua"},"content":""},{"lineNumber":10,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"GWphua":8,"Guan Wei":2}},{"path":"Team19/Code19/tests/sp/ParserTest/StmtList_Invalid1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GWphua"},"content":"procedure proc {"},{"lineNumber":2,"author":{"gitId":"GWphua"},"content":"\tcall variable123;"},{"lineNumber":3,"author":{"gitId":"GWphua"},"content":"\tprint xyz call;"},{"lineNumber":4,"author":{"gitId":"GWphua"},"content":"}"}],"authorContributionMap":{"GWphua":4}},{"path":"Team19/Code19/tests/sp/TokenizerTest/invalid1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"procedure x {"},{"lineNumber":2,"author":{"gitId":"Guan Wei"},"content":"\t123variable \u003d 1;"},{"lineNumber":3,"author":{"gitId":"Guan Wei"},"content":"}"}],"authorContributionMap":{"Guan Wei":3}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"x \u003d 1;"}],"authorContributionMap":{"hmanhduc2k":1}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure procedure {"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"   x \u003d 1;"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"   read y12;"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"   call abc;"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"   if (x \u003e y) then {"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"\t  z \u003d x - y;"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"   } else {"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"\t  z \u003d y - x;"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"   }"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"}"}],"authorContributionMap":{"hmanhduc2k":10}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure p {"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"  if (x\u003c0) then {"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"    while (i\u003e0) {"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"      x \u003d z * 3 + 2 * y;"},{"lineNumber":5,"author":{"gitId":"hmanhduc2k"},"content":"      call q;"},{"lineNumber":6,"author":{"gitId":"hmanhduc2k"},"content":"      i \u003d i - 1; }"},{"lineNumber":7,"author":{"gitId":"hmanhduc2k"},"content":"    x \u003d x + 1;"},{"lineNumber":8,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d x + z; }"},{"lineNumber":9,"author":{"gitId":"hmanhduc2k"},"content":"  else {"},{"lineNumber":10,"author":{"gitId":"hmanhduc2k"},"content":"    z \u003d 1; }"},{"lineNumber":11,"author":{"gitId":"hmanhduc2k"},"content":"  z \u003d z + x + i; }"}],"authorContributionMap":{"hmanhduc2k":11}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile4.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Guan Wei"},"content":"if then else read call print while procedure variable"}],"authorContributionMap":{"Guan Wei":1}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile5.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"000abc \u003d 10+e;"}],"authorContributionMap":{"hmanhduc2k":1}},{"path":"Team19/Code19/tests/sp/TokenizerTest/sourcefile6.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hmanhduc2k"},"content":"procedure procedure {}"},{"lineNumber":2,"author":{"gitId":"hmanhduc2k"},"content":"call call;"},{"lineNumber":3,"author":{"gitId":"hmanhduc2k"},"content":"read read;"},{"lineNumber":4,"author":{"gitId":"hmanhduc2k"},"content":"print print;"}],"authorContributionMap":{"hmanhduc2k":4}},{"path":"Team19/Tests19/Sample_queries.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"1 - comment"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"while w;"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"Select w such that Parent(w, 7)"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"none"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"2 - comment"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"if ifs;"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"Select ifs such that Follows(5, ifs)"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"6"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"3 - comment"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"Select a such that Parent*(4, a)"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"5, 7, 8, 9, 11"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"4 - comment"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"call c;"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"Select c such that Follows*(1, c)"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"12"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"5 - comment"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"stmt s;"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"Select s such that Modifies(s, \"i\")"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"3, 4, 11, 12, 13, 14, 17"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"6 - comment"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"variable v;"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"Select v such that Uses(\"p\", v)"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"i, x, y, z"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"7 - comment"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"procedure p;"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"Select p such that Calls(p, \"q\")"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"Example, p"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"8 - comment"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"procedure p;"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":"Select p such that Calls*(\"Example\", p)"},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"p, q"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"9 - comment"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"prog_line n;"},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":"Select n such that Next(4, n)"},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":"5, 12"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"10 - comment"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":"prog_line n;"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":"Select n such that Next*(n, 4)"},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":"11 - comment"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":"Select a such that Affects(a, 9)"},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":"2, 3, 5, 7, 11"},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"12 - comment"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":"Select a such that Affects*(11, a)"},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":"9, 11"},{"lineNumber":60,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":61,"author":{"gitId":"github-classroom[bot]"},"content":"13 - comment"},{"lineNumber":62,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":63,"author":{"gitId":"github-classroom[bot]"},"content":"Select a pattern a(\"z\", _\"x+i\")"},{"lineNumber":64,"author":{"gitId":"github-classroom[bot]"},"content":"none"},{"lineNumber":65,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":66,"author":{"gitId":"github-classroom[bot]"},"content":"14 - comment"},{"lineNumber":67,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":68,"author":{"gitId":"github-classroom[bot]"},"content":"Select a pattern a(_, _\"x + 1\"_)"},{"lineNumber":69,"author":{"gitId":"github-classroom[bot]"},"content":"7, 18, 23"},{"lineNumber":70,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":71,"author":{"gitId":"github-classroom[bot]"},"content":"15 - comment"},{"lineNumber":72,"author":{"gitId":"github-classroom[bot]"},"content":"assign a;"},{"lineNumber":73,"author":{"gitId":"github-classroom[bot]"},"content":"Select a pattern a(_, \" 3  +  2 \")"},{"lineNumber":74,"author":{"gitId":"github-classroom[bot]"},"content":"none"},{"lineNumber":75,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":76,"author":{"gitId":"github-classroom[bot]"},"content":"16 - comment"},{"lineNumber":77,"author":{"gitId":"github-classroom[bot]"},"content":"while w; variable v;"},{"lineNumber":78,"author":{"gitId":"github-classroom[bot]"},"content":"Select w such that Modifies(w, v) with v.varName \u003d \"x\""},{"lineNumber":79,"author":{"gitId":"github-classroom[bot]"},"content":"4, 14"},{"lineNumber":80,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":81,"author":{"gitId":"github-classroom[bot]"},"content":"17 - comment"},{"lineNumber":82,"author":{"gitId":"github-classroom[bot]"},"content":"if ifs; variable v;"},{"lineNumber":83,"author":{"gitId":"github-classroom[bot]"},"content":"Select v such that Uses(ifs, v) with ifs.stmt# \u003d 22"},{"lineNumber":84,"author":{"gitId":"github-classroom[bot]"},"content":"x, z"},{"lineNumber":85,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":86,"author":{"gitId":"github-classroom[bot]"},"content":"18 - comment"},{"lineNumber":87,"author":{"gitId":"github-classroom[bot]"},"content":"procedure p, q;"},{"lineNumber":88,"author":{"gitId":"github-classroom[bot]"},"content":"Select BOOLEAN such that Calls(p, q) with q.procName \u003d \"p\" and p.procName \u003d \"Example\""},{"lineNumber":89,"author":{"gitId":"github-classroom[bot]"},"content":"TRUE"},{"lineNumber":90,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":91,"author":{"gitId":"github-classroom[bot]"},"content":"19 - comment"},{"lineNumber":92,"author":{"gitId":"github-classroom[bot]"},"content":"if ifs; assign a1, a2; variable v1, v2;"},{"lineNumber":93,"author":{"gitId":"github-classroom[bot]"},"content":"Select ifs such that Follows*(a1, ifs) and Follows*(ifs, a2) and Modifies(ifs, v1) and Uses(ifs, v2) with v1.varName \u003d v2.varName"},{"lineNumber":94,"author":{"gitId":"github-classroom[bot]"},"content":"6"},{"lineNumber":95,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":96,"author":{"gitId":"github-classroom[bot]"},"content":"20 - comment"},{"lineNumber":97,"author":{"gitId":"github-classroom[bot]"},"content":"prog_line n; stmt s;"},{"lineNumber":98,"author":{"gitId":"github-classroom[bot]"},"content":"Select s such that Next*(16, n) and Parent*(s, n)"},{"lineNumber":99,"author":{"gitId":"github-classroom[bot]"},"content":"13, 14"},{"lineNumber":100,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":101,"author":{"gitId":"github-classroom[bot]"},"content":"21 - comment"},{"lineNumber":102,"author":{"gitId":"github-classroom[bot]"},"content":"prog_line n; assign a;"},{"lineNumber":103,"author":{"gitId":"github-classroom[bot]"},"content":"Select a such that Affects*(a, n) and Next*(13, n)"},{"lineNumber":104,"author":{"gitId":"github-classroom[bot]"},"content":"17, 18, 19, 20"},{"lineNumber":105,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":106,"author":{"gitId":"github-classroom[bot]"},"content":"22 - comment"},{"lineNumber":107,"author":{"gitId":"github-classroom[bot]"},"content":"procedure p, q; variable v;"},{"lineNumber":108,"author":{"gitId":"github-classroom[bot]"},"content":"Select \u003cp, q, v\u003e such that Modifies(p, v) and Calls(p, q)"},{"lineNumber":109,"author":{"gitId":"github-classroom[bot]"},"content":"Example p i, Example p x, Example p y, Example p z, Example q i, Example q x, Example q y, Example q z, p q i, p q x, p q z"},{"lineNumber":110,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":111,"author":{"gitId":"github-classroom[bot]"},"content":"23 - comment"},{"lineNumber":112,"author":{"gitId":"github-classroom[bot]"},"content":"call c; assign a1, a2;"},{"lineNumber":113,"author":{"gitId":"github-classroom[bot]"},"content":"Select BOOLEAN such that Follows*(_, c) and Affects(a1, a2) and Uses(a2, _)"},{"lineNumber":114,"author":{"gitId":"github-classroom[bot]"},"content":"TRUE"},{"lineNumber":115,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":116,"author":{"gitId":"github-classroom[bot]"},"content":"24 - comment"},{"lineNumber":117,"author":{"gitId":"github-classroom[bot]"},"content":"assign a1, a2; variable v;"},{"lineNumber":118,"author":{"gitId":"github-classroom[bot]"},"content":"Select v pattern a1(v, _) such that Affects*(a1, a2) and Uses(a2, v)"},{"lineNumber":119,"author":{"gitId":"github-classroom[bot]"},"content":"i, x, z"},{"lineNumber":120,"author":{"gitId":"github-classroom[bot]"},"content":"5000"},{"lineNumber":121,"author":{"gitId":"github-classroom[bot]"},"content":"25 - comment"},{"lineNumber":122,"author":{"gitId":"github-classroom[bot]"},"content":"prog_line n1, n2; variable v; call c;"},{"lineNumber":123,"author":{"gitId":"github-classroom[bot]"},"content":"Select c such that Next*(n1, n2) and Modifies(n1, v) and Uses(n2, v) and Modifies(c, v)"},{"lineNumber":124,"author":{"gitId":"github-classroom[bot]"},"content":"10, 12, 16"},{"lineNumber":125,"author":{"gitId":"github-classroom[bot]"},"content":"5000"}],"authorContributionMap":{"github-classroom[bot]":125}},{"path":"Team19/Tests19/Sample_source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"procedure Example {"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"  x \u003d 2;"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"  z \u003d 3;"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":"  i \u003d 5;"},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"  while (i!\u003d0) {"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"    x \u003d x - 1;"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"    if (x\u003d\u003d1) then {"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"      z \u003d x + 1; }"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":"    else {"},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"      y \u003d z + x; }"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"    z \u003d z + x + i;"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"    call q;"},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"    i \u003d i - 1; }"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"  call p; }"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"procedure p {"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"  if (x\u003c0) then {"},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"    while (i\u003e0) {"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"      x \u003d z * 3 + 2 * y;"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"      call q;"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"      i \u003d i - 1; }"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":"    x \u003d x + 1;"},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"    z \u003d x + z; }"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":"  else {"},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"    z \u003d 1; }"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"  z \u003d z + x + i; }"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"procedure q {"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":"  if (x\u003d\u003d1) then {"},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    z \u003d x + 1; }"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":"  else {"},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"    x \u003d z + x; } }"}],"authorContributionMap":{"github-classroom[bot]":32}},{"path":"Team19/Tests19/out.xml","fileType":"xml","lines":[{"lineNumber":1,"author":{"gitId":"MSI\\vegit"},"content":"\u003c?xml-stylesheet type\u003d\"text/xsl\" href\u003d\"analysis.xsl\"?\u003e"},{"lineNumber":2,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctest_results\u003e"},{"lineNumber":3,"author":{"gitId":"MSI\\vegit"},"content":"\u003cinfo\u003e"},{"lineNumber":4,"author":{"gitId":"MSI\\vegit"},"content":"\u003cname\u003eautotester\u003c/name\u003e\u003cparsing_time_taken\u003e3.000000\u003c/parsing_time_taken\u003e"},{"lineNumber":5,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/info\u003e"},{"lineNumber":6,"author":{"gitId":"MSI\\vegit"},"content":"\u003cqueries\u003e"},{"lineNumber":7,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":8,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Parent\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e1\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[while w; Select w such that Parent(w, 7)]]\u003e\u003c/querystr\u003e"},{"lineNumber":9,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":10,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":11,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e13.000000\u003c/time_taken\u003e"},{"lineNumber":12,"author":{"gitId":"MSI\\vegit"},"content":"\u003cpassed/\u003e"},{"lineNumber":13,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":14,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":15,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Follows\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e2\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; Select ifs such that Follows(5, ifs)]]\u003e\u003c/querystr\u003e"},{"lineNumber":16,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":17,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e6\u003c/correct\u003e"},{"lineNumber":18,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e9.000000\u003c/time_taken\u003e"},{"lineNumber":19,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":20,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e6\u003c/missing\u003e"},{"lineNumber":21,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":22,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":23,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":24,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":25,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":26,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":27,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":28,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":29,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":30,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":31,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Parentstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e3\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Parent*(4, a)]]\u003e\u003c/querystr\u003e"},{"lineNumber":32,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":33,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e5,7,8,9,11\u003c/correct\u003e"},{"lineNumber":34,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e11.000000\u003c/time_taken\u003e"},{"lineNumber":35,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":36,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11,5,7,8,9\u003c/missing\u003e"},{"lineNumber":37,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":38,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":39,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e5\u003c/expected\u003e"},{"lineNumber":40,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":41,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e5\u003c/missing\u003e"},{"lineNumber":42,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":43,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":44,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":45,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":46,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":47,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Followsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e4\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[call c; Select c such that Follows*(1, c)]]\u003e\u003c/querystr\u003e"},{"lineNumber":48,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":49,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e12\u003c/correct\u003e"},{"lineNumber":50,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e9.000000\u003c/time_taken\u003e"},{"lineNumber":51,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":52,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e12\u003c/missing\u003e"},{"lineNumber":53,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":54,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":55,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":56,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":57,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":58,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":59,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":60,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":61,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":62,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":63,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e5\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[stmt s; Select s such that Modifies(s, \"i\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":64,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":65,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e3,4,11,12,13,14,17\u003c/correct\u003e"},{"lineNumber":66,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e11.000000\u003c/time_taken\u003e"},{"lineNumber":67,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":68,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11,12,13,14,17,3,4\u003c/missing\u003e"},{"lineNumber":69,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":70,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":71,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e7\u003c/expected\u003e"},{"lineNumber":72,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":73,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e7\u003c/missing\u003e"},{"lineNumber":74,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":75,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":76,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":77,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":78,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":79,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e6\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[variable v; Select v such that Uses(\"p\", v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":80,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":81,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003ei,x,y,z\u003c/correct\u003e"},{"lineNumber":82,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e10.000000\u003c/time_taken\u003e"},{"lineNumber":83,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":84,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003ei,x,y,z\u003c/missing\u003e"},{"lineNumber":85,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":86,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":87,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e4\u003c/expected\u003e"},{"lineNumber":88,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":89,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e4\u003c/missing\u003e"},{"lineNumber":90,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":91,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":92,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":93,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":94,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":95,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Calls\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e7\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p; Select p such that Calls(p, \"q\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":96,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":97,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003eExample,p\u003c/correct\u003e"},{"lineNumber":98,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e11.000000\u003c/time_taken\u003e"},{"lineNumber":99,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":100,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003eExample,p\u003c/missing\u003e"},{"lineNumber":101,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":102,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":103,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":104,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":105,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":106,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":107,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":108,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":109,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":110,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":111,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Callsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e8\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p; Select p such that Calls*(\"Example\", p)]]\u003e\u003c/querystr\u003e"},{"lineNumber":112,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":113,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003ep,q\u003c/correct\u003e"},{"lineNumber":114,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e9.000000\u003c/time_taken\u003e"},{"lineNumber":115,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":116,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003ep,q\u003c/missing\u003e"},{"lineNumber":117,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":118,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":119,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":120,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":121,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":122,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":123,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":124,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":125,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":126,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":127,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Next\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e9\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; Select n such that Next(4, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":128,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":129,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e5,12\u003c/correct\u003e"},{"lineNumber":130,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e11.000000\u003c/time_taken\u003e"},{"lineNumber":131,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":132,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e12,5\u003c/missing\u003e"},{"lineNumber":133,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":134,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":135,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":136,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":137,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":138,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":139,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":140,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":141,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":142,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":143,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e10\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; Select n such that Next*(n, 4)]]\u003e\u003c/querystr\u003e"},{"lineNumber":144,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":145,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e1,2,3,4,5,6,7,8,9,10,11\u003c/correct\u003e"},{"lineNumber":146,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e14.000000\u003c/time_taken\u003e"},{"lineNumber":147,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":148,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1,10,11,2,3,4,5,6,7,8,9\u003c/missing\u003e"},{"lineNumber":149,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":150,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":151,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e11\u003c/expected\u003e"},{"lineNumber":152,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":153,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11\u003c/missing\u003e"},{"lineNumber":154,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":155,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":156,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":157,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":158,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":159,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Affects\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e11\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Affects(a, 9)]]\u003e\u003c/querystr\u003e"},{"lineNumber":160,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":161,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e2,3,5,7,11\u003c/correct\u003e"},{"lineNumber":162,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e8.000000\u003c/time_taken\u003e"},{"lineNumber":163,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":164,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11,2,3,5,7\u003c/missing\u003e"},{"lineNumber":165,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":166,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":167,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e5\u003c/expected\u003e"},{"lineNumber":168,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":169,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e5\u003c/missing\u003e"},{"lineNumber":170,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":171,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":172,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":173,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":174,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":175,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e12\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a such that Affects*(11, a)]]\u003e\u003c/querystr\u003e"},{"lineNumber":176,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":177,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e9,11\u003c/correct\u003e"},{"lineNumber":178,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e7.000000\u003c/time_taken\u003e"},{"lineNumber":179,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":180,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11,9\u003c/missing\u003e"},{"lineNumber":181,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":182,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":183,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":184,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":185,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":186,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":187,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":188,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":189,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":190,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":191,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"1\" Pattern\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e13\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(\"z\", _\"x+i\")]]\u003e\u003c/querystr\u003e"},{"lineNumber":192,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":193,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":194,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e8.000000\u003c/time_taken\u003e"},{"lineNumber":195,"author":{"gitId":"MSI\\vegit"},"content":"\u003cpassed/\u003e"},{"lineNumber":196,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":197,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":198,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"3\" Pattern\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e14\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(_, _\"x + 1\"_)]]\u003e\u003c/querystr\u003e"},{"lineNumber":199,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":200,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e7,18,23\u003c/correct\u003e"},{"lineNumber":201,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e13.000000\u003c/time_taken\u003e"},{"lineNumber":202,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":203,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e18,23,7\u003c/missing\u003e"},{"lineNumber":204,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":205,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":206,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":207,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":208,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":209,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":210,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":211,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":212,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":213,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":214,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" UnnamedVar\u003d\"1\" Pattern\u003d\"1\" CondNum\u003d\"3\" RelNum\u003d\"0\" comment\u003d\"comment\"\u003e15\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a; Select a pattern a(_, \" 3  +  2 \")]]\u003e\u003c/querystr\u003e"},{"lineNumber":215,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":216,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e\u003c/correct\u003e"},{"lineNumber":217,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e18.000000\u003c/time_taken\u003e"},{"lineNumber":218,"author":{"gitId":"MSI\\vegit"},"content":"\u003cpassed/\u003e"},{"lineNumber":219,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":220,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":221,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e16\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[while w; variable v; Select w such that Modifies(w, v) with v.varName \u003d \"x\"]]\u003e\u003c/querystr\u003e"},{"lineNumber":222,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":223,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e4,14\u003c/correct\u003e"},{"lineNumber":224,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e4.000000\u003c/time_taken\u003e"},{"lineNumber":225,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":226,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e14,4\u003c/missing\u003e"},{"lineNumber":227,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":228,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":229,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":230,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":231,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":232,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":233,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":234,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":235,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":236,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":237,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e17\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; variable v; Select v such that Uses(ifs, v) with ifs.stmt# \u003d 22]]\u003e\u003c/querystr\u003e"},{"lineNumber":238,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":239,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003ex,z\u003c/correct\u003e"},{"lineNumber":240,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e5.000000\u003c/time_taken\u003e"},{"lineNumber":241,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":242,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003ex,z\u003c/missing\u003e"},{"lineNumber":243,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":244,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":245,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":246,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":247,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":248,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":249,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":250,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":251,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":252,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":253,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnBoolean\u003d\"1\" Calls\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"1\" comment\u003d\"comment\"\u003e18\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p, q; Select BOOLEAN such that Calls(p, q) with q.procName \u003d \"p\" and p.procName \u003d \"Example\"]]\u003e\u003c/querystr\u003e"},{"lineNumber":254,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":255,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003eTRUE\u003c/correct\u003e"},{"lineNumber":256,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e4.000000\u003c/time_taken\u003e"},{"lineNumber":257,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":258,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003eTRUE\u003c/missing\u003e"},{"lineNumber":259,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":260,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":261,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":262,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":263,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":264,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":265,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":266,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":267,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":268,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":269,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Followsstar\u003d\"2\" Modifies\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" With\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"4\" comment\u003d\"comment\"\u003e19\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[if ifs; assign a1, a2; variable v1, v2; Select ifs such that Follows*(a1, ifs) and Follows*(ifs, a2) and Modifies(ifs, v1) and Uses(ifs, v2) with v1.varName \u003d v2.varName]]\u003e\u003c/querystr\u003e"},{"lineNumber":270,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":271,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e6\u003c/correct\u003e"},{"lineNumber":272,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e5.000000\u003c/time_taken\u003e"},{"lineNumber":273,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":274,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e6\u003c/missing\u003e"},{"lineNumber":275,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":276,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":277,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":278,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":279,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":280,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":281,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":282,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":283,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":284,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":285,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Nextstar\u003d\"1\" Parentstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e20\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; stmt s; Select s such that Next*(16, n) and Parent*(s, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":286,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":287,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e13,14\u003c/correct\u003e"},{"lineNumber":288,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e8.000000\u003c/time_taken\u003e"},{"lineNumber":289,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":290,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e13,14\u003c/missing\u003e"},{"lineNumber":291,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":292,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":293,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e2\u003c/expected\u003e"},{"lineNumber":294,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":295,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e2\u003c/missing\u003e"},{"lineNumber":296,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":297,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":298,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":299,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":300,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":301,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"5\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e21\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n; assign a; Select a such that Affects*(a, n) and Next*(13, n)]]\u003e\u003c/querystr\u003e"},{"lineNumber":302,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":303,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e17,18,19,20\u003c/correct\u003e"},{"lineNumber":304,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e10.000000\u003c/time_taken\u003e"},{"lineNumber":305,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":306,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e17,18,19,20\u003c/missing\u003e"},{"lineNumber":307,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":308,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":309,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e4\u003c/expected\u003e"},{"lineNumber":310,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":311,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e4\u003c/missing\u003e"},{"lineNumber":312,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":313,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":314,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":315,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":316,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":317,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Calls\u003d\"1\" Modifies\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"4\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e22\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[procedure p, q; variable v; Select \u003cp, q, v\u003e such that Modifies(p, v) and Calls(p, q)]]\u003e\u003c/querystr\u003e"},{"lineNumber":318,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":319,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003eExample p i,Example p x,Example p y,Example p z,Example q i,Example q x,Example q y,Example q z,p q i,p q x,p q z\u003c/correct\u003e"},{"lineNumber":320,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e7.000000\u003c/time_taken\u003e"},{"lineNumber":321,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":322,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003eExample p i,Example p x,Example p y,Example p z,Example q i,Example q x,Example q y,Example q z,p q i,p q x,p q z\u003c/missing\u003e"},{"lineNumber":323,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":324,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":325,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e11\u003c/expected\u003e"},{"lineNumber":326,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":327,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e11\u003c/missing\u003e"},{"lineNumber":328,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":329,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":330,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":331,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":332,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":333,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid Affects\u003d\"1\" ReturnBoolean\u003d\"1\" Followsstar\u003d\"1\" UnnamedVar\u003d\"2\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"3\" comment\u003d\"comment\"\u003e23\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[call c; assign a1, a2; Select BOOLEAN such that Follows*(_, c) and Affects(a1, a2) and Uses(a2, _)]]\u003e\u003c/querystr\u003e"},{"lineNumber":334,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":335,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003eTRUE\u003c/correct\u003e"},{"lineNumber":336,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e9.000000\u003c/time_taken\u003e"},{"lineNumber":337,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":338,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003eTRUE\u003c/missing\u003e"},{"lineNumber":339,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":340,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":341,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e1\u003c/expected\u003e"},{"lineNumber":342,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":343,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e1\u003c/missing\u003e"},{"lineNumber":344,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":345,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":346,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":347,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":348,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":349,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Affectsstar\u003d\"1\" UnnamedVar\u003d\"1\" Uses\u003d\"1\" Pattern\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"6\" RelNum\u003d\"2\" comment\u003d\"comment\"\u003e24\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[assign a1, a2; variable v; Select v pattern a1(v, _) such that Affects*(a1, a2) and Uses(a2, v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":350,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":351,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003ei,x,z\u003c/correct\u003e"},{"lineNumber":352,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e7.000000\u003c/time_taken\u003e"},{"lineNumber":353,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":354,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003ei,x,z\u003c/missing\u003e"},{"lineNumber":355,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":356,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":357,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":358,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":359,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":360,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":361,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":362,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":363,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":364,"author":{"gitId":"MSI\\vegit"},"content":"\u003cquery\u003e"},{"lineNumber":365,"author":{"gitId":"MSI\\vegit"},"content":"\u003cid ReturnTuple\u003d\"1\" Modifies\u003d\"2\" Nextstar\u003d\"1\" UnnamedVar\u003d\"1\" Uses\u003d\"1\" SuchThat\u003d\"1\" CondNum\u003d\"7\" RelNum\u003d\"4\" comment\u003d\"comment\"\u003e25\u003c/id\u003e\u003cquerystr\u003e\u003c![CDATA[prog_line n1, n2; variable v; call c; Select c such that Next*(n1, n2) and Modifies(n1, v) and Uses(n2, v) and Modifies(c, v)]]\u003e\u003c/querystr\u003e"},{"lineNumber":366,"author":{"gitId":"MSI\\vegit"},"content":"\u003cstuans\u003e\u003c/stuans\u003e"},{"lineNumber":367,"author":{"gitId":"MSI\\vegit"},"content":"\u003ccorrect\u003e10,12,16\u003c/correct\u003e"},{"lineNumber":368,"author":{"gitId":"MSI\\vegit"},"content":"\u003ctime_taken\u003e11.000000\u003c/time_taken\u003e"},{"lineNumber":369,"author":{"gitId":"MSI\\vegit"},"content":"\u003cfailed\u003e"},{"lineNumber":370,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e10,12,16\u003c/missing\u003e"},{"lineNumber":371,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e\u003c/additional\u003e"},{"lineNumber":372,"author":{"gitId":"MSI\\vegit"},"content":"\u003csummary\u003e"},{"lineNumber":373,"author":{"gitId":"MSI\\vegit"},"content":"\u003cexpected\u003e3\u003c/expected\u003e"},{"lineNumber":374,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmatched\u003e0\u003c/matched\u003e"},{"lineNumber":375,"author":{"gitId":"MSI\\vegit"},"content":"\u003cmissing\u003e3\u003c/missing\u003e"},{"lineNumber":376,"author":{"gitId":"MSI\\vegit"},"content":"\u003cadditional\u003e0\u003c/additional\u003e"},{"lineNumber":377,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/summary\u003e"},{"lineNumber":378,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/failed\u003e"},{"lineNumber":379,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/query\u003e"},{"lineNumber":380,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/queries\u003e"},{"lineNumber":381,"author":{"gitId":"MSI\\vegit"},"content":"\u003c/test_results\u003e"}],"authorContributionMap":{"MSI\\vegit":381}},{"path":"check-submission.py","fileType":"py","lines":[{"lineNumber":1,"author":{"gitId":"github-classroom[bot]"},"content":"#!/usr/bin/env python3"},{"lineNumber":2,"author":{"gitId":"github-classroom[bot]"},"content":"# Author: Han Liang Wee Eric"},{"lineNumber":3,"author":{"gitId":"github-classroom[bot]"},"content":"# GPL License"},{"lineNumber":4,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":5,"author":{"gitId":"github-classroom[bot]"},"content":"import os"},{"lineNumber":6,"author":{"gitId":"github-classroom[bot]"},"content":"import re"},{"lineNumber":7,"author":{"gitId":"github-classroom[bot]"},"content":"import sys"},{"lineNumber":8,"author":{"gitId":"github-classroom[bot]"},"content":"import glob"},{"lineNumber":9,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":10,"author":{"gitId":"github-classroom[bot]"},"content":"def check_compliance(compliance, sub_dir_files, path):"},{"lineNumber":11,"author":{"gitId":"github-classroom[bot]"},"content":"    sub_dirs \u003d {}"},{"lineNumber":12,"author":{"gitId":"github-classroom[bot]"},"content":"    "},{"lineNumber":13,"author":{"gitId":"github-classroom[bot]"},"content":"    # check which category is it in"},{"lineNumber":14,"author":{"gitId":"github-classroom[bot]"},"content":"    for cat, req in compliance.items():"},{"lineNumber":15,"author":{"gitId":"github-classroom[bot]"},"content":"        # Sort out the 3 files"},{"lineNumber":16,"author":{"gitId":"github-classroom[bot]"},"content":"        for f in sub_dir_files:"},{"lineNumber":17,"author":{"gitId":"github-classroom[bot]"},"content":"    "},{"lineNumber":18,"author":{"gitId":"github-classroom[bot]"},"content":"            if type(req)\u003d\u003dstr and f\u003d\u003dreq:"},{"lineNumber":19,"author":{"gitId":"github-classroom[bot]"},"content":"                sub_dirs[cat] \u003d os.path.join(path, f)"},{"lineNumber":20,"author":{"gitId":"github-classroom[bot]"},"content":"            elif type(req)\u003d\u003dset and f in req:"},{"lineNumber":21,"author":{"gitId":"github-classroom[bot]"},"content":"                sub_dirs[cat] \u003d os.path.join(path, f)"},{"lineNumber":22,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":23,"author":{"gitId":"github-classroom[bot]"},"content":"    missing_cats \u003d set(compliance)-set(sub_dirs)"},{"lineNumber":24,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":25,"author":{"gitId":"github-classroom[bot]"},"content":"    if len(missing_cats) !\u003d 0:"},{"lineNumber":26,"author":{"gitId":"github-classroom[bot]"},"content":"        for cat in missing_cats:"},{"lineNumber":27,"author":{"gitId":"github-classroom[bot]"},"content":"            print(f\"[Failed] - Missing {cat}: {compliance[cat]}\")"},{"lineNumber":28,"author":{"gitId":"github-classroom[bot]"},"content":"        sys.exit()"},{"lineNumber":29,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":30,"author":{"gitId":"github-classroom[bot]"},"content":"    return sub_dirs"},{"lineNumber":31,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":32,"author":{"gitId":"github-classroom[bot]"},"content":"def is_empty(dir_name, base_path):"},{"lineNumber":33,"author":{"gitId":"github-classroom[bot]"},"content":"    if dir_name in os.listdir(base_path):"},{"lineNumber":34,"author":{"gitId":"github-classroom[bot]"},"content":"        if len(os.listdir(os.path.join(base_path, dir_name))) !\u003d 0:"},{"lineNumber":35,"author":{"gitId":"github-classroom[bot]"},"content":"            print(\"[Failed] - Directory {} should be empty, but its not.\".format(dir_name))"},{"lineNumber":36,"author":{"gitId":"github-classroom[bot]"},"content":"            sys.exit()"},{"lineNumber":37,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Passed] - Directory {} is clean.\".format(dir_name))"},{"lineNumber":38,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":39,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"This script will check for basic compliance with the submission requirements.\")"},{"lineNumber":40,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"Disclaimer: you are still responsible for your submission, this check is by\")"},{"lineNumber":41,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"no means complete.\")"},{"lineNumber":42,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"-\"*80)"},{"lineNumber":43,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":44,"author":{"gitId":"github-classroom[bot]"},"content":"files \u003d [f for f in os.listdir(\u0027.\u0027) if re.match(r\u0027Team[0-9][0-9]\u0027, f)]"},{"lineNumber":45,"author":{"gitId":"github-classroom[bot]"},"content":"if len(files) \u003e 1:"},{"lineNumber":46,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Failed] - This script cannot be executed with multiple teams\u0027 folders.\")"},{"lineNumber":47,"author":{"gitId":"github-classroom[bot]"},"content":"    sys.exit()"},{"lineNumber":48,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":49,"author":{"gitId":"github-classroom[bot]"},"content":"if len(files) \u003d\u003d 0:"},{"lineNumber":50,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Failed] - This script cannot find the Team folder, please make sure it exist and named correctly.\")"},{"lineNumber":51,"author":{"gitId":"github-classroom[bot]"},"content":"    sys.exit()"},{"lineNumber":52,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":53,"author":{"gitId":"github-classroom[bot]"},"content":"# Single Team folder"},{"lineNumber":54,"author":{"gitId":"github-classroom[bot]"},"content":"team_folder \u003d files[0]"},{"lineNumber":55,"author":{"gitId":"github-classroom[bot]"},"content":"team_no_str \u003d team_folder[4:]"},{"lineNumber":56,"author":{"gitId":"github-classroom[bot]"},"content":"team_no \u003d int(team_no_str)"},{"lineNumber":57,"author":{"gitId":"github-classroom[bot]"},"content":"if team_no \u003c 1:"},{"lineNumber":58,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Failed] - Team number must be valid.\")"},{"lineNumber":59,"author":{"gitId":"github-classroom[bot]"},"content":"    sys.exit()"},{"lineNumber":60,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":61,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"[Passed] - Single team folder detected, Team number is {}.\".format(team_no) )"},{"lineNumber":62,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":63,"author":{"gitId":"github-classroom[bot]"},"content":"root_dir_compliance \u003d {"},{"lineNumber":64,"author":{"gitId":"github-classroom[bot]"},"content":"    \"readme\" : \"README.md\""},{"lineNumber":65,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":66,"author":{"gitId":"github-classroom[bot]"},"content":"root_files \u003d check_compliance(root_dir_compliance, os.listdir(\u0027.\u0027), \u0027.\u0027)"},{"lineNumber":67,"author":{"gitId":"github-classroom[bot]"},"content":"for f in root_files:"},{"lineNumber":68,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Passed] - Found correctly formatted {}: {}\".format(f, root_files[f]))"},{"lineNumber":69,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":70,"author":{"gitId":"github-classroom[bot]"},"content":"sub_dir_files \u003d [ f for f in os.listdir(os.path.join(team_folder)) ]"},{"lineNumber":71,"author":{"gitId":"github-classroom[bot]"},"content":"if len(sub_dir_files) \u003c 2 or len(sub_dir_files) \u003e 3:"},{"lineNumber":72,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Failed] - Must only contain 2 - 3 items: Tests dir and Code dir, and a report pdf if submission requires\")"},{"lineNumber":73,"author":{"gitId":"github-classroom[bot]"},"content":"    sys.exit()"},{"lineNumber":74,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":75,"author":{"gitId":"github-classroom[bot]"},"content":"sub_dirs_compliance \u003d {"},{"lineNumber":76,"author":{"gitId":"github-classroom[bot]"},"content":"    \"code\" : \"Code{}\".format(team_no_str),"},{"lineNumber":77,"author":{"gitId":"github-classroom[bot]"},"content":"    \"tests\" : \"Tests{}\".format(team_no_str)"},{"lineNumber":78,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":79,"author":{"gitId":"github-classroom[bot]"},"content":"sub_dirs \u003d check_compliance(sub_dirs_compliance, sub_dir_files, os.path.join(team_folder))"},{"lineNumber":80,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":81,"author":{"gitId":"github-classroom[bot]"},"content":"base_code_path \u003d sub_dirs[\u0027code\u0027]"},{"lineNumber":82,"author":{"gitId":"github-classroom[bot]"},"content":"base_tests_path \u003d sub_dirs[\u0027tests\u0027]"},{"lineNumber":83,"author":{"gitId":"github-classroom[bot]"},"content":"for f in sub_dirs:"},{"lineNumber":84,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Passed] - Found correctly formatted {}: {}\".format(f, sub_dirs[f]))"},{"lineNumber":85,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":86,"author":{"gitId":"github-classroom[bot]"},"content":"# now we check the code compliance"},{"lineNumber":87,"author":{"gitId":"github-classroom[bot]"},"content":"code_sub_dirs_compliance \u003d {"},{"lineNumber":88,"author":{"gitId":"github-classroom[bot]"},"content":"    \"toolchain file\" : {\"CMakeLists.txt\", \"StartupSPASolution.sln\"},"},{"lineNumber":89,"author":{"gitId":"github-classroom[bot]"},"content":"    \"source\" : {\"src\", \"source\"},"},{"lineNumber":90,"author":{"gitId":"github-classroom[bot]"},"content":"    \"lib\" : \"lib\""},{"lineNumber":91,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":92,"author":{"gitId":"github-classroom[bot]"},"content":"code_sub_dirs \u003d check_compliance(code_sub_dirs_compliance, os.listdir(os.path.join(base_code_path)), base_code_path)"},{"lineNumber":93,"author":{"gitId":"github-classroom[bot]"},"content":"for f in code_sub_dirs:"},{"lineNumber":94,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Passed] - Found correctly formatted {}: {}\".format(f, code_sub_dirs[f]))"},{"lineNumber":95,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":96,"author":{"gitId":"github-classroom[bot]"},"content":"# Ensure that debug and release are empty"},{"lineNumber":97,"author":{"gitId":"github-classroom[bot]"},"content":"is_empty(\"Release\", base_code_path)"},{"lineNumber":98,"author":{"gitId":"github-classroom[bot]"},"content":"is_empty(\"Debug\", base_code_path)"},{"lineNumber":99,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":100,"author":{"gitId":"github-classroom[bot]"},"content":"# we now check if the tests directory is properly organized"},{"lineNumber":101,"author":{"gitId":"github-classroom[bot]"},"content":"test_sub_dirs_regex \u003d {"},{"lineNumber":102,"author":{"gitId":"github-classroom[bot]"},"content":"    \"queries\" : r\"[a-zA-Z0-9\\-]+_queries.txt\","},{"lineNumber":103,"author":{"gitId":"github-classroom[bot]"},"content":"    \"source\" : r\"[a-zA-Z0-9\\-]+_source.txt\""},{"lineNumber":104,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":105,"author":{"gitId":"github-classroom[bot]"},"content":"test_sub_dirs \u003d {"},{"lineNumber":106,"author":{"gitId":"github-classroom[bot]"},"content":"    \"queries\" : set(),"},{"lineNumber":107,"author":{"gitId":"github-classroom[bot]"},"content":"    \"source\" : set()"},{"lineNumber":108,"author":{"gitId":"github-classroom[bot]"},"content":"}"},{"lineNumber":109,"author":{"gitId":"github-classroom[bot]"},"content":"for f in os.listdir(base_tests_path):"},{"lineNumber":110,"author":{"gitId":"github-classroom[bot]"},"content":"    for cat in test_sub_dirs_regex:"},{"lineNumber":111,"author":{"gitId":"github-classroom[bot]"},"content":"        regex \u003d test_sub_dirs_regex[cat]"},{"lineNumber":112,"author":{"gitId":"github-classroom[bot]"},"content":"        if re.match(regex, f):"},{"lineNumber":113,"author":{"gitId":"github-classroom[bot]"},"content":"            test_sub_dirs[cat].add(f)"},{"lineNumber":114,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":115,"author":{"gitId":"github-classroom[bot]"},"content":"# We attempt to validate the files of each test case, which each will have 2 parts: source and queries"},{"lineNumber":116,"author":{"gitId":"github-classroom[bot]"},"content":"if len(test_sub_dirs[\"queries\"]) !\u003d len(test_sub_dirs[\"source\"]):"},{"lineNumber":117,"author":{"gitId":"github-classroom[bot]"},"content":"    print(\"[Failed] Each testcase should have a source and query pair.\")"},{"lineNumber":118,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":119,"author":{"gitId":"github-classroom[bot]"},"content":"for query in test_sub_dirs[\"queries\"]:"},{"lineNumber":120,"author":{"gitId":"github-classroom[bot]"},"content":"    test_name \u003d query[:-12]"},{"lineNumber":121,"author":{"gitId":"github-classroom[bot]"},"content":"    if not \"{}_source.txt\".format(test_name) in test_sub_dirs[\"source\"]:"},{"lineNumber":122,"author":{"gitId":"github-classroom[bot]"},"content":"        print(\"[Failed] - Test {} does not have both source and query file.\".format(test_name))"},{"lineNumber":123,"author":{"gitId":"github-classroom[bot]"},"content":"        sys.exit()"},{"lineNumber":124,"author":{"gitId":"github-classroom[bot]"},"content":"    else:"},{"lineNumber":125,"author":{"gitId":"github-classroom[bot]"},"content":"        print(\"[Passed] - Test {} has both source and query file.\".format(test_name))"},{"lineNumber":126,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":127,"author":{"gitId":"github-classroom[bot]"},"content":"allowed_hidden_files \u003d {\u0027.gitignore\u0027, \u0027.gitattributes\u0027}"},{"lineNumber":128,"author":{"gitId":"github-classroom[bot]"},"content":"allowed_hidden_dirs \u003d {\u0027.git\u0027}"},{"lineNumber":129,"author":{"gitId":"github-classroom[bot]"},"content":"# Now we check for hidden files"},{"lineNumber":130,"author":{"gitId":"github-classroom[bot]"},"content":"for root, dirnames, filenames in os.walk(\".\"):"},{"lineNumber":131,"author":{"gitId":"github-classroom[bot]"},"content":"    for filename in filenames:"},{"lineNumber":132,"author":{"gitId":"github-classroom[bot]"},"content":"        if filename.startswith(\".\") and not filename in allowed_hidden_files:"},{"lineNumber":133,"author":{"gitId":"github-classroom[bot]"},"content":"            print(\"[Failed] - Hidden file {} should not exist.\".format(os.path.join(root, filename)))"},{"lineNumber":134,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":135,"author":{"gitId":"github-classroom[bot]"},"content":"    for dir in dirnames:"},{"lineNumber":136,"author":{"gitId":"github-classroom[bot]"},"content":"        if dir.startswith(\".\") and not dir in allowed_hidden_dirs:"},{"lineNumber":137,"author":{"gitId":"github-classroom[bot]"},"content":"            print(\"[Failed] - Hidden dir {} should not exist.\".format(os.path.join(root, dir)))"},{"lineNumber":138,"author":{"gitId":"github-classroom[bot]"},"content":""},{"lineNumber":139,"author":{"gitId":"github-classroom[bot]"},"content":"# Now we have established correct subdirs"},{"lineNumber":140,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"-\"*80)"},{"lineNumber":141,"author":{"gitId":"github-classroom[bot]"},"content":"print(\"[Passed] - Project conforms to basic submission requirements.\")"}],"authorContributionMap":{"github-classroom[bot]":141}},{"path":"Team19/Code19/lib/autotester/AMD64/Windows/Debug/autotester.lib","fileType":"lib","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/AMD64/Windows/Release/autotester.lib","fileType":"lib","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/arm64/Darwin/Debug/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/arm64/Darwin/Release/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/x86_64/Darwin/Debug/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/x86_64/Darwin/Release/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/x86_64/Linux/Debug/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/lib/autotester/x86_64/Linux/Release/libautotester.a","fileType":"a","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}},{"path":"Team19/Code19/tests/analysis.xsl","fileType":"xsl","isBinary":true,"lines":[],"authorContributionMap":{"hmanhduc2k":0}}]
